umps(json.loads(open(file_path).read())))))
id-put)
        for descriptions of editable properties.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.ApplicationPropertiesResource.getApplicationProperty_get
      parameters:
      - description: The key of the application property.
        in: query
        name: key
        schema:
          type: string
      - description: The permission level of all items being returned in the list.
        in: query
        name: permissionLevel
        schema:
          type: string
      - description: When a `key` isn't provided, this filters the list of results
          by the application property `key` using a regular expression. For example,
          using `jira.lf.*` will return all application properties with keys that
          start with *jira.lf.*.
        in: query
        name: keyFilter
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"id":"jira.home","key":"jira.home","value":"/var/jira/jira-home","name":"jira.home","desc":"Jira
                home directory","type":"string","defaultValue":""},{"id":"jira.clone.prefix","key":"jira.clone.prefix","value":"CLONE
                -","name":"The prefix added to the Summary field of cloned issues","type":"string","defaultValue":"CLONE
                -"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationProperty'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the application property is not found or the user
            does not have permission to view it.
      security:
      - basicAuth: []
      summary: Get application property
      tags:
      - Jira settings
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/application-properties/advanced-settings:
    get:
      deprecated: false
      description: 'Returns the application properties that are accessible on the
        *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira,
        choose the Jira icon > **Jira settings** > **System**, **General Configuration**
        and then click **Advanced Settings** (in the upper right).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.ApplicationPropertiesResource.getAdvancedSettings_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"id":"jira.home","key":"jira.home","value":"/var/jira/jira-home","name":"jira.home","desc":"Jira
                home directory","type":"string","defaultValue":""},{"id":"jira.clone.prefix","key":"jira.clone.prefix","value":"CLONE
                -","name":"The prefix added to the Summary field of cloned issues","type":"string","defaultValue":"CLONE
                -"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationProperty'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user is not an administrator.
      security:
      - basicAuth: []
      summary: Get advanced settings
      tags:
      - Jira settings
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/application-properties/{id}:
    put:
      deprecated: false
      description: "Changes the value of an application property. For example, you\
        \ can change the value of the `jira.clone.prefix` from its default value of\
        \ *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable\
        \ properties are described below along with their default values.\n\n####\
        \ Advanced settings ####\n\nThe advanced settings below are also accessible\
        \ in [Jira](https://confluence.atlassian.com/x/vYXKM).\n\n| Key | Description\
        \ | Default value |  \n| -- | -- | -- |  \n| `jira.clone.prefix` | The string\
        \ of text prefixed to the title of a cloned issue. | `CLONE -` |  \n| `jira.date.picker.java.format`\
        \ | The date format for the Java (server-side) generated dates. This must\
        \ be the same as the `jira.date.picker.javascript.format` format setting.\
        \ | `d/MMM/yy` |  \n| `jira.date.picker.javascript.format` | The date format\
        \ for the JavaScript (client-side) generated dates. This must be the same\
        \ as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  \n\
        | `jira.date.time.picker.java.format` | The date format for the Java (server-side)\
        \ generated date times. This must be the same as the `jira.date.time.picker.javascript.format`\
        \ format setting. | `dd/MMM/yy h:mm a` |  \n| `jira.date.time.picker.javascript.format`\
        \ | The date format for the JavaScript (client-side) generated date times.\
        \ This must be the same as the `jira.date.time.picker.java.format` format\
        \ setting. | `%e/%b/%y %I:%M %p` |  \n| `jira.issue.actions.order` | The default\
        \ order of actions (such as *Comments* or *Change history*) displayed on the\
        \ issue view. | `asc` |  \n| `jira.table.cols.subtasks` | The columns to show\
        \ while viewing subtask issues in a table. For example, a list of subtasks\
        \ on an issue. | `issuetype, status, assignee, progress` |  \n| `jira.view.issue.links.sort.order`\
        \ | The sort order of the list of issue links on the issue view. | `type,\
        \ status, priority` |  \n| `jira.comment.collapsing.minimum.hidden` | The\
        \ minimum number of comments required for comment collapsing to occur. A value\
        \ of `0` disables comment collapsing. | `4` |  \n| `jira.newsletter.tip.delay.days`\
        \ | The number of days before a prompt to sign up to the Jira Insiders newsletter\
        \ is shown. A value of `-1` disables this feature. | `7` |  \n\n\n#### Look\
        \ and feel ####\n\nThe settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).\n\
        \n| Key | Description | Default value |  \n| -- | -- | -- |  \n| `jira.lf.date.time`\
        \ | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html).\
        \ | `h:mm a` |  \n| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html).\
        \ | `EEEE h:mm a` |  \n| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html).\
        \ | `dd/MMM/yy h:mm a` |  \n| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html).\
        \ | `dd/MMM/yy` |  \n| `jira.date.time.picker.use.iso8061` | When enabled,\
        \ sets Monday as the first day of the week in the date picker, as specified\
        \ by the ISO8601 standard. | `false` |  \n| `jira.lf.logo.url` | The URL of\
        \ the logo image file. | `/images/icon-jira-logo.png` |  \n| `jira.lf.logo.show.application.title`\
        \ | Controls the visibility of the application title on the sidebar. | `false`\
        \ |  \n| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico`\
        \ |  \n| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon.\
        \ | `/images/64jira.png` |  \n| `jira.lf.top.adg3.bgcolour` | The background\
        \ color of the sidebar. | `#0747A6` |  \n| `jira.lf.top.adg3.textcolour` |\
        \ The color of the text and logo of the sidebar. | `#DEEBFF` |  \n| `jira.lf.hero.button.base.bg.colour`\
        \ | The background color of the hero button. | `#3b7fc4` |  \n| `jira.title`\
        \ | The text for the application title. The application title can also be\
        \ set in *General settings*. | `Jira` |  \n| `jira.option.globalsharing` |\
        \ Whether filters and dashboards can be shared with anyone signed into Jira.\
        \ | `true` |  \n| `xflow.product.suggestions.enabled` | Whether to expose\
        \ product suggestions for other Atlassian products within Jira. | `true` |\
        \  \n\n\n#### Other settings ####\n\n| Key | Description | Default value |\
        \  \n| -- | -- | -- |  \n| `jira.issuenav.criteria.autoupdate` | Whether instant\
        \ updates to search criteria is active. | `true` |  \n\n\n*Note: Be careful\
        \ when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*\n\
        \n**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.admin.ApplicationPropertiesResource.setApplicationProperty_put
      parameters:
      - description: The key of the application property to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              id: jira.home
              value: /var/jira/jira-home
            schema:
              $ref: '#/components/schemas/SimpleApplicationPropertyBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if the data type of the `value` does not match the
            application property's data type. For example, a string is provided instead
            of an integer.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to edit the property.
        '404':
          description: Returned if the property is not found or the user does not
            have permission to view it.
      security:
      - basicAuth: []
      summary: Set application property
      tags:
      - Jira settings
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/applicationrole:
    get:
      deprecated: false
      description: 'Returns all application roles. In Jira, application roles are
        managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL)
        page.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.applicationrole.ApplicationRoleResource.getAllApplicationRoles_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"key":"jira-software","groups":["jira-software-users","jira-testers"],"name":"Jira
                Software","defaultGroups":["jira-software-users"],"selectedByDefault":false,"defined":false,"numberOfSeats":10,"remainingSeats":5,"userCount":5,"userCountDescription":"5
                developers","hasUnlimitedSeats":false,"platform":false},{"key":"jira-core","groups":["jira-core-users"],"name":"Jira
                Core","defaultGroups":["jira-core-users"],"selectedByDefault":false,"defined":false,"numberOfSeats":1,"remainingSeats":1,"userCount":0,"userCountDescription":"0
                users","hasUnlimitedSeats":false,"platform":true}]'
              schema:
                items:
                  $ref: '#/components/schemas/ApplicationRole'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user is not an administrator.
      security:
      - basicAuth: []
      summary: Get all application roles
      tags:
      - Application roles
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/applicationrole/{key}:
    get:
      deprecated: false
      description: 'Returns an application role.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.applicationrole.ApplicationRoleResource.getApplicationRole_get
      parameters:
      - description: The key of the application role. Use the [Get all application
          roles](#api-rest-api-3-applicationrole-get) operation to get the key for
          each application role.
        in: path
        name: key
        required: true
        schema:
          example: jira-software
          type: string
        x-showInExample: 'true'
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"jira-software","groups":["jira-software-users","jira-testers"],"name":"Jira
                Software","defaultGroups":["jira-software-users"],"selectedByDefault":false,"defined":false,"numberOfSeats":10,"remainingSeats":5,"userCount":5,"userCountDescription":"5
                developers","hasUnlimitedSeats":false,"platform":false}'
              schema:
                $ref: '#/components/schemas/ApplicationRole'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user is not an administrator.
        '404':
          description: Returned if the role is not found.
      security:
      - basicAuth: []
      summary: Get application role
      tags:
      - Application roles
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/attachment/meta:
    get:
      deprecated: false
      description: 'Returns the attachment settings, that is, whether attachments
        are enabled and the maximum attachment size allowed.


        Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg)
        that restrict whether users can create and delete attachments.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.attachment.AttachmentResource.getAttachmentMeta_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"enabled":true,"uploadLimit":1000000}'
              schema:
                $ref: '#/components/schemas/AttachmentSettings'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get Jira attachment settings
      tags:
      - Issue attachments
      x-atlassian-connect-scope: READ
  /rest/api/3/attachment/{id}:
    delete:
      deprecated: false
      description: "Deletes an attachment from an issue.\n\nThis operation can be\
        \ accessed anonymously.\n\n**[Permissions](#permissions) required:** For the\
        \ project holding the issue containing the attachment:\n\n *  *Delete own\
        \ attachments* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to delete an attachment created by the calling user.\n *  *Delete all attachments*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete\
        \ an attachment created by any user."
      operationId: com.atlassian.jira.rest.v2.issue.attachment.AttachmentResource.removeAttachment_delete
      parameters:
      - description: The ID of the attachment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the attachment is not found.\n *  attachments\
            \ are disabled in the Jira settings."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete attachment
      tags:
      - Issue attachments
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the metadata for an attachment. Note that the attachment\
        \ itself is not returned.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project that\
        \ the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.attachment.AttachmentResource.getAttachment_get
      parameters:
      - description: The ID of the attachment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.715+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}'
              schema:
                $ref: '#/components/schemas/AttachmentMetadata'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the attachment is not found.\n *  attachments\
            \ are disabled in the Jira settings."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get attachment metadata
      tags:
      - Issue attachments
      x-atlassian-connect-scope: READ
  /rest/api/3/attachment/{id}/expand/human:
    get:
      deprecated: false
      description: "Returns the metadata for the contents of an attachment, if it\
        \ is an archive, and metadata for the attachment itself. For example, if the\
        \ attachment is a ZIP archive, then information about the files in the archive\
        \ is returned and metadata for the ZIP archive. Currently, only the ZIP archive\
        \ format is supported.\n\nUse this operation to retrieve data that is presented\
        \ to the user, as this operation returns the metadata for the attachment itself,\
        \ such as the attachment's ID and name. Otherwise, use [ Get contents metadata\
        \ for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get),\
        \ which only returns the metadata for the attachment's contents.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\
        \ For the issue containing the attachment:\n\n *  *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project that\
        \ the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.attachment.AttachmentResource.expandAttachmentForHumans_get
      parameters:
      - description: The ID of the attachment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":7237823,"name":"images.zip","entries":[{"path":"MG00N067.JPG","index":0,"size":"119
                kB","mediaType":"image/jpeg","label":"MG00N067.JPG"},{"path":"Allegro
                from Duet in C Major.mp3","index":1,"size":"1.36 MB","mediaType":"audio/mpeg","label":"Allegro
                from Duet in C Major.mp3"},{"path":"long/path/thanks/to/lots/of/subdirectories/inside/making/it/quite/hard/to/reach/the/leaf.txt","index":2,"size":"0.0
                k","mediaType":"text/plain","label":"long/path/thanks/to/.../reach/the/leaf.txt"}],"totalEntryCount":39,"mediaType":"application/zip"}'
              schema:
                $ref: '#/components/schemas/AttachmentArchiveMetadataReadable'
          description: Returned if the request is successful. If an empty list is
            returned in the response, the attachment is empty, corrupt, or not an
            archive.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: The user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the attachment is not found.\n *  attachments\
            \ are disabled in the Jira settings."
        '409':
          description: Returned if the attachment is an archive, but not a supported
            archive format.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all metadata for an expanded attachment
      tags:
      - Issue attachments
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/attachment/{id}/expand/raw:
    get:
      deprecated: false
      description: "Returns the metadata for the contents of an attachment, if it\
        \ is an archive. For example, if the attachment is a ZIP archive, then information\
        \ about the files in the archive is returned. Currently, only the ZIP archive\
        \ format is supported.\n\nUse this operation if you are processing the data\
        \ without presenting it to the user, as this operation only returns the metadata\
        \ for the contents of the attachment. Otherwise, to retrieve data to present\
        \ to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get)\
        \ which also returns the metadata for the attachment itself, such as the attachment's\
        \ ID and name.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** For the issue containing the attachment:\n\n *  *Browse projects*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
        \ project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.attachment.AttachmentResource.expandAttachmentForMachines_get
      parameters:
      - description: The ID of the attachment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"entries":[{"entryIndex":0,"name":"Allegro from Duet in C
                Major.mp3","size":1430174,"mediaType":"audio/mpeg"},{"entryIndex":1,"name":"lrm.rtf","size":331,"mediaType":"text/rtf"}],"totalEntryCount":24}'
              schema:
                $ref: '#/components/schemas/AttachmentArchiveImpl'
          description: Returned if the request is successful. If an empty list is
            returned in the response, the attachment is empty, corrupt, or not an
            archive.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: The user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the attachment is not found.\n *  attachments\
            \ are disabled in the Jira settings."
        '409':
          description: Returned if the attachment is an archive, but not a supported
            archive format.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get contents metadata for an expanded attachment
      tags:
      - Issue attachments
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/auditing/record:
    get:
      deprecated: false
      description: "Returns a list of audit records. The list can be filtered to include\
        \ items:\n\n *  containing a string in at least one field. For example, providing\
        \ *up* will return all audit records where one or more fields contains words\
        \ such as *update*.\n *  created on or after a date and time.\n *  created\
        \ or or before a date and time.\n *  created during a time period.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.admin.auditing.AuditingResource.getAuditRecords_get
      parameters:
      - description: The number of records to skip before returning the first result.
        in: query
        name: offset
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of results to return.
        in: query
        name: limit
        schema:
          default: 1000
          format: int32
          type: integer
      - description: The query string.
        in: query
        name: filter
        schema:
          type: string
      - description: The date and time on or after which returned audit records must
          have been created. If `to` is provided `from` must be before `to` or no
          audit records are returned.
        in: query
        name: from
        schema:
          format: date-time
          type: string
      - description: The date and time on or before which returned audit results must
          have been created. If `from` is provided `to` must be after `from` or no
          audit records are returned.
        in: query
        name: to
        schema:
          format: date-time
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"offset":0,"limit":1000,"total":1,"records":[{"id":1,"summary":"User
                created","remoteAddress":"192.168.1.1","authorKey":"administrator","authorAccountId":"5ab8f18d741e9c2c7e9d4538","created":"2014-03-19T18:45:42.967+0000","category":"user
                management","eventSource":"Jira Connect Plugin","description":"Optional
                description","objectItem":{"id":"user","name":"user","typeName":"USER","parentId":"1","parentName":"Jira
                Internal Directory"},"changedValues":[{"fieldName":"email","changedFrom":"user@atlassian.com","changedTo":"newuser@atlassian.com"}],"associatedItems":[{"id":"jira-software-users","name":"jira-software-users","typeName":"GROUP","parentId":"1","parentName":"Jira
                Internal Directory"}]}]}'
              schema:
                $ref: '#/components/schemas/AuditRecords'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: "Returned if:\n\n *  the user does not have the required permissions.\n\
            \ *  all Jira products are on free plans. Audit logs are available when\
            \ at least one Jira product is on a paid plan."
      security:
      - basicAuth: []
      summary: Get audit records
      tags:
      - Audit records
      x-atlassian-connect-scope: READ
  /rest/api/3/avatar/{type}/system:
    get:
      deprecated: false
      description: 'Returns a list of system avatar details by owner type, where the
        owner types are issue type, project, or user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.AvatarResource.getAllSystemAvatars_get
      parameters:
      - description: The avatar type.
        in: path
        name: type
        required: true
        schema:
          enum:
          - issuetype
          - project
          - user
          example: project
          type: string
        x-showInExample: 'true'
      responses:
        '200':
          content:
            application/json:
              example: '{"system":[{"id":"1000","isSystemAvatar":true,"isSelected":false,"isDeletable":false,"urls":{"16x16":"/secure/useravatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"/secure/useravatar?size=small&avatarId=10040&avatarType=project","32x32":"/secure/useravatar?size=medium&avatarId=10040&avatarType=project","48x48":"/secure/useravatar?avatarId=10040&avatarType=project"}}]}'
              schema:
                $ref: '#/components/schemas/SystemAvatars'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '500':
          description: Returned if an error occurs while retrieving the list of avatars.
      security:
      - basicAuth: []
      - {}
      summary: Get system avatars by type
      tags:
      - Avatars
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/comment/list:
    post:
      deprecated: false
      description: "Returns the comments for a list of comment IDs.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\
        \ Comments are returned where the user:\n\n *  has *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project containing\
        \ the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the comment has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentListResource.getCommentsByIds_post
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ comments in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `renderedBody` Returns the comment body\
          \ rendered in HTML.\n *  `properties` Returns the comment's properties."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              ids:
              - 1
              - 2
              - 5
              - 10
            schema:
              $ref: '#/components/schemas/IssueCommentListRequestBean'
        description: The list of comment IDs.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":1048576,"startAt":0,"total":1,"isLast":true,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanComment'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request contains more than 1000 IDs or is empty.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get comments by IDs
      tags:
      - Issue comments
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/comment/{commentId}/properties:
    get:
      deprecated: false
      description: "Returns the keys of all the properties of a comment.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the comment has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.CommentPropertyResource.getCommentPropertyKeys_get
      parameters:
      - description: The ID of the comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '400':
          description: Returned if the comment ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the comment is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get comment property keys
      tags:
      - Issue comment properties
      x-atlassian-connect-scope: READ
  /rest/api/3/comment/{commentId}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: "Deletes a comment property.\n\n**[Permissions](#permissions) required:**\
        \ either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to delete a property from any comment.\n *  *Edit Own Comments* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) to delete a property\
        \ from a comment created by the user.\n\nAlso, when the visibility of a comment\
        \ is restricted to a role or group the user must be a member of that role\
        \ or group."
      operationId: com.atlassian.jira.rest.v2.issue.CommentPropertyResource.deleteCommentProperty_delete
      parameters:
      - description: The ID of the comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the comment or the property is not found or the
            user has the necessary project permissions but isn't a member of the role
            or group visibility of the comment is restricted to.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete comment property
      tags:
      - Issue comment properties
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the value of a comment property.\n\nThis operation can\
        \ be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n\
        \ *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the comment has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.CommentPropertyResource.getCommentProperty_get
      parameters:
      - description: The ID of the comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the comment or the property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get comment property
      tags:
      - Issue comment properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Creates or updates the value of a property for a comment. Use\
        \ this resource to store custom data against a comment.\n\nThe value of the\
        \ request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty\
        \ JSON blob. The maximum length is 32768 characters.\n\n**[Permissions](#permissions)\
        \ required:** either of:\n\n *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to create or update the value of a property on any comment.\n *  *Edit Own\
        \ Comments* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to create or update the value of a property on a comment created by the\
        \ user.\n\nAlso, when the visibility of a comment is restricted to a role\
        \ or group the user must be a member of that role or group."
      operationId: com.atlassian.jira.rest.v2.issue.CommentPropertyResource.setCommentProperty_put
      parameters:
      - description: The ID of the comment.
        in: path
        name: commentId
        required: true
        schema:
          type: string
      - description: The key of the property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the comment property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the comment property is created.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the comment is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set comment property
      tags:
      - Issue comment properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/component:
    post:
      deprecated: false
      description: 'Creates a component. Use components to provide containers for
        issues within a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project in which the component is created or *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ComponentResource.createComponent_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              assigneeType: PROJECT_LEAD
              description: This is a Jira component
              isAssigneeTypeValid: false
              leadAccountId: 5b10a2844c20165700ede21g
              name: Component 1
              project: HSP
            schema:
              $ref: '#/components/schemas/Component'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Component'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the user is not found.\n *  `name` is\
            \ not provided.\n *  `name` is over 255 characters in length.\n *  `projectId`\
            \ is not provided.\n *  `assigneeType` is an invalid value."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to manage the
            project containing the component or does not have permission to administer
            Jira.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to browse the project containing the component.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Create component
      tags:
      - Project components
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/component/{id}:
    delete:
      deprecated: false
      description: 'Deletes a component.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ComponentResource.deleteComponent_delete
      parameters:
      - description: The ID of the component.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the component to replace the deleted component. If
          this value is null no replacement is made.
        in: query
        name: moveIssuesTo
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to manage the
            project containing the component or does not have permission to administer
            Jira.
        '404':
          description: "Returned if:\n\n *  the component is not found.\n *  the replacement\
            \ component is not found.\n *  the user does not have permission to browse\
            \ the project containing the component."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete component
      tags:
      - Project components
      x-atlassian-connect-scope: PROJECT_ADMIN
    get:
      deprecated: false
      description: 'Returns a component.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for project containing the component.'
      operationId: com.atlassian.jira.rest.v2.issue.ComponentResource.getComponent_get
      parameters:
      - description: The ID of the component.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Component'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the component is not found or the user does not
            have permission to browse the project containing the component.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get component
      tags:
      - Project components
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates a component. Any fields included in the request are overwritten.
        If `leadAccountId` is an empty string ("") the component lead is removed.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ComponentResource.updateComponent_put
      parameters:
      - description: The ID of the component.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              assigneeType: PROJECT_LEAD
              description: This is a Jira component
              isAssigneeTypeValid: false
              leadAccountId: 5b10a2844c20165700ede21g
              name: Component 1
            schema:
              $ref: '#/components/schemas/Component'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Component'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the user is not found.\n *  `assigneeType`\
            \ is an invalid value.\n *  `name` is over 255 characters in length."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to manage the
            project containing the component or does not have permission to administer
            Jira.
        '404':
          description: Returned if the component is not found or the user does not
            have permission to browse the project containing the component.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Update component
      tags:
      - Project components
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/component/{id}/relatedIssueCounts:
    get:
      deprecated: false
      description: 'Returns the counts of issues assigned to the component.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.ComponentResource.getComponentRelatedIssues_get
      parameters:
      - description: The ID of the component.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","issueCount":23}'
              schema:
                $ref: '#/components/schemas/ComponentIssuesCount'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the component is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get component issues count
      tags:
      - Project components
      x-atlassian-connect-scope: READ
  /rest/api/3/configuration:
    get:
      deprecated: false
      description: 'Returns the [global settings](https://confluence.atlassian.com/x/qYXKM)
        in Jira. These settings determine whether optional features (for example,
        subtasks, time tracking, and others) are enabled. If time tracking is enabled,
        this operation also returns the time tracking configuration.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.admin.ConfigurationResource.getConfiguration_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"votingEnabled":true,"watchingEnabled":true,"unassignedIssuesAllowed":false,"subTasksEnabled":false,"issueLinkingEnabled":true,"timeTrackingEnabled":true,"attachmentsEnabled":true,"timeTrackingConfiguration":{"workingHoursPerDay":8.0,"workingDaysPerWeek":5.0,"timeFormat":"pretty","defaultUnit":"day"}}'
              schema:
                $ref: '#/components/schemas/Configuration'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - {}
      summary: Get global settings
      tags:
      - Jira settings
      x-atlassian-connect-scope: READ
  /rest/api/3/configuration/timetracking:
    get:
      deprecated: false
      description: 'Returns the time tracking provider that is currently selected.
        Note that if time tracking is disabled, then a successful but empty response
        is returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.timetracking.TimeTrackingResource.getSelectedTimeTrackingImplementation_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}'
              schema:
                $ref: '#/components/schemas/TimeTrackingProvider'
          description: Returned if the request is successful and time tracking is
            enabled.
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful but time tracking is
            disabled.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get selected time tracking provider
      tags:
      - Time tracking
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Selects a time tracking provider.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.timetracking.TimeTrackingResource.selectTimeTrackingImplementation_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              key: Jira
            schema:
              $ref: '#/components/schemas/TimeTrackingProvider'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if the time tracking provider is not found.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Select time tracking provider
      tags:
      - Time tracking
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/configuration/timetracking/list:
    get:
      deprecated: false
      description: 'Returns all time tracking providers. By default, Jira only has
        one time tracking provider: *JIRA provided time tracking*. However, you can
        install other time tracking providers via apps from the Atlassian Marketplace.
        For more information on time tracking providers, see the documentation for
        the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/)
        module.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.timetracking.TimeTrackingResource.getAvailableTimeTrackingImplementations_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"key":"Jira","name":"JIRA provided time tracking","url":"/example/config/url"}]'
              schema:
                items:
                  $ref: '#/components/schemas/TimeTrackingProvider'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get all time tracking providers
      tags:
      - Time tracking
      x-atlassian-connect-scope: READ
  /rest/api/3/configuration/timetracking/options:
    get:
      deprecated: false
      description: 'Returns the time tracking settings. This includes settings such
        as the time format, default time unit, and others. For more information, see
        [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.timetracking.TimeTrackingResource.getSharedTimeTrackingConfiguration_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"workingHoursPerDay":7.6,"workingDaysPerWeek":5.5,"timeFormat":"pretty","defaultUnit":"hour"}'
              schema:
                $ref: '#/components/schemas/TimeTrackingConfiguration'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get time tracking settings
      tags:
      - Time tracking
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Sets the time tracking settings.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.timetracking.TimeTrackingResource.setSharedTimeTrackingConfiguration_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              defaultUnit: hour
              timeFormat: pretty
              workingDaysPerWeek: 5.5
              workingHoursPerDay: 7.6
            schema:
              $ref: '#/components/schemas/TimeTrackingConfiguration'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"workingHoursPerDay":7.6,"workingDaysPerWeek":5.5,"timeFormat":"pretty","defaultUnit":"hour"}'
              schema:
                $ref: '#/components/schemas/TimeTrackingConfiguration'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request object is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Set time tracking settings
      tags:
      - Time tracking
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/customField/{fieldId}/option:
    get:
      deprecated: false
      description: 'Returns the options and, where the custom select field is of the
        type *Select List (cascading)*, cascading options for custom select fields.
        Cascading options are included in the item count when determining pagination.
        Only options from the global context are returned.


        Note that this operation **only works for issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource**, it cannot be used with issue field select list options created
        by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.BulkCustomFieldOptionResource.getOptionsForField_get
      parameters:
      - description: 'The ID of the custom field. Note: This is the numeric part of
          the of the field ID. For example, for a field with the ID *customfield\_10075*
          use *10075*.'
        in: path
        name: fieldId
        required: true
        schema:
          format: int64
          type: integer
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 1000
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":2,"startAt":0,"total":100,"isLast":false,"values":[{"id":10000,"value":"Option
                value","cascadingOptions":["Child option","Child option 2"]},{"id":10001,"value":"Other
                option value","cascadingOptions":[]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanCustomFieldOptionDetails'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the field is not found.
      security:
      - basicAuth: []
      summary: Get options for field
      tags:
      - Issue custom field options
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Creates options and, where the custom select field is of the type
        *Select List (cascading)*, cascading options for a custom select field. The
        options are added to the global context of the field.


        Note that this operation **only works for issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource**, it cannot be used with issue field select list options created
        by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.BulkCustomFieldOptionResource.createCustomFieldOptions_post
      parameters:
      - description: 'The ID of the custom field. Note: This is the numeric part of
          the of the field ID. For example, for a field with the ID *customfield\_10075*
          use *10075*.'
        in: path
        name: fieldId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              options:
              - cascadingOptions: []
                value: Option value
              - cascadingOptions:
                - Child option
                value: Other option value
              - cascadingOptions:
                - Sub-option
                - Sub-option 2
                value: Third option value
            schema:
              $ref: '#/components/schemas/BulkCreateCustomFieldOptionRequest'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the field is not found.
      security:
      - basicAuth: []
      summary: Create custom field options
      tags:
      - Issue custom field options
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Updates the options on a custom select field. Where an updated
        option is in use on an issue, the value on the issue is also updated. Options
        that are not found are ignored. A maximum of 1000 options, including sub-options
        of *Select List (cascading)* fields, can be updated per request. The options
        are updated on the global context of the field.


        Note that this operation **only works for issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource**, it cannot be used with issue field select list options created
        by Connect apps.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.BulkCustomFieldOptionResource.updateCustomFieldOptions_put
      parameters:
      - description: 'The ID of the custom field. Note: This is the numeric part of
          the of the field ID. For example, for a field with the ID *customfield\_10075*
          use *10075*.'
        in: path
        name: fieldId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              options:
              - cascadingOptions: []
                value: Option value
              - cascadingOptions:
                - Child option
                value: Other option value
              - cascadingOptions:
                - Sub-option
                - Sub-option 2
                value: Third option value
            schema:
              $ref: '#/components/schemas/UpdateCustomFieldOption'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the field is not found.
      security:
      - basicAuth: []
      summary: Update custom field options
      tags:
      - Issue custom field options
      x-atlassian-connect-scope: ADMIN
      x-experimental: true
  /rest/api/3/customFieldOption/{id}:
    get:
      deprecated: false
      description: 'Returns a custom field option. For example, an option in a select
        list.


        Note that this operation **only works for issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource**, it cannot be used with issue field select list options created
        by Connect apps.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.customfield.CustomFieldOptionResource.getCustomFieldOption_get
      parameters:
      - description: The ID of the custom field option.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/customFieldOption/10000","value":"To
                Do"}'
              schema:
                $ref: '#/components/schemas/CustomFieldOption'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the custom field option is not found.\n\
            \ *  the user does not have permission to view the custom field."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get custom field option
      tags:
      - Issue custom field options
      x-atlassian-connect-scope: READ
  /rest/api/3/dashboard:
    get:
      deprecated: false
      description: 'Returns a list of dashboards owned by or shared with the user.
        The list may be filtered to include only favorite or owned dashboards.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.getAllDashboards_get
      parameters:
      - description: "The filter applied to the list of dashboards. Valid values are:\n\
          \n *  `favourite` Returns dashboards the user has marked as favorite.\n\
          \ *  `my` Returns dashboards owned by the user."
        in: query
        name: filter
        schema:
          enum:
          - my
          - favourite
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 20
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"startAt":10,"maxResults":10,"total":143,"prev":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=0","next":"https://your-domain.atlassian.net/rest/api/3/dashboard?startAt=10","dashboards":[{"id":"10000","isFavourite":false,"name":"System
                Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"},{"id":"20000","isFavourite":true,"name":"Build
                Engineering","owner":{"key":"Mia","self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","name":"mia","displayName":"Mia
                Krystof","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/20000","sharePermissions":[{"id":10105,"type":"group","group":{"name":"administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=administrators"}}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=20000"}]}'
              schema:
                $ref: '#/components/schemas/PageOfDashboards'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
      security:
      - basicAuth: []
      - {}
      summary: Get all dashboards
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
    post:
      deprecated: false
      description: 'Creates a dashboard.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.createDashboard_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: A dashboard to help auditors identify sample of issues
                to check.
              name: Auditors dashboard
              sharePermissions:
              - type: global
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        description: Dashboard object to be created.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}'
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is not valid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Create dashboard
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/dashboard/search:
    get:
      deprecated: false
      description: "Searches for dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get)\
        \ except that the results can be refined to include dashboards that have specific\
        \ attributes. For example, dashboards with a particular name. When multiple\
        \ attributes are specified only filters matching all attributes are returned.\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** The following dashboards that match the query parameters are\
        \ returned:\n\n *  Dashboards owned by the user. Not returned for anonymous\
        \ users.\n *  Dashboards shared with a group that the user is a member of.\
        \ Not returned for anonymous users.\n *  Dashboards shared with a private\
        \ project that the user can browse. Not returned for anonymous users.\n *\
        \  Dashboards shared with a public project.\n *  Dashboards shared with the\
        \ public."
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.getDashboardsPaginated_get
      parameters:
      - description: String used to perform a case-insensitive partial match with
          `name`.
        in: query
        name: dashboardName
        schema:
          type: string
      - description: User account ID used to return dashboards with the matching `owner.accountId`.
          This parameter cannot be used with the `owner` parameter.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: This parameter is deprecated because of privacy changes. Use
          `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details. User name used to return dashboards with the matching `owner.name`.
          This parameter cannot be used with the `accountId` parameter.
        in: query
        name: owner
        schema:
          type: string
      - description: Group name used to returns dashboards that are shared with a
          group that matches `sharePermissions.group.name`.
        in: query
        name: groupname
        schema:
          type: string
      - description: Project ID used to returns dashboards that are shared with a
          project that matches `sharePermissions.project.id`.
        in: query
        name: projectId
        schema:
          format: int64
          type: integer
      - description: "[Order](#ordering) the results by a field:\n\n *  `description`\
          \ Sorts by dashboard description. Note that this sort works independently\
          \ of whether the expand to display the description field is in use.\n *\
          \  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard\
          \ ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a\
          \ favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard\
          \ owner name."
        in: query
        name: orderBy
        schema:
          default: name
          enum:
          - description
          - -description
          - +description
          - favorite_count
          - -favorite_count
          - +favorite_count
          - id
          - -id
          - +id
          - is_favorite
          - -is_favorite
          - +is_favorite
          - name
          - -name
          - +name
          - owner
          - -owner
          - +owner
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ dashboard in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `description` Returns the description of\
          \ the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl`\
          \ Returns the URL that is used to view the dashboard.\n *  `favourite` Returns\
          \ `isFavourite`, an indicator of whether the user has set the dashboard\
          \ as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of\
          \ how many users have set this dashboard as a favorite.\n *  `sharePermissions`\
          \ Returns details of the share permissions defined for the dashboard."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/search?expand=owner&maxResults=50&startAt=0","maxResults":100,"startAt":0,"total":2,"isLast":true,"values":[{"description":"Testing
                program","id":"1","isFavourite":true,"name":"Testing","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/1","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=1"},{"description":"Quantum
                initiative","id":"2","isFavourite":false,"name":"Quantum ","owner":{"self":"https://your-domain.atlassian.net/user?accountId=5b10a2844c20165700ede21g","displayName":"Mia","active":true,"accountId":"5b10a2844c20165700ede21g","avatarUrls":{"16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32","48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48"}},"popularity":0,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/2","sharePermissions":[{"type":"loggedin"}],"view":"https://your-domain.atlassian.net/Dashboard.jspa?selectPageId=2"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanDashboard'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: "Returned if:\n\n *  `orderBy` is invalid.\n *  `expand` includes\
            \ an invalid value.\n *  `accountId` and `owner` are provided."
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 401 response
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Search for dashboards
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties:
    get:
      deprecated: false
      description: 'Returns the keys of all properties for a dashboard item.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the
        dashboard or be shared the dashboard. Note, users with the *Administer Jira*
        [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered
        owners of the System dashboard. The System dashboard is considered to be shared
        with all other users.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardItemPropertyResource.getDashboardItemPropertyKeys_get
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboardId
        required: true
        schema:
          type: string
      - description: The ID of the dashboard item.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the dashboard or dashboard item is not found, or
            the dashboard is not owned by or shared with the user.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get dashboard item property keys
      tags:
      - Dashboards
      x-atlassian-connect-scope: READ
  /rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: 'Deletes a dashboard item property.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the
        dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        are considered owners of the System dashboard.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardItemPropertyResource.deleteDashboardItemProperty_delete
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboardId
        required: true
        schema:
          type: string
      - description: The ID of the dashboard item.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      - description: The key of the dashboard item property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the dashboard item property is deleted.
        '400':
          description: Returned if the dashboard or dashboard item ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user is not the owner of the dashboard.
        '404':
          description: Returned if the dashboard item is not found or the dashboard
            is not shared with the user.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete dashboard item property
      tags:
      - Dashboards
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: 'Returns the key and value of a dashboard item property.


        A dashboard item enables an app to add user-specific information to a user
        dashboard. Dashboard items are exposed to users as gadgets that users can
        add to their dashboards. For more information on how users do this, see [Adding
        and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).


        When an app creates a dashboard item it registers a callback to receive the
        dashboard item ID. The callback fires whenever the item is rendered or, where
        the item is configurable, the user edits the item. The app then uses this
        resource to store the item''s content or configuration details. For more information
        on working with dashboard items, see [ Building a dashboard item for a JIRA
        Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/)
        and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/)
        documentation.


        There is no resource to set or get dashboard items.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the
        dashboard or be shared the dashboard. Note, users with the *Administer Jira*
        [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered
        owners of the System dashboard. The System dashboard is considered to be shared
        with all other users.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardItemPropertyResource.getDashboardItemProperty_get
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboardId
        required: true
        schema:
          type: string
      - description: The ID of the dashboard item.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      - description: The key of the dashboard item property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the dashboard, the dashboard item, or dashboard
            item property is not found, or the dashboard is not owned by or shared
            with the user.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get dashboard item property
      tags:
      - Dashboards
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Sets the value of a dashboard item property. Use this resource
        in apps to store custom data against a dashboard item.


        A dashboard item enables an app to add user-specific information to a user
        dashboard. Dashboard items are exposed to users as gadgets that users can
        add to their dashboards. For more information on how users do this, see [Adding
        and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).


        When an app creates a dashboard item it registers a callback to receive the
        dashboard item ID. The callback fires whenever the item is rendered or, where
        the item is configurable, the user edits the item. The app then uses this
        resource to store the item''s content or configuration details. For more information
        on working with dashboard items, see [ Building a dashboard item for a JIRA
        Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/)
        and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/)
        documentation.


        There is no resource to set or get dashboard items.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627),
        non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** The user must be the owner of the
        dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        are considered owners of the System dashboard.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardItemPropertyResource.setDashboardItemProperty_put
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: dashboardId
        required: true
        schema:
          type: string
      - description: The ID of the dashboard item.
        in: path
        name: itemId
        required: true
        schema:
          type: string
      - description: The key of the dashboard item property. The maximum length is
          255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the dashboard item property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the dashboard item property is created.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user is not the owner of the dashboard.
        '404':
          description: Returned if the dashboard item is not found or the dashboard
            is not shared with the user.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set dashboard item property
      tags:
      - Dashboards
      x-atlassian-connect-scope: WRITE
  /rest/api/3/dashboard/{id}:
    delete:
      deprecated: false
      description: 'Deletes a dashboard.


        **[Permissions](#permissions) required:**


        The dashboard to be deleted must be owned by the user.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.deleteDashboard_delete
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 400 response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the user does not have necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete dashboard
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
    get:
      deprecated: false
      description: 'Returns a dashboard.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.


        However, to get a dashboard, the dashboard must be shared with the user or
        the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        are considered owners of the System dashboard. The System dashboard is considered
        to be shared with all other users.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.getDashboard_get
      parameters:
      - description: The ID of the dashboard.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}'
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 400 response
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
        '404':
          description: Returned if the dashboard is not found or the dashboard is
            not owned by or shared with the user.
      security:
      - basicAuth: []
      - {}
      summary: Get dashboard
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: 'Updates a dashboard, replacing all the dashboard details with
        those provided.


        **[Permissions](#permissions) required:**


        The dashboard to be updated must be owned by the user.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.updateDashboard_put
      parameters:
      - description: The ID of the dashboard to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: A dashboard to help auditors identify sample of issues
                to check.
              name: Auditors dashboard
              sharePermissions:
              - type: global
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        description: Replacement dashboard details.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}'
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is not valid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the dashboard is not found or the dashboard is
            not owned by the user.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Update dashboard
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/dashboard/{id}/copy:
    post:
      deprecated: false
      description: 'Copies a dashboard. Any values provided in the `dashboard` parameter
        replace those in the copied dashboard.


        **[Permissions](#permissions) required:**


        The dashboard to be copied must be shared with the user or the user must own
        it.'
      operationId: com.atlassian.jira.rest.v2.dashboard.DashboardResource.copyDashboard_post
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: A dashboard to help auditors identify sample of issues
                to check.
              name: Auditors dashboard
              sharePermissions:
              - type: global
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        description: Dashboard object to be created.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"10000","isFavourite":false,"name":"System Dashboard","popularity":1,"self":"https://your-domain.atlassian.net/rest/api/3/dashboard/10000","sharePermissions":[{"type":"global"}],"view":"https://your-domain.atlassian.net/secure/Dashboard.jspa?selectPageId=10000"}'
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is not valid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 403 response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the dashboard is not found or the dashboard is
            not owned by or shared with the user.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Copy dashboard
      tags:
      - Dashboards
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/expression/analyse:
    post:
      deprecated: false
      description: 'Analyses and validates Jira expressions.


        Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).


        **[Permissions](#permissions) required**: None.'
      operationId: com.atlassian.jira.rest.v2.expression.JiraExpressionsResource.analyseExpression_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              expressions:
              - a -> 1
            schema:
              $ref: '#/components/schemas/JiraExpressionForAnalysis'
        description: The Jira expressions to analyse.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"results":[{"expression":"analysed expression","errors":[{"line":1,"column":4,"message":"!,
                -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, new,
                [ or { expected, > encountered.","type":"syntax"},{"message":"Jira
                expression is too long (1040), limit: 1000 characters","type":"other"},{"message":"Jira
                expression has too many nodes (150), limit: 100 leaves","type":"other"}],"valid":false}]}'
              schema:
                $ref: '#/components/schemas/JiraExpressionsAnalysis'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 400 response
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 404 response
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
        - read:jira-user
      - {}
      summary: Analyse Jira expression
      tags:
      - Jira expressions
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/expression/eval:
    post:
      deprecated: false
      description: "Evaluates a Jira expression and returns its value.\n\nThis resource\
        \ can be used to test Jira expressions that you plan to use elsewhere, or\
        \ to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)\
        \ for more details.\n\n#### Context variables ####\n\nThe following context\
        \ variables are available to Jira expressions evaluated by this resource.\
        \ Their presence depends on various factors; usually you need to manually\
        \ request them in the context object sent in the payload, but some of them\
        \ are added automatically under certain conditions.\n\n *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)):\
        \ The current user. Always available and equal to `null` if the request is\
        \ anonymous.\n *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)):\
        \ The Connect app that made the request. Available only for authenticated\
        \ requests made by Connect Apps (read more here: [Authentication for Connect\
        \ apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).\n\
        \ *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)):\
        \ The current issue. Available only when the issue is provided in the request\
        \ context object.\n *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list)\
        \ of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)):\
        \ A collection of issues matching a JQL query. Available only when JQL is\
        \ provided in the request context object.\n *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)):\
        \ The current project. Available only when the project is provided in the\
        \ request context object.\n *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)):\
        \ The current sprint. Available only when the sprint is provided in the request\
        \ context object.\n *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)):\
        \ The current board. Available only when the board is provided in the request\
        \ context object.\n *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)):\
        \ The current service desk. Available only when the service desk is provided\
        \ in the request context object.\n *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)):\
        \ The current customer request. Available only when the customer request is\
        \ provided in the request context object.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required**: None. However,\
        \ an expression may return different results for different users depending\
        \ on their permissions. For example, different users may see different comments\
        \ on the same issue.  \nPermission to access Jira Software is required to\
        \ access Jira Software context variables (`board` and `sprint`) or fields\
        \ (for example, `issue.sprint`)."
      operationId: com.atlassian.jira.rest.v2.expression.JiraExpressionsResource.evaluateJiraExpression_post
      parameters:
      - description: Use [expand](#expansion) to include additional information in
          the response. This parameter accepts `meta.complexity` that returns information
          about the expression complexity. For example, the number of expensive operations
          used by the expression and how close the expression is to reaching the [complexity
          limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions).
          Useful when designing and debugging your expressions.
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              context:
                board: 10100
                customerRequest: 1450
                issue:
                  key: ACJIRA-1470
                issues:
                  jql:
                    maxResults: 100
                    query: project = HSP
                    startAt: 0
                    validation: strict
                project:
                  key: ACJIRA
                serviceDesk: 10023
                sprint: 10001
              expression: '{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link
                => link.linkedIssue.id) }'
            schema:
              $ref: '#/components/schemas/JiraExpressionEvalRequestBean'
        description: The Jira expression and the evaluation context.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"value":"The expression''s result. This value can be any
                JSON, not necessarily a String","meta":{"complexity":{"steps":{"value":1,"limit":10000},"expensiveOperations":{"value":3,"limit":10},"beans":{"value":0,"limit":1000},"primitiveValues":{"value":1,"limit":10000}},"issues":{"jql":{"startAt":0,"maxResults":1000,"count":140,"totalCount":140,"validationWarnings":["There
                is a problem with the JQL query."]}}}}'
              schema:
                $ref: '#/components/schemas/JiraExpressionResult'
          description: Returned if the evaluation results in a value. The result is
            a JSON primitive value, list, or object.
        '400':
          content:
            application/json:
              example: '{"errorMessages":["Evaluation failed: \"issue[''a'' + ''b'']\"
                - Unrecognized property of `issue`: \"ab\" (''a'' + ''b''). Available
                properties of type ''Issue'' are: ''assignee'', ''comments'', ''description'',
                ''id'', ''issueType'', ''key'', ''priority'', ''project'', ''properties'',
                ''reporter'', ''status'', ''summary''"],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: "Returned if:\n\n *  the request is invalid, that is:\n   \
            \ \n     *  invalid data is provided, such as a request including issue\
            \ ID and key.\n     *  the expression is invalid and can not be parsed.\n\
            \ *  evaluation fails at runtime. This may happen for various reasons.\
            \ For example, accessing a property on a null object (such as the expression\
            \ `issue.id` where `issue` is `null`). In this case an error message is\
            \ provided."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              example: '{"errorMessages":["Issue does not exist or you do not have
                permission to see it."],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if any object provided in the request context is not
            found or the user does not have permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
        - read:jira-user
      - {}
      summary: Evaluate Jira expression
      tags:
      - Jira expressions
      x-atlassian-connect-scope: READ
  /rest/api/3/field:
    get:
      deprecated: false
      description: "Returns system and custom issue fields according to the following\
        \ rules:\n\n *  Fields that cannot be added to the issue navigator are always\
        \ returned.\n *  Fields that cannot be placed on an issue screen are always\
        \ returned.\n *  Fields that depend on global Jira settings are only returned\
        \ if the setting is enabled. That is, timetracking fields, subtasks, votes,\
        \ and watches.\n *  For all other fields, this operation only returns the\
        \ fields that the user has permission to view (that is, the field is used\
        \ in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.)\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** None."
      operationId: com.atlassian.jira.rest.v2.issue.FieldResource.getFields_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"id":"description","name":"Description","custom":false,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["description"],"schema":{"type":"string","system":"description"}},{"id":"summary","key":"summary","name":"Summary","custom":false,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["summary"],"schema":{"type":"string","system":"summary"}}]'
              schema:
                items:
                  $ref: '#/components/schemas/FieldDetails'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get fields
      tags:
      - Issue fields
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Creates a custom field.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.FieldResource.createCustomField_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: Custom field for picking groups
              name: New custom field
              searcherKey: com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher
              type: com.atlassian.jira.plugin.system.customfieldtypes:grouppicker
            schema:
              $ref: '#/components/schemas/CustomFieldDefinitionJsonBean'
        description: Definition of the custom field to be created
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}}'
              schema:
                $ref: '#/components/schemas/FieldDetails'
          description: Returned if the custom field is created.
        '400':
          description: "Returned if:\n\n *  the user does not have permission to create\
            \ custom fields.\n *  any of the request object properties have invalid\
            \ or missing values."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Create custom field
      tags:
      - Issue fields
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/field/search:
    get:
      deprecated: false
      description: "Returns a [paginated](#pagination) list of fields for Classic\
        \ Jira projects. The list can include:\n\n *  all fields.\n *  specific fields,\
        \ by defining `id`.\n *  fields that contain a string in the field name or\
        \ description, by defining `query`.\n *  specific fields that contain a string\
        \ in the field name or description, by defining `id` and `query`.\n\nOnly\
        \ custom fields can be queried, `type` must be set to `custom`.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.field.FieldSearchResource.getFieldsPaginated_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: The type of fields to search.
        in: query
        name: type
        schema:
          items:
            enum:
            - custom
            - system
            type: string
          type: array
      - description: The IDs of the custom fields to return or, where`query is specified,
          filter. IDs should be provided in the format customfield_XXXXX.`
        in: query
        name: id
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: String used to perform a case-insensitive partial match with
          field names or descriptions.
        in: query
        name: query
        schema:
          type: string
      - description: "[Order](#ordering) the results by a field:\n\n *  `contextsCount`\
          \ Sorts by the number of contexts related to a field.\n *  `lastUsed` Sorts\
          \ by the date when the value of the field last changed.\n *  `name` Sorts\
          \ by the field name.\n *  `screensCount` Sorts by the number of screens\
          \ related to a field."
        in: query
        name: orderBy
        schema:
          enum:
          - contextsCount
          - -contextsCount
          - +contextsCount
          - lastUsed
          - -lastUsed
          - +lastUsed
          - name
          - -name
          - +name
          - screensCount
          - -screensCount
          - +screensCount
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `key` Returns the key for each field.\n *  `lastUsed`\
          \ Returns the date when the value of the field last changed.\n *  `screensCount`\
          \ Returns the number of screens related to a field.\n *  `contextsCount`\
          \ Returns the number of contexts related to a field.\n *  `isLocked` Returns\
          \ information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":50,"startAt":0,"total":2,"isLast":false,"values":[{"id":"customfield_10000","name":"Approvers","description":"Contains
                users needed for approval. This custom field was created by Jira Service
                Desk.","key":"customfield_10000","isLocked":true,"screensCount":2,"contextsCount":2,"lastUsed":{"type":"TRACKED","value":"2019-09-12T10:10:00.270+0000"}},{"id":"customfield_10001","name":"Change
                reason","description":"Choose the reason for the change request","key":"customfield_10001","isLocked":false,"screensCount":2,"contextsCount":2}]}'
              schema:
                $ref: '#/components/schemas/PageBeanField'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":["Only custom fields can be queried."],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              example: '{"errorMessages":["Only Jira administrators can access fields."],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get fields paginated
      tags:
      - Issue fields
      x-atlassian-connect-scope: NONE
      x-experimental: true
  /rest/api/3/field/{fieldId}/contexts:
    get:
      deprecated: false
      description: 'Returns a [paginated](#pagination) list of the contexts a field
        is used in.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.FieldResource.getContextsForField_get
      parameters:
      - description: The ID of the field to return contexts for.
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 20
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":1,"startAt":0,"total":5,"isLast":false,"values":[{"id":10001,"name":"Default
                Context"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanContext'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - {}
      summary: Get contexts for a field
      tags:
      - Issue fields
      x-atlassian-connect-scope: NONE
      x-experimental: true
  /rest/api/3/field/{fieldId}/screens:
    get:
      deprecated: false
      description: 'Returns a [paginated](#pagination) list of the screens a field
        is used in.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.FieldResource.getScreensForField_get
      parameters:
      - description: The ID of the field to return screens for.
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":1,"startAt":0,"total":5,"isLast":false,"values":[{"id":10001,"name":"Default
                Screen"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanScreen'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - {}
      summary: Get screens for a field
      tags:
      - Screens
      x-atlassian-connect-scope: NONE
  /rest/api/3/field/{fieldKey}/option:
    get:
      deprecated: false
      description: 'Returns all the options of a select list issue field. A select
        list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/)
        that enables a user to select a value from a list of options.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.getAllIssueFieldOptions_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=0&maxResults=1","nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option?startAt=1&maxResults=1","maxResults":1,"startAt":0,"total":10,"isLast":false,"values":[{"id":1,"value":"Team
                1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanIssueFieldOption'
          description: Returned if the request is successful.
        '400':
          description: Returned if the field is not found or does not support options.
        '403':
          description: Returned if the request is not authenticated as a Jira administrator
            or the app that provided the field.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get all issue field options
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
    post:
      deprecated: false
      description: 'Creates an option for a select list issue field.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.createIssueFieldOption_post
      parameters:
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              config:
                attributes: []
                scope:
                  global: {}
                  projects: []
                  projects2:
                  - attributes:
                    - notSelectable
                    id: 1001
                  - attributes:
                    - notSelectable
                    id: 1002
              properties:
                description: The team's description
                founded: '2016-06-06T00:00:00.000Z'
                leader:
                  email: lname@example.com
                  name: Leader Name
                members: 42
              value: Team 1
            schema:
              $ref: '#/components/schemas/IssueFieldOptionCreateBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader
                Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}'
              schema:
                $ref: '#/components/schemas/IssueFieldOption'
          description: Returned if the request is successful.
        '400':
          description: Returned if the option is invalid.
        '403':
          description: Returned if the request is not authenticated as a Jira administrator
            or the app that provided the field.
        '404':
          description: Returned if the field is not found or does not support options.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Create issue field option
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
  /rest/api/3/field/{fieldKey}/option/suggestions/edit:
    get:
      deprecated: false
      description: 'Returns options for a select list issue field that can be viewed
        and selected by the user.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.getSelectableIssueFieldOptions_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: Filters the results to options that are only available in the
          specified project.
        in: query
        name: projectId
        schema:
          format: int64
          type: integer
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","maxResults":1,"startAt":0,"total":10,"isLast":false,"values":[{"id":1,"value":"Team
                1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanIssueFieldOption'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the field is not found or does not support options.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get selectable issue field options
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
  /rest/api/3/field/{fieldKey}/option/suggestions/search:
    get:
      deprecated: false
      description: 'Returns options for a select list issue field that can be viewed
        by the user.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.getVisibleIssueFieldOptions_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: Filters the results to options that are only available in the
          specified project.
        in: query
        name: projectId
        schema:
          format: int64
          type: integer
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=0&maxResults=1","nextPage":"https://your-domain.atlassian.net/rest/api/3/field/fieldKey/option/suggestions?startAt=1&maxResults=1","maxResults":1,"startAt":0,"total":10,"isLast":false,"values":[{"id":1,"value":"Team
                1","properties":{"leader":{"name":"Leader Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanIssueFieldOption'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the field is not found or does not support options.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get visible issue field options
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
  /rest/api/3/field/{fieldKey}/option/{optionId}:
    delete:
      deprecated: false
      description: 'Deletes an option from a select list issue field.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.deleteIssueFieldOption_delete
      parameters:
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      - description: The ID of the option to be deleted.
        in: path
        name: optionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the field option is deleted.
        '403':
          description: Returned if the request is not authenticated as a Jira administrator
            or the app that provided the field.
        '404':
          description: Returned if the field or option is not found.
        '409':
          description: Returned if the option is selected for the field in any issue.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Delete issue field option
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
    get:
      deprecated: false
      description: 'Returns an option from a select list issue field.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.getIssueFieldOption_get
      parameters:
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      - description: The ID of the option to be returned.
        in: path
        name: optionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader
                Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}'
              schema:
                $ref: '#/components/schemas/IssueFieldOption'
          description: Returned if the requested option is returned.
        '400':
          description: Returned if the field is not found or does not support options.
        '403':
          description: Returned if the request is not authenticated as a Jira administrator
            or the app that provided the field.
        '404':
          description: Returned if the option is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get issue field option
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
    put:
      deprecated: false
      description: 'Updates or creates an option for a select list issue field. This
        operation requires that the option ID is provided when creating an option,
        therefore, the option ID needs to be specified as a path and body parameter.
        The option ID provided in the path and body must be identical.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.updateIssueFieldOption_put
      parameters:
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      - description: The ID of the option to be updated.
        in: path
        name: optionId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              config:
                attributes: []
                scope:
                  global: {}
                  projects: []
                  projects2:
                  - attributes:
                    - notSelectable
                    id: 1001
                  - attributes:
                    - notSelectable
                    id: 1002
              id: 1
              properties:
                description: The team's description
                founded: '2016-06-06T00:00:00.000Z'
                leader:
                  email: lname@example.com
                  name: Leader Name
                members: 42
              value: Team 1
            schema:
              $ref: '#/components/schemas/IssueFieldOption'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":1,"value":"Team 1","properties":{"leader":{"name":"Leader
                Name","email":"lname@example.com"},"members":42,"description":"The
                team''s description","founded":"2016-06-06"},"config":{"scope":{"projects":[],"projects2":[{"id":1001,"attributes":["notSelectable"]},{"id":1002,"attributes":["notSelectable"]}],"global":{}},"attributes":[]}}'
              schema:
                $ref: '#/components/schemas/IssueFieldOption'
          description: Returned if the option is updated or created.
        '400':
          description: Returned if the option is invalid, or the *ID* in the request
            object does not match the *optionId* parameter.
        '403':
          description: Returned if the request is not authenticated as a Jira administrator
            or the app that provided the field.
        '404':
          description: Returned if field is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Update issue field option
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
  /rest/api/3/field/{fieldKey}/option/{optionId}/issue:
    delete:
      deprecated: false
      description: 'Deselects an issue-field select-list option from all issues where
        it is selected. A different option can be selected to replace the deselected
        option. The update can also be limited to a smaller set of issues by using
        a JQL query.


        This is an [asynchronous operation](#async). The response object contains
        a link to the long-running task.


        Note that this operation **only works for issue field select list options
        added by Connect apps**, it cannot be used with issue field select list options
        created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options)
        resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        Jira permissions are not required for the app providing the field.'
      operationId: com.atlassian.jira.rest.v2.issue.field.IssueFieldOptionResource.replaceIssueFieldOption_delete
      parameters:
      - description: The ID of the option that will replace the currently selected
          option.
        in: query
        name: replaceWith
        schema:
          format: int64
          type: integer
      - description: A JQL query that specifies the issues to be updated. For example,
          *project=10000*.
        in: query
        name: jql
        schema:
          type: string
      - description: "The field key is specified in the following format: **$(app-key)\\\
          _\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*.\
          \ To determine the `fieldKey` value, do one of the following:\n\n *  open\
          \ the app's plugin descriptor, then **app-key** is the key at the top and\
          \ **field-key** is the key in the `jiraIssueFields` module. **app-key**\
          \ can also be found in the app listing in the Atlassian Universal Plugin\
          \ Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field\
          \ details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"\
          `"
        in: path
        name: fieldKey
        required: true
        schema:
          type: string
      - description: The ID of the option to be deselected.
        in: path
        name: optionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '303':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Remove
                option 1 from issues matched by ''*'', and replace with option 3","status":"COMPLETE","result":{"modifiedIssues":[10001,10010],"unmodifiedIssues":[10005],"errors":{"errors":{},"errorMessages":["Option
                2 cannot be set on issue MKY-5 as it is not in the correct scope"],"httpStatusCode":{"present":true}}},"elapsedRuntime":42}'
              schema:
                $ref: '#/components/schemas/TaskProgressBeanRemoveOptionFromIssuesResult'
          description: Returned if the long-running task to deselect the option is
            started.
        '400':
          description: Returned if the JQL query is invalid.
        '404':
          description: Returned if the field is not found or does not support options,
            or the options to be replaced are not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Replace issue field option
      tags:
      - Issue custom field options (apps)
      x-atlassian-connect-scope: NONE
  /rest/api/3/fieldconfiguration:
    get:
      deprecated: false
      description: 'Returns a paginated list of all field configurations.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.field.FieldConfigurationResource.getAllFieldConfigurations_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: If *true* returns the default field configuration only.
        in: query
        name: isDefault
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":50,"startAt":0,"total":2,"isLast":true,"values":[{"id":10000,"name":"Default
                Field Configuration","description":"The default field configuration
                description","isDefault":true},{"id":10001,"name":"My Field Configuration","description":"My
                field configuration description"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanFieldConfiguration'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get all field configurations
      tags:
      - Issue field configurations
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/fieldconfiguration/{id}/fields:
    get:
      deprecated: false
      description: 'Returns a paginated list of all fields for a configuration.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.field.FieldConfigurationResource.getFieldConfigurationItems_get
      parameters:
      - description: The ID of the field configuration.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":50,"startAt":0,"total":2,"isLast":true,"values":[{"id":"environment","description":"For
                example operating system, software platform and/or hardware specifications
                (include as appropriate for the issue).","isHidden":false,"isRequired":false},{"id":"description","isHidden":false,"isRequired":false}]}'
              schema:
                $ref: '#/components/schemas/PageBeanFieldConfigurationItem'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the field configuration is not found.
      security:
      - basicAuth: []
      summary: Get field configuration items
      tags:
      - Issue field configurations
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/fieldconfigurationscheme/mapping:
    get:
      deprecated: false
      description: 'Returns a paginated list of field configuration issue type items.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.field.FieldConfigurationSchemeResource.getFieldConfigurationSchemeMappings_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: 'The list of field configuration scheme IDs. To include multiple
          field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.'
        in: query
        name: fieldConfigurationSchemeId
        required: true
        schema:
          items:
            example: 10020
            format: int64
            type: integer
          maxItems: 50
          minItems: 1
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":100,"startAt":0,"total":5,"isLast":true,"values":[{"fieldConfigurationSchemeId":"10020","issueTypeId":"10000","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10020","issueTypeId":"10001","fieldConfigurationId":"10010"},{"fieldConfigurationSchemeId":"10021","issueTypeId":"10002","fieldConfigurationId":"10000"},{"fieldConfigurationSchemeId":"10022","issueTypeId":"default","fieldConfigurationId":"10011"},{"fieldConfigurationSchemeId":"10023","issueTypeId":"default","fieldConfigurationId":"10000"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanFieldConfigurationIssueTypeItem'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if no field configuration schemes are found.
      security:
      - basicAuth: []
      summary: Get field configuration issue type items
      tags:
      - Issue field configurations
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/filter:
    get:
      deprecated: true
      description: "Returns all filters. Deprecated, use [ Search for filters](#api-rest-api-3-filter-search-get)\
        \ that supports search and pagination.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:** None, however, only the following\
        \ filters are returned:\n\n *  filters owned by the user.\n *  filters shared\
        \ with a group that the user is a member of.\n *  filters shared with a private\
        \ project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getFilters_get
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                items:
                  $ref: '#/components/schemas/Filter'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get filters
      tags:
      - Filters
      x-atlassian-connect-scope: READ
      x-changes:
      - announced: '2018-10-19T00:00:00.000Z'
        details: https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-removal-of-get-filters-and-get-all-projects/
        effective: '2019-04-19T00:00:00.000Z'
        type: removed
    post:
      deprecated: false
      description: 'Creates a filter. The filter is shared according to the [default
        share scope](#api-rest-api-3-filter-post). The filter is not selected as a
        favorite.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.createFilter_post
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: Lists all open bugs
              jql: type = Bug and resolution is empty
              name: All Open Bugs
            schema:
              $ref: '#/components/schemas/Filter'
        description: The filter to create.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                $ref: '#/components/schemas/Filter'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request object is invalid. For example, the
            `name` is not unique or the project ID is not specified for a project
            role share permission.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Create filter
      tags:
      - Filters
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/defaultShareScope:
    get:
      deprecated: false
      description: 'Returns the default sharing settings for new filters and dashboards
        for a user.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getDefaultShareScope_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"scope":"GLOBAL"}'
              schema:
                $ref: '#/components/schemas/DefaultShareScope'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get default share scope
      tags:
      - Filter sharing
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Sets the default sharing for new filters and dashboards for a
        user.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.setDefaultShareScope_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              scope: GLOBAL
            schema:
              $ref: '#/components/schemas/DefaultShareScope'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"scope":"GLOBAL"}'
              schema:
                $ref: '#/components/schemas/DefaultShareScope'
          description: Returned if the request is successful.
        '400':
          description: Returned if an invalid scope is set.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set default share scope
      tags:
      - Filter sharing
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/favourite:
    get:
      deprecated: false
      description: "Returns the visible favorite filters of the user.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\
        \ A favorite filter is only visible to the user where the filter is:\n\n *\
        \  owned by the user.\n *  shared with a group that the user is a member of.\n\
        \ *  shared with a private project that the user has *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for.\n *  shared\
        \ with a public project.\n *  shared with the public.\n\nFor example, if the\
        \ user favorites a public filter that is subsequently made private that filter\
        \ is not returned by this operation."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getFavouriteFilters_get
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}},{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","id":"10010","name":"My
                issues","description":"Issues assigned to me","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"assignee = currentUser() and resolution
                is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","favourite":true,"favouritedCount":0,"sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}}],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}]'
              schema:
                items:
                  $ref: '#/components/schemas/Filter'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get favorite filters
      tags:
      - Filters
      x-atlassian-connect-scope: READ
  /rest/api/3/filter/my:
    get:
      deprecated: false
      description: "Returns the filters owned by the user. If `includeFavourites`\
        \ is `true`, the user's visible favorite filters are also returned.\n\n**[Permissions](#permissions)\
        \ required:** Permission to access Jira, however, a favorite filters is only\
        \ visible to the user where the filter is:\n\n *  owned by the user.\n * \
        \ shared with a group that the user is a member of.\n *  shared with a private\
        \ project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  shared with a public project.\n *  shared with the public.\n\n\
        For example, if the user favorites a public filter that is subsequently made\
        \ private that filter is not returned by this operation."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getMyFilters_get
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      - description: Include the user's favorite filters in the response.
        in: query
        name: includeFavourites
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}},{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","id":"10010","name":"My
                issues","description":"Issues assigned to me","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"assignee = currentUser() and resolution
                is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","favourite":true,"favouritedCount":0,"sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}}],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}]'
              schema:
                items:
                  $ref: '#/components/schemas/Filter'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get my filters
      tags:
      - Filters
      x-atlassian-connect-scope: READ
  /rest/api/3/filter/search:
    get:
      deprecated: false
      description: "Searches for filters. This operation is similar to [Get filters](#api-rest-api-3-filter-get)\
        \ except that the results can be refined to include filters that have specific\
        \ attributes. For example, filters with a particular name. When multiple attributes\
        \ are specified only filters matching all attributes are returned.\n\nThis\
        \ operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** None, however, only the following filters that match the query\
        \ parameters are returned:\n\n *  filters owned by the user.\n *  filters\
        \ shared with a group that the user is a member of.\n *  filters shared with\
        \ a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getFiltersPaginated_get
      parameters:
      - description: String used to perform a case-insensitive partial match with
          `name`.
        in: query
        name: filterName
        schema:
          type: string
      - description: User account ID used to return filters with the matching `owner.accountId`.
          This parameter cannot be used with `owner`.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: This parameter is deprecated because of privacy changes. Use
          `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details. User name used to return filters with the matching `owner.name`.
          This parameter cannot be used with `accountId`.
        in: query
        name: owner
        schema:
          type: string
      - description: Group name used to returns filters that are shared with a group
          that matches `sharePermissions.group.groupname`.
        in: query
        name: groupname
        schema:
          type: string
      - description: Project ID used to returns filters that are shared with a project
          that matches `sharePermissions.project.id`.
        in: query
        name: projectId
        schema:
          format: int64
          type: integer
      - description: "[Order](#ordering) the results by a field:\n\n *  `description`\
          \ Sorts by filter description. Note that this sorting works independently\
          \ of whether the expand to display the description field is in use.\n *\
          \  `favourite_count` Sorts by the count of how many users have this filter\
          \ as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked\
          \ as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter\
          \ name.\n *  `owner` Sorts by the ID of the filter owner."
        in: query
        name: orderBy
        schema:
          default: name
          enum:
          - description
          - -description
          - +description
          - favorite_count
          - -favorite_count
          - +favorite_count
          - id
          - -id
          - +id
          - is_favorite
          - -is_favorite
          - +is_favorite
          - name
          - -name
          - +name
          - owner
          - -owner
          - +owner
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `description` Returns the description of\
          \ the filter.\n *  `favourite` Returns an indicator of whether the user\
          \ has set the filter as a favorite.\n *  `favouritedCount` Returns a count\
          \ of how many users have set this filter as a favorite.\n *  `jql` Returns\
          \ the JQL query that the filter uses.\n *  `owner` Returns the owner of\
          \ the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL\
          \ query.\n *  `sharePermissions` Returns the share permissions defined for\
          \ the filter.\n *  `subscriptions` Returns the users that are subscribed\
          \ to the filter.\n *  `viewUrl` Returns a URL to view the filter."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"b","maxResults":100,"startAt":0,"total":2,"isLast":true,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":[]},{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10010","id":"10010","name":"My
                issues","description":"Issues assigned to me","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"assignee = currentUser() and resolution
                is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10010","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=assignee+in+%28currentUser%28%29%29+and+resolution+is+empty","favourite":true,"favouritedCount":0,"sharePermissions":[{"id":10000,"type":"global"},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}}],"subscriptions":[{"id":1,"user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}}]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanFoundFilter'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: "Returned if:\n\n *  `owner` and `accountId` are provided.\n\
            \ *  `expand` includes an invalid value.\n *  `orderBy` is invalid."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Search for filters
      tags:
      - Filters
      x-atlassian-connect-scope: READ
  /rest/api/3/filter/{id}:
    delete:
      deprecated: false
      description: 'Delete a filter.


        **[Permissions](#permissions) required:** Permission to access Jira, however
        filters can only be deleted by the creator of the filter or a user with *Administer
        Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.deleteFilter_delete
      parameters:
      - description: The ID of the filter to delete.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the filter is not found.
        '401':
          description: Returned if the user does not have permission to delete the
            filter.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete filter
      tags:
      - Filters
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns a filter.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:** None, however, the filter is only\
        \ returned where it is:\n\n *  owned by the user.\n *  shared with a group\
        \ that the user is a member of.\n *  shared with a private project that the\
        \ user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  shared with a public project.\n *  shared with the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getFilter_get
      parameters:
      - description: The ID of the filter to return.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                $ref: '#/components/schemas/Filter'
          description: Returned if the request is successful.
        '400':
          description: Returned if the filter is not found or the user does not have
            permission to view it.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get filter
      tags:
      - Filters
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates a filter. Use this operation to update a filter''s name,
        description, JQL, or sharing.


        **[Permissions](#permissions) required:** Permission to access Jira, however
        the user must own the filter.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.updateFilter_put
      parameters:
      - description: The ID of the filter to update.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: Lists all open bugs
              jql: type = Bug and resolution is empty
              name: All Open Bugs
            schema:
              $ref: '#/components/schemas/Filter'
        description: The filter to update.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                $ref: '#/components/schemas/Filter'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request object is invalid. For example, the
            `name` is not unique or the project ID is not specified for a project
            role share permission.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Update filter
      tags:
      - Filters
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/{id}/columns:
    delete:
      deprecated: false
      description: "Reset the user's column configuration for the filter to the default.\n\
        \n**[Permissions](#permissions) required:** Permission to access Jira, however,\
        \ columns are only reset for:\n\n *  filters owned by the user.\n *  filters\
        \ shared with a group that the user is a member of.\n *  filters shared with\
        \ a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.resetColumns_delete
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not have permission to view the filter."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Reset columns
      tags:
      - Filters
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the columns configured for a filter. The column configuration\
        \ is used when the filter's results are viewed in *List View* with the *Columns*\
        \ set to *Filter*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** None, however, column details are only returned for:\n\n * \
        \ filters owned by the user.\n *  filters shared with a group that the user\
        \ is a member of.\n *  filters shared with a private project that the user\
        \ has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getColumns_get
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ColumnItem'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if the user does not have permission to view the filter.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if a column configuration is not set for the filter.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get columns
      tags:
      - Filters
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Sets the columns for a filter. Only navigable fields can be set\
        \ as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list\
        \ fields in Jira. A navigable field has `navigable` set to `true`.\n\nThe\
        \ parameters for this resource are expressed as HTML form data. For example,\
        \ in curl:\n\n`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`\n\
        \n**[Permissions](#permissions) required:** Permission to access Jira, however,\
        \ columns are only set for:\n\n *  filters owned by the user.\n *  filters\
        \ shared with a group that the user is a member of.\n *  filters shared with\
        \ a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.setColumns_put
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
          multipart/form-data:
            schema:
              items:
                type: string
              type: array
        description: The IDs of the fields to set as columns. In the form data, specify
          each field as `columns=id`, where `id` is the *id* of a field (as seen in
          the response for [Get fields](#api-rest-api-<ver>-field-get)). For example,
          `columns=summary`.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  a non-navigable field is set as a column.\n\
            \ *  the user does not have permission to view the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set columns
      tags:
      - Filters
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/{id}/favourite:
    delete:
      deprecated: false
      description: 'Removes a filter as a favorite for the user. Note that this operation
        only removes filters visible to the user from the user''s favorites list.
        For example, if the user favorites a public filter that is subsequently made
        private (and is therefore no longer visible on their favorites list) they
        cannot remove it from their favorites list.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.deleteFavouriteForFilter_delete
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                $ref: '#/components/schemas/Filter'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not have permission to view the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Remove filter as favorite
      tags:
      - Filters
      x-atlassian-connect-scope: DELETE
    put:
      deprecated: false
      description: "Add a filter as a favorite for the user.\n\n**[Permissions](#permissions)\
        \ required:** Permission to access Jira, however, the user can only favorite:\n\
        \n *  filters owned by the user.\n *  filters shared with a group that the\
        \ user is a member of.\n *  filters shared with a private project that the\
        \ user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.setFavouriteForFilter_put
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use [expand](#expansion) to include additional information about\
          \ filter in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `sharedUsers` Returns the users that the\
          \ filter is shared with. This includes users that can browse projects that\
          \ the filter is shared with. If you don't specify `sharedUsers`, then the\
          \ `sharedUsers` object is returned but it doesn't list any users. The list\
          \ of users returned is limited to 1000, to access additional users append\
          \ `[start-index:end-index]` to the expand request. For example, to access\
          \ the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions`\
          \ Returns the users that are subscribed to the filter. If you don't specify\
          \ `subscriptions`, the `subscriptions` object is returned but it doesn't\
          \ list any subscriptions. The list of subscriptions returned is limited\
          \ to 1000, to access additional subscriptions append `[start-index:end-index]`\
          \ to the expand request. For example, to access the next 1000 subscriptions,\
          \ use `?expand=subscriptions[1001:2000]`."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/filter/10000","id":"10000","name":"All
                Open Bugs","description":"Lists all open bugs","owner":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"jql":"type = Bug and resolution is empty","viewUrl":"https://your-domain.atlassian.net/issues/?filter=10000","searchUrl":"https://your-domain.atlassian.net/rest/api/3/search?jql=type%20%3D%20Bug%20and%20resolutino%20is%20empty","favourite":true,"favouritedCount":0,"sharePermissions":[],"subscriptions":{"size":0,"items":[],"max-results":0,"start-index":0,"end-index":0}}'
              schema:
                $ref: '#/components/schemas/Filter'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not have permission to favorite the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add filter as favorite
      tags:
      - Filters
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/{id}/permission:
    get:
      deprecated: false
      description: "Returns the share permissions for a filter. A filter can be shared\
        \ with groups, projects, all logged-in users, or the public. Sharing with\
        \ all logged-in users or the public is known as a global share permission.\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** None, however, share permissions are only returned for:\n\n\
        \ *  filters owned by the user.\n *  filters shared with a group that the\
        \ user is a member of.\n *  filters shared with a private project that the\
        \ user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getSharePermissions_get
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"id":10000,"type":"global"},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","id":"10002","key":"MKY","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"},"deleted":true,"retentionTillDate":"2020-05-03T06:50:29.902+0000","deletedDate":"2020-03-04T06:50:29.903+0000","deletedBy":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false}},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}},{"id":10010,"type":"group","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"}}]'
              schema:
                items:
                  $ref: '#/components/schemas/SharePermission'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not have permission to view the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get share permissions
      tags:
      - Filter sharing
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Add a share permissions to a filter. If you add a global share
        permission (one for all logged-in users or the public) it will overwrite all
        share permissions for the filter.


        Be aware that this operation uses different objects for updating share permissions
        compared to [Update filter](#api-rest-api-3-filter-id-put).


        **[Permissions](#permissions) required:** *Share dashboards and filters* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own
        the filter.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.addSharePermission_post
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              groupname: jira-administrators
              type: group
            schema:
              $ref: '#/components/schemas/SharePermissionInputBean'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '[{"id":10000,"type":"global"},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}},{"id":10010,"type":"project","project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY","id":"10002","key":"MKY","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10002","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10002","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10002","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10002"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"},"deleted":true,"retentionTillDate":"2020-05-03T06:50:29.902+0000","deletedDate":"2020-03-04T06:50:29.903+0000","deletedBy":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false}},"role":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}},{"id":10010,"type":"group","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"}}]'
              schema:
                items:
                  $ref: '#/components/schemas/SharePermission'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the request object is invalid. For example,\
            \ it contains an invalid type, the ID does not match the type, or the\
            \ project or group is not found.\n *  the user does not own the filter.\n\
            \ *  the user does not have the required permissions."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not have permission to view the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add share permission
      tags:
      - Filter sharing
      x-atlassian-connect-scope: WRITE
  /rest/api/3/filter/{id}/permission/{permissionId}:
    delete:
      deprecated: false
      description: 'Deletes a share permission from a filter.


        **[Permissions](#permissions) required:** Permission to access Jira and the
        user must own the filter.'
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.deleteSharePermission_delete
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the share permission.
        in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the filter is not found.\n *  the user\
            \ does not own the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete share permission
      tags:
      - Filter sharing
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns a share permission for a filter. A filter can be shared\
        \ with groups, projects, all logged-in users, or the public. Sharing with\
        \ all logged-in users or the public is known as a global share permission.\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** None, however, a share permission is only returned for:\n\n\
        \ *  filters owned by the user.\n *  filters shared with a group that the\
        \ user is a member of.\n *  filters shared with a private project that the\
        \ user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for.\n *  filters shared with a public project.\n *  filters shared with\
        \ the public."
      operationId: com.atlassian.jira.rest.v2.search.FilterResource.getSharePermission_get
      parameters:
      - description: The ID of the filter.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the share permission.
        in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"type":"global"}'
              schema:
                $ref: '#/components/schemas/SharePermission'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the filter is not found.\n *  the permission\
            \ is not found.\n *  the user does not have permission to view the filter."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get share permission
      tags:
      - Filter sharing
      x-atlassian-connect-scope: READ
  /rest/api/3/group:
    delete:
      deprecated: false
      description: 'Deletes a group.


        **[Permissions](#permissions) required:** Site administration (that is, member
        of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.removeGroup_delete
      parameters:
      - description: The name of the group.
        in: query
        name: groupname
        required: true
        schema:
          type: string
      - description: The group to transfer restrictions to. Only comments and worklogs
          are transferred. If restrictions are not transferred, comments and worklogs
          are inaccessible after the deletion.
        in: query
        name: swapGroup
        schema:
          type: string
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          description: Returned if the group name is not specified.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing from the request.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the group is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Remove group
      tags:
      - Groups
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: true
      description: 'This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).


        Returns all users in a group.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.getGroup_get
      parameters:
      - description: The name of the group.
        in: query
        name: groupname
        required: true
        schema:
          type: string
      - description: List of fields to expand.
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Returned if the request is successful.
        '400':
          description: Returned if the group name is not specified.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the calling user does not have the Administer Jira
            global permission.
        '404':
          description: Returned if the group is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Get group
      tags:
      - Groups
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Creates a group.


        **[Permissions](#permissions) required:** Site administration (that is, member
        of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.createGroup_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              name: power-users
            schema:
              $ref: '#/components/schemas/AddGroupBean'
        description: The name of the group.
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"name":"power-users","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=power-users","users":{"size":1,"items":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}],"max-results":50,"start-index":0,"end-index":0},"expand":"users"}'
              schema:
                $ref: '#/components/schemas/Group'
          description: Returned if the request is successful.
        '400':
          description: Returned if group name is not specified or the group name is
            in use.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Create group
      tags:
      - Groups
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/group/member:
    get:
      deprecated: false
      description: 'Returns all users in a group.


        Note that users are ordered by username, however the username is not returned
        in the results due to privacy reasons.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.getUsersFromGroup_get
      parameters:
      - description: The name of the group.
        in: query
        name: groupname
        required: true
        schema:
          type: string
      - description: Include inactive users.
        in: query
        name: includeInactiveUsers
        schema:
          default: false
          type: boolean
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/group/member?groupname=jira-administrators&includeInactiveUsers=false&startAt=2&maxResults=2","nextPage":"https://your-domain.atlassian.net/rest/api/3/group/member?groupname=jira-administrators&includeInactiveUsers=false&startAt=4&maxResults=2","maxResults":2,"startAt":3,"total":5,"isLast":false,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","name":"","key":"","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{},"displayName":"Mia","active":true,"timeZone":"Australia/Sydney","accountType":"atlassian"},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a0effa615349cb016cd8","name":"","key":"","accountId":"5b10a0effa615349cb016cd8","emailAddress":"will@example.com","avatarUrls":{},"displayName":"Will","active":false,"timeZone":"Australia/Sydney","accountType":"atlassian"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanUserDetails'
          description: Returned if the request is successful.
        '400':
          description: Returned if the group name is not specified.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the calling user does not have the Administer Jira
            global permission.
        '404':
          description: Returned if the group is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get users from group
      tags:
      - Groups
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/group/user:
    delete:
      deprecated: false
      description: 'Removes a user from a group.


        **[Permissions](#permissions) required:** Site administration (that is, member
        of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.removeUserFromGroup_delete
      parameters:
      - description: The name of the group.
        in: query
        name: groupname
        required: true
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        required: true
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `groupName` is missing.\n *  `accountId`\
            \ is missing."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing from the request.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the group or user are not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Remove user from group
      tags:
      - Groups
      x-atlassian-connect-scope: INACCESSIBLE
    post:
      deprecated: false
      description: 'Adds a user to a group.


        **[Permissions](#permissions) required:** Site administration (that is, member
        of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).'
      operationId: com.atlassian.jira.rest.v2.issue.GroupResource.addUserToGroup_post
      parameters:
      - description: The name of the group (case sensitive).
        in: query
        name: groupname
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              accountId: 5b10ac8d82e05b22cc7d4ef5
            schema:
              $ref: '#/components/schemas/UpdateUserToGroupBean'
        description: The user to add to the group.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `groupname` is not provided.\n *  `accountId`\
            \ is missing."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing from the request.
        '403':
          description: Returned if the calling user does not have the necessary permission.
        '404':
          description: Returned if the group or user are not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Add user to group
      tags:
      - Groups
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/groups/picker:
    get:
      deprecated: false
      description: 'Returns a list of groups whose names contain a query string. A
        list of group names can be provided to exclude groups from the results.


        The primary use case for this resource is to populate a group picker suggestions
        list. To this end, the returned object includes the `html` field where the
        matched query term is highlighted in the group name with the HTML strong tag.
        Also, the groups list is wrapped in a response object that contains a header
        for use in the picker, specifically *Showing X of Y matching groups*.


        The list returns with the groups sorted. If no groups match the list criteria,
        an empty list is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        Anonymous calls and calls by users without the required permission return
        an empty list.'
      operationId: com.atlassian.jira.rest.v2.issue.GroupPickerResource.findGroups_get
      parameters:
      - description: This parameter is deprecated, setting it does not affect the
          results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).
        in: query
        name: accountId
        schema:
          type: string
      - description: The string to find in group names.
        in: query
        name: query
        schema:
          example: query
          type: string
      - description: A group to exclude from the result. To exclude multiple groups,
          provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`.
        in: query
        name: exclude
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of groups to return. The maximum number of
          groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: userName
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"header":"Showing 20 of 25 matching groups","total":25,"groups":[{"name":"jdog-developers","html":"<b>j</b>dog-developers","groupId":"276f955c-63d7-42c8-9520-92d01dca0625"},{"name":"juvenal-bot","html":"<b>j</b>uvenal-bot","groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487"}]}'
              schema:
                $ref: '#/components/schemas/FoundGroups'
          description: Returned if the request is successful.
      security:
      - basicAuth: []
      - {}
      summary: Find groups
      tags:
      - Groups
      x-atlassian-connect-scope: READ
  /rest/api/3/groupuserpicker:
    get:
      deprecated: false
      description: "Returns a list of users and groups matching a string. The string\
        \ is used:\n\n *  for users, to find a case-insensitive match with display\
        \ name and e-mail address. Note that if a user has hidden their email address\
        \ in their user profile, partial matches of the email address will not find\
        \ the user. An exact match is required.\n *  for groups, to find a case-sensitive\
        \ match with group name.\n\nFor example, if the string *tin* is used, records\
        \ with the display name *Tina*, email address *sarah@tinplatetraining.com*,\
        \ and the group *accounting* would be returned.\n\nOptionally, the search\
        \ can be refined to:\n\n *  the projects and issue types associated with a\
        \ custom field, such as a user picker. The search can then be further refined\
        \ to return only users and groups that have permission to view specific:\n\
        \    \n     *  projects.\n     *  issue types.\n    \n    If multiple projects\
        \ or issue types are specified, they must be a subset of those enabled for\
        \ the custom field or no results are returned. For example, if a field is\
        \ enabled for projects A, B, and C then the search could be limited to projects\
        \ B and C. However, if the search is limited to projects B and D, nothing\
        \ is returned.\n *  not return Connect app users and groups.\n *  return groups\
        \ that have a case-insensitive match with the query.\n\nThe primary use case\
        \ for this resource is to populate a picker field suggestion list with users\
        \ or groups. To this end, the returned object includes an `html` field for\
        \ each list. This field highlights the matched query term in the item name\
        \ with the HTML strong tag. Also, each list is wrapped in a response object\
        \ that contains a header for use in a picker, specifically *Showing X of Y\
        \ matching groups*.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.GroupAndUserPickerResource.findUsersAndGroups_get
      parameters:
      - description: The search string.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: The maximum number of items to return in each list.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: Whether the user avatar should be returned. If an invalid value
          is provided, the default value is used.
        in: query
        name: showAvatar
        schema:
          default: false
          type: boolean
      - description: The custom field ID of the field this request is for.
        in: query
        name: fieldId
        schema:
          type: string
      - description: The ID of a project that returned users and groups must have
          permission to view. To include multiple projects, provide an ampersand-separated
          list. For example, `projectId=10000&projectId=10001`. This parameter is
          only used when `fieldId` is present.
        in: query
        name: projectId
        schema:
          items:
            type: string
          type: array
      - description: The ID of an issue type that returned users and groups must have
          permission to view. To include multiple issue types, provide an ampersand-separated
          list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values,
          such as `-1` (all standard issue types) and `-2` (all subtask issue types),
          are supported. This parameter is only used when `fieldId` is present.
        in: query
        name: issueTypeId
        schema:
          items:
            type: string
          type: array
      - description: The size of the avatar to return. If an invalid value is provided,
          the default value is used.
        in: query
        name: avatarSize
        schema:
          default: xsmall
          enum:
          - xsmall
          - xsmall@2x
          - xsmall@3x
          - small
          - small@2x
          - small@3x
          - medium
          - medium@2x
          - medium@3x
          - large
          - large@2x
          - large@3x
          - xlarge
          - xlarge@2x
          - xlarge@3x
          - xxlarge
          - xxlarge@2x
          - xxlarge@3x
          - xxxlarge
          - xxxlarge@2x
          - xxxlarge@3x
          type: string
      - description: Whether the search for groups should be case insensitive.
        in: query
        name: caseInsensitive
        schema:
          default: false
          type: boolean
      - description: Whether Connect app users and groups should be excluded from
          the search results. If an invalid value is provided, the default value is
          used.
        in: query
        name: excludeConnectAddons
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"users":{"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","name":"mia","key":"mia","html":"<strong>Mi</strong>a
                Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","displayName":"Mia
                Krystof","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16"}],"total":25,"header":"Showing
                20 of 25 matching groups"},"groups":{"header":"Showing 20 of 25 matching
                groups","total":25,"groups":[{"name":"jdog-developers","html":"<b>j</b>dog-developers","groupId":"276f955c-63d7-42c8-9520-92d01dca0625"},{"name":"juvenal-bot","html":"<b>j</b>uvenal-bot","groupId":"6e87dc72-4f1f-421f-9382-2fee8b652487"}]}}'
              schema:
                $ref: '#/components/schemas/FoundUsersAndGroups'
          description: Returned if the request is successful.
        '400':
          description: Returned if the query parameter is not provided.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Find users and groups
      tags:
      - Group and user picker
      x-atlassian-connect-scope: READ
  /rest/api/3/issue:
    post:
      deprecated: false
      description: "Creates an issue or, where the option to create subtasks is enabled\
        \ in Jira, a subtask. A transition may be applied, to move the issue or subtask\
        \ to a workflow step other than the default start step, and issue properties\
        \ set.\n\nThe content of the issue or subtask is defined using `update` and\
        \ `fields`. The fields that can be set in the issue or subtask are determined\
        \ using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get).\
        \ These are the same fields that appear on the issue's create screen. Note\
        \ that the `description`, `environment`, and any `textarea` type custom fields\
        \ (multi-line text fields) take Atlassian Document Format content. Single\
        \ line custom fields (`textfield`) accept a string and don't handle Atlassian\
        \ Document Format content.\n\nCreating a subtask differs from creating an\
        \ issue as follows:\n\n *  `issueType` must be set to a subtask issue type\
        \ (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get)\
        \ to find subtask issue types).\n *  `parent` must contain the ID or key of\
        \ the parent issue.\n\nIn a next-gen project any issue may be made a child\
        \ providing that the parent and child are members of the same project. In\
        \ a classic project the parent field is only valid for subtasks.\n\n**[Permissions](#permissions)\
        \ required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project in which the issue or subtask is created."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.createIssue_post
      parameters:
      - description: Whether the project in which the issue is created is added to
          the user's **Recently viewed** project list, as shown under **Projects**
          in Jira.
        in: query
        name: updateHistory
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            example:
              fields:
                assignee:
                  id: 5b109f2e9729b51b54dc274d
                components:
                - id: '10000'
                customfield_10000: 09/Jun/19
                customfield_20000: 06/Jul/19 3:25 PM
                customfield_30000:
                - '10000'
                - '10002'
                customfield_40000:
                  content:
                  - content:
                    - text: Occurs on all orders
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                customfield_50000:
                  content:
                  - content:
                    - text: Could impact day-to-day work.
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                customfield_60000: jira-software-users
                customfield_70000:
                - jira-administrators
                - jira-software-users
                customfield_80000:
                  value: red
                description:
                  content:
                  - content:
                    - text: Order entry fails when selecting supplier.
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                duedate: '2019-05-11T00:00:00.000Z'
                environment:
                  content:
                  - content:
                    - text: UAT
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                fixVersions:
                - id: '10001'
                issuetype:
                  id: '10000'
                labels:
                - bugfix
                - blitz_test
                parent:
                  key: PROJ-123
                priority:
                  id: '20000'
                project:
                  id: '10000'
                reporter:
                  id: 5b10a2844c20165700ede21g
                security:
                  id: '10000'
                summary: Main order flow broken
                timetracking:
                  originalEstimate: '10'
                  remainingEstimate: '5'
                versions:
                - id: '10000'
              update: {}
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}}'
              schema:
                $ref: '#/components/schemas/CreatedIssue'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":["Field ''priority'' is required"],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: "Returned if the request:\n\n *  is missing required fields.\n\
            \ *  contains invalid field values.\n *  contains fields that cannot be\
            \ set for the issue type.\n *  is by a user who does not have the necessary\
            \ permission.\n *  is to create a subtype in a project different that\
            \ of the the parent issue.\n *  is for a subtask when the option to create\
            \ subtasks is disabled.\n *  is invalid for any other reason."
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Create issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/bulk:
    post:
      deprecated: false
      description: "Creates issues and, where the option to create subtasks is enabled\
        \ in Jira, subtasks. Transitions may be applied, to move the issues or subtasks\
        \ to a workflow step other than the default start step, and issue properties\
        \ set.\n\nThe content of each issue or subtask is defined using `update` and\
        \ `fields`. The fields that can be set in the issue or subtask are determined\
        \ using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get).\
        \ These are the same fields that appear on the issues' create screens. Note\
        \ that the `description`, `environment`, and any `textarea` type custom fields\
        \ (multi-line text fields) take Atlassian Document Format content. Single\
        \ line custom fields (`textfield`) accept a string and don't handle Atlassian\
        \ Document Format content.\n\nCreating a subtask differs from creating an\
        \ issue as follows:\n\n *  `issueType` must be set to a subtask issue type\
        \ (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get)\
        \ to find subtask issue types).\n *  `parent` the must contain the ID or key\
        \ of the parent issue.\n\n**[Permissions](#permissions) required:** *Browse\
        \ projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project in which each issue or subtask is created."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.createIssues_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              issueUpdates:
              - fields:
                  assignee:
                    id: 5b109f2e9729b51b54dc274d
                  components:
                  - id: '10000'
                  customfield_10000: 09/Jun/19
                  customfield_20000: 06/Jul/19 3:25 PM
                  customfield_30000:
                  - '10000'
                  - '10002'
                  customfield_40000:
                    content:
                    - content:
                      - text: Occurs on all orders
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  customfield_50000:
                    content:
                    - content:
                      - text: Could impact day-to-day work.
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  customfield_60000: jira-software-users
                  customfield_70000:
                  - jira-administrators
                  - jira-software-users
                  customfield_80000:
                    value: red
                  description:
                    content:
                    - content:
                      - text: Order entry fails when selecting supplier.
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  duedate: '2011-03-11T00:00:00.000Z'
                  environment:
                    content:
                    - content:
                      - text: UAT
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  fixVersions:
                  - id: '10001'
                  issuetype:
                    id: '10000'
                  labels:
                  - bugfix
                  - blitz_test
                  priority:
                    id: '20000'
                  project:
                    id: '10000'
                  reporter:
                    id: 5b10a2844c20165700ede21g
                  security:
                    id: '10000'
                  summary: Main order flow broken
                  timetracking:
                    originalEstimate: '10'
                    remainingEstimate: '5'
                  versions:
                  - id: '10000'
                update:
                  worklog:
                  - add:
                      started: 2019-07-05T11:05:00.000+0000
                      timeSpent: 60m
              - fields:
                  assignee:
                    id: 5b109f2e9729b51b54dc274d
                  components:
                  - id: '10000'
                  customfield_10000: 09/Jun/19
                  customfield_20000: 06/Jul/19 3:25 PM
                  customfield_30000:
                  - '10000'
                  - '10002'
                  customfield_40000:
                    content:
                    - content:
                      - text: Occurs on all orders
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  customfield_50000:
                    content:
                    - content:
                      - text: Could impact day-to-day work.
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  customfield_60000: jira-software-users
                  customfield_70000:
                  - jira-administrators
                  - jira-software-users
                  customfield_80000:
                    value: red
                  description:
                    content:
                    - content:
                      - text: Order remains pending after approved.
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  duedate: '2019-04-16T00:00:00.000Z'
                  environment:
                    content:
                    - content:
                      - text: UAT
                        type: text
                      type: paragraph
                    type: doc
                    version: 1
                  fixVersions:
                  - id: '10001'
                  issuetype:
                    id: '10000'
                  labels:
                  - new_release
                  priority:
                    id: '20000'
                  project:
                    id: '1000'
                  reporter:
                    id: 5b10a2844c20165700ede21g
                  security:
                    id: '10000'
                  summary: Order stuck in pending
                  timetracking:
                    originalEstimate: '15'
                    remainingEstimate: '5'
                  versions:
                  - id: '10000'
                update: {}
            schema:
              $ref: '#/components/schemas/IssuesUpdateBean'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"issues":[{"id":"10000","key":"ED-24","self":"https://your-domain.atlassian.net/rest/api/3/issue/10000","transition":{"status":200,"errorCollection":{"errorMessages":[],"errors":{}}}},{"id":"10001","key":"ED-25","self":"https://your-domain.atlassian.net/rest/api/3/issue/10001"}],"errors":[]}'
              schema:
                $ref: '#/components/schemas/CreatedIssues'
          description: "Returned if any of the issue or subtask creation requests\
            \ were successful. A request may be unsuccessful when it:\n\n *  is missing\
            \ required fields.\n *  contains invalid field values.\n *  contains fields\
            \ that cannot be set for the issue type.\n *  is by a user who does not\
            \ have the necessary permission.\n *  is to create a subtype in a project\
            \ different that of the the parent issue.\n *  is for a subtask when the\
            \ option to create subtasks is disabled.\n *  is invalid for any other\
            \ reason."
        '400':
          content:
            application/json:
              example: '{"issues":[],"errors":[{"status":400,"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The
                issue type selected is invalid.","project":"Sub-tasks must be created
                in the same project as the parent."}},"failedElementNumber":0},{"status":400,"elementErrors":{"errorMessages":[],"errors":{"issuetype":"The
                issue type selected is invalid.","project":"Sub-tasks must be created
                in the same project as the parent."}},"failedElementNumber":1}]}'
              schema:
                $ref: '#/components/schemas/CreatedIssues'
          description: "Returned if all requests are invalid. Requests may be unsuccessful\
            \ when they:\n\n *  are missing required fields.\n *  contain invalid\
            \ field values.\n *  contain fields that cannot be set for the issue type.\n\
            \ *  are by a user who does not have the necessary permission.\n *  are\
            \ to create a subtype in a project different that of the the parent issue.\n\
            \ *  is for a subtask when the option to create subtasks is disabled.\n\
            \ *  are invalid for any other reason."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Bulk create issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/createmeta:
    get:
      deprecated: false
      description: 'Returns details of projects, issue types within projects, and,
        when requested, the create screen fields for each issue type for the user.
        Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post)
        and [Create issues](#api-rest-api-3-issue-bulk-post).


        The request can be restricted to specific projects or issue types using the
        query parameters. The response will contain information for the valid projects,
        issue types, or project and issue type combinations requested. Note that invalid
        project, issue type, or project and issue type combinations do not generate
        errors.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
        in the requested projects.'
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getCreateIssueMeta_get
      parameters:
      - description: List of project IDs. This parameter accepts a comma-separated
          list. Multiple project IDs can also be provided using an ampersand-separated
          list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This
          parameter may be provided with `projectKeys`.
        in: query
        name: projectIds
        schema:
          items:
            type: string
          type: array
      - description: List of project keys. This parameter accepts a comma-separated
          list. Multiple project keys can also be provided using an ampersand-separated
          list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter
          may be provided with `projectIds`.
        in: query
        name: projectKeys
        schema:
          items:
            type: string
          type: array
      - description: List of issue type IDs. This parameter accepts a comma-separated
          list. Multiple issue type IDs can also be provided using an ampersand-separated
          list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`.
          This parameter may be provided with `issuetypeNames`.
        in: query
        name: issuetypeIds
        schema:
          items:
            type: string
          type: array
      - description: List of issue type names. This parameter accepts a comma-separated
          list. Multiple issue type names can also be provided using an ampersand-separated
          list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This
          parameter may be provided with `issuetypeIds`.
        in: query
        name: issuetypeNames
        schema:
          items:
            type: string
          type: array
      - description: Use [expand](#expansion) to include additional information about
          issue metadata in the response. This parameter accepts `projects.issuetypes.fields`,
          which returns information about the fields in the issue creation screen
          for each issue type. Fields hidden from the screen are not returned. Use
          the information to populate the `fields` and `update` fields in [Create
          issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"projects":[{"self":"https://your-domain.atlassian.net/rest/api/3/project/ED","id":"10000","key":"ED","name":"Edison
                Project","avatarUrls":{"16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000&avatarId=10011","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000&avatarId=10011","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000&avatarId=10011","48x48":"https://your-domain.atlassian.net/secure/projectavatar?pid=10000&avatarId=10011"},"issuetypes":[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"An
                error in the code","iconUrl":"https://your-domain.atlassian.net/images/icons/issuetypes/bug.png","name":"Bug","subtask":false,"fields":{"issuetype":{"required":true,"name":"Issue
                Type","key":"issuetype","hasDefaultValue":false,"operations":["set"]}}}]}]}'
              schema:
                $ref: '#/components/schemas/IssueCreateMetadata'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get create issue metadata
      tags:
      - Issues
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/picker:
    get:
      deprecated: false
      description: "Returns lists of issues matching a query string. Use this resource\
        \ to provide auto-completion suggestions when the user is looking for an issue\
        \ using a word or string.\n\nThis operation returns two lists:\n\n *  `History\
        \ Search` which includes issues from the user's history of created, edited,\
        \ or viewed issues that contain the string in the `query` parameter.\n * \
        \ `Current Search` which includes issues that match the JQL expression in\
        \ `currentJQL` and contain the string in the `query` parameter.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\
        \ None."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getIssuePickerResource_get
      parameters:
      - description: A string to match against text fields in the issue such as title,
          description, or comments.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - description: A JQL query defining a list of issues to search for the query
          term. Note that `username` and `userkey` cannot be used as search terms
          for this parameter, due to privacy reasons. Use `accountId` instead.
        in: query
        name: currentJQL
        schema:
          type: string
      - description: The key of an issue to exclude from search results. For example,
          the issue the user is viewing when they perform this query.
        in: query
        name: currentIssueKey
        schema:
          type: string
      - description: The ID of a project that suggested issues must belong to.
        in: query
        name: currentProjectId
        schema:
          type: string
      - description: Indicate whether to include subtasks in the suggestions list.
        in: query
        name: showSubTasks
        schema:
          type: boolean
      - description: When `currentIssueKey` is a subtask, whether to include the parent
          issue in the suggestions if it matches the query.
        in: query
        name: showSubTaskParent
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuePickerSuggestions'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue picker suggestions
      tags:
      - Issue search
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/properties:
    post:
      deprecated: false
      description: "Sets the values of entity properties on issues. It can set up\
        \ to 10 entity properties on up to 10,000 issues.\n\nThe value of the request\
        \ body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.\
        \ The maximum length of single issue property value is 32768 characters. This\
        \ operation can be accessed anonymously.\n\nThis operation is:\n\n *  transactional,\
        \ either all properties are updated in all eligible issues or, when errors\
        \ occur, no properties are updated.\n *  [asynchronous](#async). Follow the\
        \ `location` link in the response to determine the status of the task and\
        \ use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit\
        \ issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.property.IssuePropertyBulkUpdateResource.bulkSetIssuesProperties_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueEntityProperties'
        description: Issue properties to be set or updated with values.
        required: true
      responses:
        '303':
          description: Returned if the operation is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Return if the request is invalid or the user does not have
            the necessary permission.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Bulk set issues properties
      tags:
      - Issue properties
      x-atlassian-connect-scope: WRITE
      x-experimental: true
  /rest/api/3/issue/properties/{propertyKey}:
    delete:
      deprecated: false
      description: "Deletes a property value from multiple issues. The issues to be\
        \ updated can be specified by filter criteria.\n\nThe criteria the filter\
        \ used to identify eligible issues are:\n\n *  `entityIds` Only issues from\
        \ this list are eligible.\n *  `currentValue` Only issues with the property\
        \ set to this value are eligible.\n\nIf both criteria is specified, they are\
        \ joined with the logical *AND*: only issues that satisfy both criteria are\
        \ considered eligible.\n\nIf no filter criteria are specified, all the issues\
        \ visible to the user and where the user has the EDIT\\_ISSUES permission\
        \ for the issue are considered eligible.\n\nThis operation is:\n\n *  transactional,\
        \ either the property is deleted from all eligible issues or, when errors\
        \ occur, no properties are deleted.\n *  [asynchronous](#async). Follow the\
        \ `location` link in the response to determine the status of the task and\
        \ use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [ project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for each project\
        \ containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Edit\
        \ issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for each issue."
      operationId: com.atlassian.jira.rest.v2.property.IssuePropertyBulkUpdateResource.bulkDeleteIssueProperty_delete
      parameters:
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              currentValue: deprecated value
              entityIds:
              - 10100
              - 100010
            schema:
              $ref: '#/components/schemas/IssueFilterForBulkPropertyDelete'
        required: true
      responses:
        '303':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Bulk delete issue property
      tags:
      - Issue properties
      x-atlassian-connect-scope: DELETE
    put:
      deprecated: false
      description: "Sets a property value on multiple issues. The issues to be updated\
        \ can be specified by a filter.\n\nThe filter identifies issues eligible for\
        \ update using these criteria:\n\n *  `entityIds` Only issues from this list\
        \ are eligible.\n *  `currentValue` Only issues with the property set to this\
        \ value are eligible.\n *  `hasProperty`:\n    \n     *  If *true*, only issues\
        \ with the property are eligible.\n     *  If *false*, only issues without\
        \ the property are eligible.\n\nIf more than one criteria is specified, they\
        \ are joined with the logical *AND*: only issues that satisfy all criteria\
        \ are eligible.\n\nIf an invalid combination of criteria is provided, an error\
        \ is returned. For example, specifying a `currentValue` and `hasProperty`\
        \ as *false* would not match any issues (because without the property the\
        \ property cannot have a value).\n\nThe filter is optional. Without the filter\
        \ all the issues visible to the user and where the user has the EDIT\\_ISSUES\
        \ permission for the issue are considered eligible.\n\nThis operation is:\n\
        \n *  transactional, either all eligible issues are updated or, when errors\
        \ occur, none are updated.\n *  [asynchronous](#async). Follow the `location`\
        \ link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get)\
        \ to obtain subsequent updates.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for each project containing issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Edit\
        \ issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for each issue."
      operationId: com.atlassian.jira.rest.v2.property.IssuePropertyBulkUpdateResource.bulkSetIssueProperty_put
      parameters:
      - description: The key of the property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              filter:
                currentValue:
                  owner: admin
                  weight: 50
                entityIds:
                - 10100
                - 100010
                hasProperty: true
              value:
                owner: admin
                weight: 100
            schema:
              $ref: '#/components/schemas/BulkIssuePropertyUpdateRequest'
        required: true
      responses:
        '303':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Bulk set issue property
      tags:
      - Issue properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}:
    delete:
      deprecated: false
      description: "Deletes an issue.\n\nAn issue cannot be deleted if it has one\
        \ or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`.\
        \ This causes the issue's subtasks to be deleted with the issue.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.deleteIssue_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Whether the issue's subtasks are deleted when the issue is deleted.
        in: query
        name: deleteSubtasks
        schema:
          default: 'false'
          enum:
          - 'true'
          - 'false'
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue has subtasks and `deleteSubtasks` is
            not set to *true*.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to delete the
            issue.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete issue
      tags:
      - Issues
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the details for an issue.\n\nThe issue is identified by\
        \ its ID or key, however, if the identifier doesn't match an issue, a case-insensitive\
        \ search and check for moved issues is performed. If a matching issue is found\
        \ its details are returned, a 302 or other redirect is **not** returned. The\
        \ issue key returned in the response is the key of the issue found.\n\nThis\
        \ operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getIssue_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: "A list of fields to return for the issue. This parameter accepts\
          \ a comma-separated list. Use it to retrieve a subset of fields. Allowed\
          \ values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable\
          \ fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\
          \n *  `summary,comment` Returns only the summary and comments fields.\n\
          \ *  `-description` Returns all (default) fields except description.\n *\
          \  `*navigable,-comment` Returns all navigable fields except comment.\n\n\
          This parameter may be specified multiple times. For example, `fields=field1,field2&\
          \ fields=field3`.\n\nNote: All fields are returned by default. This differs\
          \ from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and\
          \ [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where\
          \ the default is all navigable fields."
        in: query
        name: fields
        schema:
          items:
            default: '*all'
            type: string
          type: array
      - description: Whether fields in `fields` are referenced by keys rather than
          IDs. This parameter is useful where fields have been added by a connect
          app and a field's key may differ from its ID.
        in: query
        name: fieldsByKeys
        schema:
          default: false
          type: boolean
      - description: "Use [expand](#expansion) to include additional information about\
          \ the issues in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `renderedFields` Returns field values rendered\
          \ in HTML format.\n *  `names` Returns the display name of each field.\n\
          \ *  `schema` Returns the schema describing a field type.\n *  `transitions`\
          \ Returns all possible transitions for the issue.\n *  `editmeta` Returns\
          \ information about how each field can be edited.\n *  `changelog` Returns\
          \ a list of recent updates to an issue, sorted by date, starting from the\
          \ most recent.\n *  `versionedRepresentations` Returns a JSON array for\
          \ each version of a field's value, with the highest number representing\
          \ the most recent version. Note: When included in the request, the `fields`\
          \ parameter is ignored."
        in: query
        name: expand
        schema:
          type: string
      - description: "A list of issue properties to return for the issue. This parameter\
          \ accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns\
          \ all issue properties.\n *  Any issue property key, prefixed with a minus\
          \ to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1`\
          \ Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1`\
          \ and `prop2` properties.\n\nThis parameter may be specified multiple times.\
          \ For example, `properties=prop1,prop2& properties=prop3`."
        in: query
        name: properties
        schema:
          items:
            default: null
            type: string
          type: array
      - description: Whether the project in which the issue is created is added to
          the user's **Recently viewed** project list, as shown under **Projects**
          in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get)
          `lastViewed` field.
        in: query
        name: updateHistory
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"expand":"","id":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.715+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow broken"}]}]},"project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}},"comment":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}'
              schema:
                $ref: '#/components/schemas/IssueBean'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue
      tags:
      - Issues
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Edits an issue. A transition may be applied and issue properties\
        \ updated as part of the edit.\n\nThe edits to the issue's fields are defined\
        \ using `update` and `fields`. The fields that can be edited are determined\
        \ using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).\n\
        \nThe parent field may be set by key or ID. For standard issue types, the\
        \ parent may be removed by setting `update.parent.set.none` to *true*. Note\
        \ that the `description`, `environment`, and any `textarea` type custom fields\
        \ (multi-line text fields) take Atlassian Document Format content. Single\
        \ line custom fields (`textfield`) accept a string and don't handle Atlassian\
        \ Document Format content.\n\nConnect app users with admin permissions (from\
        \ user permissions and app scopes) can override the screen security configuration\
        \ using `overrideScreenSecurity` and `overrideEditableFlag`.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.editIssue_put
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Whether a notification email about the issue update is sent to
          all watchers. To disable the notification, administer Jira or administer
          project permissions are required. If the user doesn't have the necessary
          permission the request is ignored.
        in: query
        name: notifyUsers
        schema:
          default: true
          type: boolean
      - description: Whether screen security should be overridden to enable hidden
          fields to be edited. Available to Connect app users with admin permissions.
        in: query
        name: overrideScreenSecurity
        schema:
          default: false
          type: boolean
      - description: Whether screen security should be overridden to enable uneditable
          fields to be edited. Available to Connect app users with admin permissions.
        in: query
        name: overrideEditableFlag
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            example:
              fields:
                customfield_10000:
                  content:
                  - content:
                    - text: Investigation underway
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                customfield_10010: 1
                summary: Completed orders still displaying in pending
              historyMetadata:
                activityDescription: Complete order processing
                actor:
                  avatarUrl: http://mysystem/avatar/tony.jpg
                  displayName: Tony
                  id: tony
                  type: mysystem-user
                  url: http://mysystem/users/tony
                cause:
                  id: myevent
                  type: mysystem-event
                description: From the order testing process
                extraData:
                  Iteration: 10a
                  Step: '4'
                generator:
                  id: mysystem-1
                  type: mysystem-application
                type: myplugin:type
              properties:
              - key: key1
                value: Order number 10784
              - key: key2
                value: Order number 10923
              update:
                components:
                - set: ''
                labels:
                - add: triaged
                - remove: blocker
                parent:
                - set:
                    none: true
                summary:
                - set: Bug in business logic
                timetracking:
                - edit:
                    originalEstimate: 1w 1d
                    remainingEstimate: 4d
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the request body is missing.\n *  the\
            \ user does not have the necessary permission to edit one or more fields.\n\
            \ *  the request includes one or more fields that are not found or are\
            \ not associated with the issue's edit screen.\n *  the request includes\
            \ an invalid transition."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag`
            but doesn't have the necessary permission.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Edit issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/assignee:
    put:
      deprecated: false
      description: "Assigns an issue to a user. Use this operation when the calling\
        \ user does not have the *Edit Issues* permission but has the *Assign issue*\
        \ permission for the project that the issue is in.\n\nIf `name` or `accountId`\
        \ is set to:\n\n *  `\"-1\"`, the issue is assigned to the default assignee\
        \ for the project.\n *  `null`, the issue is set to unassigned.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.assignIssue_put
      parameters:
      - description: The ID or key of the issue to be assigned.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              accountId: 5b10ac8d82e05b22cc7d4ef5
            schema:
              $ref: '#/components/schemas/User'
        description: The request object with the user that the issue is assigned to.
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the user is not found.\n *  `name`, `key`,\
            \ or `accountId` is missing.\n *  more than one of `name`, `key`, and\
            \ `accountId` are provided."
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the issue is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Assign issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/attachments:
    post:
      deprecated: false
      description: "Adds one or more attachments to an issue. Attachments are posted\
        \ as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).\n\
        \nNote that:\n\n *  The request must have a `X-Atlassian-Token: no-check`\
        \ header, if not it is blocked. See [Special headers](#special-request-headers)\
        \ for more information.\n *  The name of the multipart/form-data parameter\
        \ that contains the attachments must be `file`.\n\nThe following example uploads\
        \ a file called *myfile.txt* to the issue *TEST-123*:\n\n`curl -D- -u admin:admin\
        \ -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments`\n\
        \nTip: Use a client library. Many client libraries have classes for handling\
        \ multipart POST operations. For example, in Java, the Apache HTTP Components\
        \ library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html)\
        \ class for multipart POST operations.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:** \n\n *  *Browse Projects* and\
        \ *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueAttachmentsResource.addAttachment_post
      parameters:
      - description: The ID or key of the issue that attachments are added to.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              format: binary
              type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","id":"10001","filename":"picture.jpg","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"2020-03-04T06:50:35.411+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/attachments/10000","thumbnail":"https://your-domain.atlassian.net/secure/thumbnail/10000"},{"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10001","filename":"dbeuglog.txt","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"2020-03-04T06:50:35.411+0000","size":2460,"mimeType":"text/plain","content":"https://your-domain.atlassian.net/attachments/10001","thumbnail":"https://your-domain.atlassian.net/secure/thumbnail/10002"}]'
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
          description: Returned if the request is successful.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  the issue\
            \ is not found.\n *  the user does not have permission to view the issue."
        '413':
          description: The attachments exceed the maximum attachment size for issues.
            See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM)
            for details.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add attachment
      tags:
      - Issue attachments
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/changelog:
    get:
      deprecated: false
      description: "Returns all changelogs for an issue sorted by date, starting from\
        \ the oldest.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueChangelogResource.getChangeLogs_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?startAt=2&maxResults=2","nextPage":"https://your-domain.atlassian.net/rest/api/3/issue/TT-1/changelog?&startAt=4&maxResults=2","maxResults":2,"startAt":2,"total":5,"isLast":false,"values":[{"id":"10001","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:50.429+0000","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"","to":null,"toString":"label-1"}]},{"id":"10002","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney"},"created":"1970-01-18T06:27:51.429+0000","items":[{"field":"fields","fieldtype":"jira","fieldId":"fieldId","from":null,"fromString":"label-1","to":null,"toString":"label-1
                label-2"}]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanChangelog'
          description: Returned if the request is successful.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get change logs
      tags:
      - Issues
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/{issueIdOrKey}/comment:
    get:
      deprecated: false
      description: "Returns all comments for an issue.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:** Comments are included\
        \ in the response where the user has:\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the comment has visibility restrictions, belongs to the group or has the\
        \ role visibility is role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.getComments_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: '[Order](#ordering) the results by a field. Accepts *created*
          to sort comments by their created date.'
        in: query
        name: orderBy
        schema:
          enum:
          - created
          - -created
          - +created
          type: string
      - description: Use [expand](#expansion) to include additional information about
          comments in the response. This parameter accepts `renderedBody`, which returns
          the comment body rendered in HTML.
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"startAt":0,"maxResults":1,"total":1,"comments":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}]}'
              schema:
                $ref: '#/components/schemas/PageOfComments'
          description: Returned if the request is successful.
        '400':
          description: Returned if `orderBy` is set to a value other than *created*.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get comments
      tags:
      - Issue comments
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Adds a comment to an issue.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue containing the comment is in.\n *  If [issue-level\
        \ security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level\
        \ security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.addComment_post
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          comments in the response. This parameter accepts `renderedBody`, which returns
          the comment body rendered in HTML.
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              body:
                content:
                - content:
                  - text: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                      Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis
                      fermentum. Sed semper quam laoreet nisi egestas at posuere augue
                      semper.
                    type: text
                  type: paragraph
                type: doc
                version: 1
              visibility:
                type: role
                value: Administrators
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}'
              schema:
                $ref: '#/components/schemas/Comment'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add comment
      tags:
      - Issue comments
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/comment/{id}:
    delete:
      deprecated: false
      description: "Deletes a comment.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue containing the comment is in.\n *  If [issue-level\
        \ security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level\
        \ security permission to view the issue.\n *  *Delete all comments*[ project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment\
        \ or *Delete own comments* to delete comment created by the user,\n *  If\
        \ the comment has visibility restrictions, the user belongs to the group or\
        \ has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.deleteComment_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the comment.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the user does not have permission to delete the
            comment.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or comment is not found or the user does
            not have permission to view the issue or comment.
        '405':
          description: Returned if an anonymous call is made to the operation.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete comment
      tags:
      - Issue comments
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns a comment.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project containing\
        \ the comment.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the comment has visibility restrictions, the user belongs to the group or\
        \ has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.getComment_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the comment.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          comments in the response. This parameter accepts `renderedBody`, which returns
          the comment body rendered in HTML.
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}'
              schema:
                $ref: '#/components/schemas/Comment'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or comment is not found or the user does
            not have permission to view the issue or comment.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get comment
      tags:
      - Issue comments
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Updates a comment.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project that\
        \ the issue containing the comment is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Edit\
        \ all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to update any comment or *Edit own comments* to update comment created by\
        \ the user.\n *  If the comment has visibility restrictions, the user belongs\
        \ to the group or has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueCommentResource.updateComment_put
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the comment.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          comments in the response. This parameter accepts `renderedBody`, which returns
          the comment body rendered in HTML.
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              body:
                content:
                - content:
                  - text: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                      Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis
                      fermentum. Sed semper quam laoreet nisi egestas at posuere augue
                      semper.
                    type: text
                  type: paragraph
                type: doc
                version: 1
              visibility:
                type: role
                value: Administrators
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}'
              schema:
                $ref: '#/components/schemas/Comment'
          description: Returned if the request is successful.
        '400':
          description: Returned if the user does not have permission to edit the comment
            or the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or comment is not found or the user does
            not have permission to view the issue or comment.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Update comment
      tags:
      - Issue comments
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/editmeta:
    get:
      deprecated: false
      description: "Returns the edit screen fields for an issue that are visible to\
        \ and editable by the user. Use the information to populate the requests in\
        \ [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).\n\nConnect app users\
        \ with admin permissions (from user permissions and app scopes) can return\
        \ additional details using:\n\n *  `overrideScreenSecurity` Returns hidden\
        \ fields.\n *  `overrideEditableFlag` Returns uneditable fields. For example,\
        \ where an issue has a workflow status of closed none of its fields are editable.\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n\nNote:\
        \ For any fields to be editable the user must have the *Edit issues* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getEditIssueMeta_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Whether hidden fields should be returned. Available to connect
          app users with admin permissions.
        in: query
        name: overrideScreenSecurity
        schema:
          default: false
          type: boolean
      - description: Whether non-editable fields should be returned. Available to
          connect app users with admin permissions.
        in: query
        name: overrideEditableFlag
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}}'
              schema:
                $ref: '#/components/schemas/IssueUpdateMetadata'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user uses an override parameter but doesn't
            have permission to do so.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get edit issue metadata
      tags:
      - Issues
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/{issueIdOrKey}/notify:
    post:
      deprecated: false
      description: "Creates an email notification for an issue and adds it to the\
        \ mail queue.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.notify_post
      parameters:
      - description: ID or key of the issue that the notification is sent for.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              htmlBody: The <strong>latest</strong> test results for this ticket are
                now available.
              restrict:
                groups:
                - name: notification-group
                permissions:
                - key: BROWSE
              subject: Latest test results
              textBody: The latest test results for this ticket are now available.
              to:
                assignee: false
                groups:
                - name: notification-group
                reporter: false
                users:
                - accountId: 5b10a2844c20165700ede21g
                  active: false
                voters: true
                watchers: true
            schema:
              $ref: '#/components/schemas/Notification'
        description: The request object for the notification and recipients.
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the email is queued for sending.
        '400':
          description: "Returned if:\n\n *  the recipient is the same as the calling\
            \ user.\n *  the recipient is invalid. For example, the recipient is set\
            \ to the assignee, but the issue is unassigned.\n *  the request is invalid.\
            \ For example, required fields are missing or have invalid values."
        '403':
          description: "Returned if:\n\n *  outgoing emails are disabled.\n *  no\
            \ SMTP server is configured."
        '404':
          description: Returned if the issue is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Send notification for issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/properties:
    get:
      deprecated: false
      description: "Returns the URLs and keys of an issue's properties.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\
        \ Property details are only returned where the user has:\n\n *  *Browse projects*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
        \ project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssuePropertyResource.getIssuePropertyKeys_get
      parameters:
      - description: The key or ID of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '404':
          description: Returned if the issue is not found or the user does not have
            permissions to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue property keys
      tags:
      - Issue properties
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: "Deletes an issue's property.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssuePropertyResource.deleteIssueProperty_delete
      parameters:
      - description: The key or ID of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or property is not found, or the user
            does not have permission to edit the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete issue property
      tags:
      - Issue properties
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the key and value of an issue's property.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssuePropertyResource.getIssueProperty_get
      parameters:
      - description: The key or ID of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or property is not found or the user
            does not have permission to see the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue property
      tags:
      - Issue properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Sets the value of an issue's property. Use this resource to store\
        \ custom data against an issue.\n\nThe value of the request body must be a\
        \ [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum\
        \ length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* and *Edit\
        \ issues* [project permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssuePropertyResource.setIssueProperty_put
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the issue property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the issue property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the issue property is created.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to edit the issue.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set issue property
      tags:
      - Issue properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/remotelink:
    delete:
      deprecated: false
      description: "Deletes the remote issue link from the issue using the link's\
        \ global ID. Where the global ID includes reserved URL characters these must\
        \ be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1`\
        \ as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis\
        \ operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is implemented, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.deleteRemoteIssueLinkByGlobalId_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      - description: The global ID of a remote issue link.
        in: query
        name: globalId
        required: true
        schema:
          example: system=http://www.mycompany.com/support&id=1
          type: string
        x-showInExample: 'true'
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if a global ID isn't provided.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to link issues.
        '404':
          description: Returned if the issue or remote issue link is not found or
            the user does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete remote issue link by global ID
      tags:
      - Issue remote links
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the remote issue links for an issue. When a remote issue\
        \ link global ID is provided the record with that global ID is returned, otherwise\
        \ all remote issue links are returned. Where a global ID includes reserved\
        \ URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1`\
        \ as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.\n\nThis\
        \ operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getRemoteIssueLinks_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      - description: The global ID of the remote issue link.
        in: query
        name: globalId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000","globalId":"system=http://www.mycompany.com/support&id=1","application":{"type":"com.acme.tracker","name":"My
                Acme Tracker"},"relationship":"causes","object":{"url":"http://www.mycompany.com/support?id=1","title":"TSTSUP-111","summary":"Customer
                support issue","icon":{"url16x16":"http://www.mycompany.com/support/ticket.png","title":"Support
                Ticket"},"status":{"resolved":true,"icon":{"url16x16":"http://www.mycompany.com/support/resolved.png","title":"Case
                Closed","link":"http://www.mycompany.com/support?id=1&details=closed"}}}},{"id":10001,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10001","globalId":"system=http://www.anothercompany.com/tester&id=1234","application":{"type":"com.acme.tester","name":"My
                Acme Tester"},"relationship":"is tested by","object":{"url":"http://www.anothercompany.com/tester/testcase/1234","title":"Test
                Case #1234","summary":"Test that the submit button saves the item","icon":{"url16x16":"http://www.anothercompany.com/tester/images/testcase.gif","title":"Test
                Case"},"status":{"resolved":false,"icon":{"url16x16":"http://www.anothercompany.com/tester/images/person/mia.gif","title":"Tested
                by Mia Krystof","link":"http://www.anothercompany.com/tester/person?accountId=5b10a2844c20165700ede21g"}}}}]'
              schema:
                $ref: '#/components/schemas/RemoteIssueLink'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if issue linking is disabled.
        '404':
          description: Returned if the the issue or remote issue link is not found
            or the user does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get remote issue links
      tags:
      - Issue remote links
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Creates or updates a remote issue link for an issue.\n\nIf a `globalId`\
        \ is provided and a remote issue link with that global ID is found it is updated.\
        \ Any fields without values in the request are set to null. Otherwise, the\
        \ remote issue link is created.\n\nThis operation requires [issue linking\
        \ to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.createOrUpdateRemoteIssueLink_post
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              application:
                name: My Acme Tracker
                type: com.acme.tracker
              globalId: system=http://www.mycompany.com/support&id=1
              object:
                icon:
                  title: Support Ticket
                  url16x16: http://www.mycompany.com/support/ticket.png
                status:
                  icon:
                    link: http://www.mycompany.com/support?id=1&details=closed
                    title: Case Closed
                    url16x16: http://www.mycompany.com/support/resolved.png
                  resolved: true
                summary: Customer support issue
                title: TSTSUP-111
                url: http://www.mycompany.com/support?id=1
              relationship: causes
            schema:
              $ref: '#/components/schemas/RemoteIssueLinkRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}'
              schema:
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies'
          description: Returned if the remote issue link is updated.
        '201':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000"}'
              schema:
                $ref: '#/components/schemas/RemoteIssueLinkIdentifies'
          description: Returned if the remote issue link is created.
        '400':
          content:
            application/json:
              example: '{"errorMessages":[],"errors":{"title":"''title'' is required."}}'
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to link issues.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Create or update remote issue link
      tags:
      - Issue remote links
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}:
    delete:
      deprecated: false
      description: "Deletes a remote issue link from an issue.\n\nThis operation requires\
        \ [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects*, *Edit issues*, and *Link issues* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project that\
        \ the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.deleteRemoteIssueLinkById_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      - description: The ID of a remote issue link.
        in: path
        name: linkId
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the link ID is invalid or the remote issue link
            does not belong to the issue.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to link issues.
        '404':
          description: Returned if the issue or remote issue link is not found or
            the user does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete remote issue link by ID
      tags:
      - Issue remote links
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns a remote issue link for an issue.\n\nThis operation requires\
        \ [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getRemoteIssueLinkById_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the remote issue link.
        in: path
        name: linkId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/remotelink/10000","globalId":"system=http://www.mycompany.com/support&id=1","application":{"type":"com.acme.tracker","name":"My
                Acme Tracker"},"relationship":"causes","object":{"url":"http://www.mycompany.com/support?id=1","title":"TSTSUP-111","summary":"Customer
                support issue","icon":{"url16x16":"http://www.mycompany.com/support/ticket.png","title":"Support
                Ticket"},"status":{"resolved":true,"icon":{"url16x16":"http://www.mycompany.com/support/resolved.png","title":"Case
                Closed","link":"http://www.mycompany.com/support?id=1&details=closed"}}}}'
              schema:
                $ref: '#/components/schemas/RemoteIssueLink'
          description: Returned if the request is successful.
        '400':
          description: Returned if the link ID is invalid or the remote issue link
            does not belong to the issue.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if issue linking is disabled.
        '404':
          description: Returned if the issue or remote issue link is not found or
            the user does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get remote issue link by ID
      tags:
      - Issue remote links
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Updates a remote issue link for an issue.\n\nNote: Fields without\
        \ values in the request are set to null.\n\nThis operation requires [issue\
        \ linking to be active](https://confluence.atlassian.com/x/yoXKM).\n\nThis\
        \ operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.updateRemoteIssueLink_put
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      - description: The ID of the remote issue link.
        in: path
        name: linkId
        required: true
        schema:
          example: '10000'
          type: string
        x-showInExample: 'true'
      requestBody:
        content:
          application/json:
            example:
              application:
                name: My Acme Tracker
                type: com.acme.tracker
              globalId: system=http://www.mycompany.com/support&id=1
              object:
                icon:
                  title: Support Ticket
                  url16x16: http://www.mycompany.com/support/ticket.png
                status:
                  icon:
                    link: http://www.mycompany.com/support?id=1&details=closed
                    title: Case Closed
                    url16x16: http://www.mycompany.com/support/resolved.png
                  resolved: true
                summary: Customer support issue
                title: TSTSUP-111
                url: http://www.mycompany.com/support?id=1
              relationship: causes
            schema:
              $ref: '#/components/schemas/RemoteIssueLinkRequest'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":[],"errors":{"title":"''title'' is required."}}'
          description: "Returned if:\n\n *  the link ID is invalid.\n *  the remote\
            \ issue link does not belong to the issue.\n *  the request body is invalid."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to link issues.
        '404':
          description: Returned if the issue or remote issue link is not found or
            the user does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Update remote issue link by ID
      tags:
      - Issue remote links
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/transitions:
    get:
      deprecated: false
      description: "Returns either all transitions or a transition that can be performed\
        \ by the user on an issue, based on the issue's status.\n\nNote, if a request\
        \ is made for a transition that does not exist or cannot be performed on the\
        \ issue, given its status, the response will return any empty transitions\
        \ list.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required: A list or transition is returned only when the user has:**\n\n\
        \ *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n\nHowever,\
        \ if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ the response will not list any transitions."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getTransitions_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          transitions in the response. This parameter accepts `transitions.fields`,
          which returns information about the fields in the transition screen for
          each transition. Fields hidden from the screen are not returned. Use this
          information to populate the `fields` and `update` fields in [Transition
          issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).
        in: query
        name: expand
        schema:
          type: string
      - description: The ID of the transition.
        in: query
        name: transitionId
        schema:
          type: string
      - description: Whether transitions with the condition *Hide From User Condition*
          are included in the response.
        in: query
        name: skipRemoteOnlyCondition
        schema:
          default: false
          type: boolean
      - description: Whether details of transitions that fail a condition are included
          in the response
        in: query
        name: includeUnavailableTransitions
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"transitions":[{"id":"2","name":"Close Issue","to":{"self":"https://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}},"hasScreen":false,"isGlobal":false,"isInitial":false,"isAvailable":true,"isConditional":false,"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}},{"id":"711","name":"QA
                Review","to":{"self":"https://your-domain.atlassian.net/rest/api/3/status/5","description":"The
                issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","name":"Closed","id":"5","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9","id":9,"key":"completed","colorName":"green"}},"hasScreen":true,"fields":{"summary":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"},"colour":{"required":false,"schema":{"type":"array","items":"option","custom":"com.atlassian.jira.plugin.system.customfieldtypes:multiselect","customId":10001},"name":"My
                Multi Select","key":"field_key","hasDefaultValue":false,"operations":["set","add"],"allowedValues":["red","blue"],"defaultValue":"red"}}}]}'
              schema:
                $ref: '#/components/schemas/Transitions'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get transitions
      tags:
      - Issues
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Performs an issue transition and, if the transition has a screen,\
        \ updates the fields from the transition screen.\n\nTo update the fields on\
        \ the transition screen, specify the fields in the `fields` or `update` parameters\
        \ in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get)\
        \ with the `transitions.fields` expand.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.doTransition_post
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              fields:
                assignee:
                  name: bob
                resolution:
                  name: Fixed
              historyMetadata:
                activityDescription: Complete order processing
                actor:
                  avatarUrl: http://mysystem/avatar/tony.jpg
                  displayName: Tony
                  id: tony
                  type: mysystem-user
                  url: http://mysystem/users/tony
                cause:
                  id: myevent
                  type: mysystem-event
                description: From the order testing process
                extraData:
                  Iteration: 10a
                  Step: '4'
                generator:
                  id: mysystem-1
                  type: mysystem-application
                type: myplugin:type
              transition:
                id: '5'
              update:
                comment:
                - add:
                    body:
                      content:
                      - content:
                        - text: Bug has been fixed
                          type: text
                        type: paragraph
                      type: doc
                      version: 1
            schema:
              $ref: '#/components/schemas/IssueUpdateDetails'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  no transition is specified.\n *  the user\
            \ does not have permission to transition the issue.\n *  a field that\
            \ isn't included on the transition screen is defined in `fields` or `update`.\n\
            \ *  a field is specified in both `fields` and `update`.\n *  the request\
            \ is invalid for any other reason."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Transition issue
      tags:
      - Issues
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/votes:
    delete:
      deprecated: false
      description: "Deletes a user's vote from an issue. This is the equivalent of\
        \ the user clicking *Unvote* on an issue in Jira.\n\nThis operation requires\
        \ the **Allow users to vote on issues** option to be *ON*. This option is\
        \ set in General configuration for Jira. See [Configuring Jira application\
        \ options](https://confluence.atlassian.com/x/uYXKM) for details.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.removeVote_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  voting is disabled.\n *  the user has\
            \ not voted on the issue.\n *  the user is the issue reporter.\n *  the\
            \ issue is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete vote
      tags:
      - Issue votes
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns details about the votes on an issue.\n\nThis operation\
        \ requires the **Allow users to vote on issues** option to be *ON*. This option\
        \ is set in General configuration for Jira. See [Configuring Jira application\
        \ options](https://confluence.atlassian.com/x/uYXKM) for details.\n\nThis\
        \ operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n\nNote\
        \ that users with the necessary permissions for this operation but without\
        \ the *View voters and watchers* project permissions are not returned details\
        \ in the `voters` field."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getVotes_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/issue/MKY-1/votes","votes":24,"hasVoted":true,"voters":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false}]}'
              schema:
                $ref: '#/components/schemas/Votes'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  voting is disabled.\n *  the user does\
            \ not have permission to view the issue.\n *  the issue is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get votes
      tags:
      - Issue votes
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Adds the user's vote to an issue. This is the equivalent of the\
        \ user clicking *Vote* on an issue in Jira.\n\nThis operation requires the\
        \ **Allow users to vote on issues** option to be *ON*. This option is set\
        \ in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM)\
        \ for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.addVote_post
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  voting is disabled.\n *  the user is the\
            \ issue reporter.\n *  the issue is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add vote
      tags:
      - Issue votes
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/watchers:
    delete:
      deprecated: false
      description: "Deletes a user as a watcher of an issue.\n\nThis operation requires\
        \ the **Allow users to watch issues** option to be *ON*. This option is set\
        \ in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM)\
        \ for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  To\
        \ remove users other than themselves from the watchlist, *Manage watcher list*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
        \ project that the issue is in."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.removeWatcher_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          Required.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if `accountId` is not supplied.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the permission to manage
            the watcher list.
        '404':
          description: Returned if the issue or the user is not found or the user
            does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete watcher
      tags:
      - Issue watchers
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the watchers for an issue.\n\nThis operation requires\
        \ the **Allow users to watch issues** option to be *ON*. This option is set\
        \ in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM)\
        \ for details.\n\nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is ini\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  To\
        \ see details of users on the watchlist other than themselves, *View voters\
        \ and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.getIssueWatchers_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]}'
              schema:
                $ref: '#/components/schemas/Watchers'
          description: Returned if the request is successful
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue watchers
      tags:
      - Issue watchers
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Adds a user as a watcher of an issue by passing the account ID\
        \ of the user. For example, `\"5b10ac8d82e05b22cc7d4ef5\"`. If no user is\
        \ specified the calling user is added.\n\nThis operation requires the **Allow\
        \ users to watch issues** option to be *ON*. This option is set in General\
        \ configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM)\
        \ for details.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  To\
        \ add users other than themselves to the watchlist, *Manage watcher list*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
        \ project that the issue is in."
      operationId: com.atlassian.jira.rest.v2.issue.IssueResource.addWatcher_post
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: The account ID of the user. Note that username cannot be used
          due to privacy changes.
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the permission to manage
            the watcher list.
        '404':
          description: Returned if the issue or the user is not found or the user
            does not have permission to view the issue.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add watcher
      tags:
      - Issue watchers
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/worklog:
    get:
      deprecated: false
      description: "Returns worklogs for an issue, starting from the oldest worklog\
        \ or from the worklog started on or after a date and time.\n\nTime tracking\
        \ must be enabled in Jira, otherwise this operation returns an error. For\
        \ more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** Workloads are only returned where the user has:\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the worklog has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.getIssueWorklog_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 1048576
          format: int32
          type: integer
      - description: The worklog start date and time, in UNIX timestamp format, after
          which worklogs are returned.
        in: query
        name: startedAfter
        schema:
          format: int64
          type: integer
      - description: Use [expand](#expansion) to include additional information about
          worklogs in the response. This parameter accepts`properties`, which returns
          worklog properties.
        in: query
        name: expand
        schema:
          default: ''
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"startAt":0,"maxResults":1,"total":1,"worklogs":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}]}'
              schema:
                $ref: '#/components/schemas/PageOfWorklogs'
          description: Returned if the request is successful
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the issue is not found or the user does\
            \ not have permission to view the issue.\n *  `startAt` or `maxResults`\
            \ has non-numeric values.\n *  time tracking is disabled."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue worklogs
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Adds a worklog to an issue.\n\nTime tracking must be enabled in\
        \ Jira, otherwise this operation returns an error. For more information, see\
        \ [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.addWorklog_post
      parameters:
      - description: The ID or key the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: Whether users watching the issue are notified by email.
        in: query
        name: notifyUsers
        schema:
          default: true
          type: boolean
      - description: "Defines how to update the issue's time estimate, the options\
          \ are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n\
          \ *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate\
          \ by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by\
          \ the value of `timeSpent` in the worklog."
        in: query
        name: adjustEstimate
        schema:
          default: auto
          enum:
          - new
          - leave
          - manual
          - auto
          type: string
      - description: The value to set as the issue's remaining time estimate, as days
          (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required
          when `adjustEstimate` is `new`.
        in: query
        name: newEstimate
        schema:
          type: string
      - description: The amount to reduce the issue's remaining estimate by, as days
          (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate`
          is `manual`.
        in: query
        name: reduceBy
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          work logs in the response. This parameter accepts `properties`, which returns
          worklog properties.
        in: query
        name: expand
        schema:
          default: ''
          type: string
      - description: Whether the worklog entry should be added to the issue even if
          the issue is not editable, because jira.issue.editable set to false or missing.
          For example, the issue is closed. Only connect app users with admin scope
          permission can use this flag.
        in: query
        name: overrideEditableFlag
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            example:
              comment:
                content:
                - content:
                  - text: I did some work here.
                    type: text
                  type: paragraph
                type: doc
                version: 1
              started: 2020-03-04T06:50:30.740+0000
              timeSpentSeconds: 12000
              visibility:
                type: group
                value: jira-developers
            schema:
              $ref: '#/components/schemas/Worklog'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklog'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate`\
            \ is not provided or is invalid.\n *  `adjustEstimate` is set to `manual`\
            \ but `reduceBy` is not provided or is invalid.\n *  the user does not\
            \ have permission to add the worklog.\n *  the request JSON is malformed."
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the issue is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Add worklog
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/worklog/{id}:
    delete:
      deprecated: false
      description: "Deletes a worklog from an issue.\n\nTime tracking must be enabled\
        \ in Jira, otherwise this operation returns an error. For more information,\
        \ see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Delete\
        \ all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to delete any worklog or *Delete own worklogs* to delete worklogs created\
        \ by the user,\n *  If the worklog has visibility restrictions, belongs to\
        \ the group or has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.deleteWorklog_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Whether users watching the issue are notified by email.
        in: query
        name: notifyUsers
        schema:
          default: true
          type: boolean
      - description: "Defines how to update the issue's time estimate, the options\
          \ are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n\
          \ *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the\
          \ estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the\
          \ estimate by the value of `timeSpent` in the worklog."
        in: query
        name: adjustEstimate
        schema:
          default: auto
          enum:
          - new
          - leave
          - manual
          - auto
          type: string
      - description: The value to set as the issue's remaining time estimate, as days
          (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required
          when `adjustEstimate` is `new`.
        in: query
        name: newEstimate
        schema:
          type: string
      - description: The amount to increase the issue's remaining estimate by, as
          days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required
          when `adjustEstimate` is `manual`.
        in: query
        name: increaseBy
        schema:
          type: string
      - description: Whether the work log entry should be added to the issue even
          if the issue is not editable, because jira.issue.editable set to false or
          missing. For example, the issue is closed. Only connect app users with admin
          permissions can use this flag.
        in: query
        name: overrideEditableFlag
        schema:
          default: false
          type: boolean
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate`\
            \ is not provided or is invalid.\n *  `adjustEstimate` is set to `manual`\
            \ but `reduceBy` is not provided or is invalid.\n *  the user does not\
            \ have permission to delete the worklog."
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: "Returned if:\n\n *  the issue is not found or user does not\
            \ have permission to view the issue.\n *  the worklog is not found or\
            \ the user does not have permission to view it.\n *  time tracking is\
            \ disabled."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete worklog
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns a worklog.\n\nTime tracking must be enabled in Jira, otherwise\
        \ this operation returns an error. For more information, see [Configuring\
        \ time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the worklog has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.getWorklog_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'Use [expand](#expansion) to include additional information about
          work logs in the response. This parameter accepts


          `properties`, which returns worklog properties.'
        in: query
        name: expand
        schema:
          default: ''
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}'
              schema:
                $ref: '#/components/schemas/Worklog'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: "Returned if:\n\n *  the issue is not found or the user does\
            \ not have permission to view it.\n *  the worklog is not found or the\
            \ user does not have permission to view it.\n *  time tracking is disabled.\n\
            \n."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get worklog
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Updates a worklog.\n\nTime tracking must be enabled in Jira, otherwise\
        \ this operation returns an error. For more information, see [Configuring\
        \ time tracking](https://confluence.atlassian.com/x/qoXKM).\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Edit\
        \ all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to update any worklog or *Edit own worklogs* to update worklogs created\
        \ by the user.\n *  If the worklog has visibility restrictions, belongs to\
        \ the group or has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.IssueWorklogsResource.updateWorklog_put
      parameters:
      - description: The ID or key the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Whether users watching the issue are notified by email.
        in: query
        name: notifyUsers
        schema:
          default: true
          type: boolean
      - description: "Defines how to update the issue's time estimate, the options\
          \ are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n\
          \ *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate\
          \ by the difference between the original and updated value of `timeSpent`\
          \ or `timeSpentSeconds`."
        in: query
        name: adjustEstimate
        schema:
          default: auto
          enum:
          - new
          - leave
          - manual
          - auto
          type: string
      - description: The value to set as the issue's remaining time estimate, as days
          (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required
          when `adjustEstimate` is `new`.
        in: query
        name: newEstimate
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information about
          worklogs in the response. This parameter accepts `properties`, which returns
          worklog properties.
        in: query
        name: expand
        schema:
          default: ''
          type: string
      - description: Whether the worklog should be added to the issue even if the
          issue is not editable. For example, because the issue is closed. Only connect
          app users with admin permissions can use this flag.
        in: query
        name: overrideEditableFlag
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            example:
              comment:
                content:
                - content:
                  - text: I did some work here.
                    type: text
                  type: paragraph
                type: doc
                version: 1
              started: 2020-03-04T06:50:30.740+0000
              timeSpentSeconds: 12000
              visibility:
                type: group
                value: jira-developers
            schema:
              $ref: '#/components/schemas/Worklog'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}'
              schema:
                $ref: '#/components/schemas/Worklog'
          description: Returned if the request is successful
        '400':
          description: "Returned if:\n\n *  `adjustEstimate` is set to `new` but `newEstimate`\
            \ is not provided or is invalid.\n *  the user does not have permission\
            \ to update the worklog.\n *  the request JSON is malformed."
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: "Returned if:\n\n *  the issue is not found or user does not\
            \ have permission to view the issue.\n *  the worklog is not found or\
            \ the user does not have permission to view it.\n *  time tracking is\
            \ disabled."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Update worklog
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties:
    get:
      deprecated: false
      description: "Returns the keys of all properties for a worklog.\n\nThis operation\
        \ can be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the worklog has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.WorklogPropertyResource.getWorklogPropertyKeys_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: worklogId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '400':
          description: Returned if the worklog ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the issue or worklog is not found.\n *\
            \  the user does not have permission to view the issue or worklog."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get worklog property keys
      tags:
      - Issue worklog properties
      x-atlassian-connect-scope: READ
  /rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: "Deletes a worklog property.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:**\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the worklog has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.WorklogPropertyResource.deleteWorklogProperty_delete
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: worklogId
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the worklog property is removed.
        '400':
          description: Returned if the worklog key or id is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to edit the worklog.
        '404':
          description: "Returned if:\n\n *  the issue, worklog, or property is not\
            \ found.\n *  the user does not have permission to view the issue or worklog."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete worklog property
      tags:
      - Issue worklog properties
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the value of a worklog property.\n\nThis operation can\
        \ be accessed anonymously.\n\n**[Permissions](#permissions) required:**\n\n\
        \ *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  If\
        \ the worklog has visibility restrictions, belongs to the group or has the\
        \ role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.WorklogPropertyResource.getWorklogProperty_get
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: worklogId
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if the worklog ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the issue, worklog, or property is not\
            \ found.\n *  the user does not have permission to view the issue or worklog."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get worklog property
      tags:
      - Issue worklog properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Sets the value of a worklog property. Use this operation to store\
        \ custom data against the worklog.\n\nThe value of the request body must be\
        \ a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The\
        \ maximum length is 32768 characters.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project that\
        \ the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue.\n *  *Edit\
        \ all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to update any worklog or *Edit own worklogs* to update worklogs created\
        \ by the user.\n *  If the worklog has visibility restrictions, belongs to\
        \ the group or has the role visibility is restricted to."
      operationId: com.atlassian.jira.rest.v2.issue.WorklogPropertyResource.setWorklogProperty_put
      parameters:
      - description: The ID or key of the issue.
        in: path
        name: issueIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the worklog.
        in: path
        name: worklogId
        required: true
        schema:
          type: string
      - description: The key of the issue property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the worklog property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the worklog property is created.
        '400':
          description: Returned if the worklog ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to edit the worklog.
        '404':
          description: "Returned if:\n\n *  the issue or worklog is not found.\n *\
            \  the user does not have permission to view the issue or worklog."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Set worklog property
      tags:
      - Issue worklog properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issueLink:
    post:
      deprecated: false
      description: "Creates a link between two issues. Use this operation to indicate\
        \ a relationship between two issues and optionally add a comment to the from\
        \ (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM)\
        \ enabled.\n\nThis resource returns nothing on the creation of an issue link.\
        \ To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked\
        \ issue key]?fields=issuelinks`.\n\nIf the link request duplicates a link,\
        \ the response indicates that the issue link was created. If the request included\
        \ a comment, the comment is added.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for all the projects\
        \ containing the issues to be linked,\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ on the project containing the from (outward) issue,\n *  If [issue-level\
        \ security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level\
        \ security permission to view the issue.\n *  If the comment has visibility\
        \ restrictions, belongs to the group or has the role visibility is restricted\
        \ to."
      operationId: com.atlassian.jira.rest.v2.issue.LinkIssueResource.linkIssues_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              comment:
                body:
                  content:
                  - content:
                    - text: Linked related issue!
                      type: text
                    type: paragraph
                  type: doc
                  version: 1
                visibility:
                  type: group
                  value: jira-software-users
              inwardIssue:
                key: HSP-1
              outwardIssue:
                key: MKY-1
              type:
                name: Duplicate
            schema:
              $ref: '#/components/schemas/LinkIssueRequestJsonBean'
        description: The issue link request.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if the comment is not created. The response contains
            an error message indicating why the comment wasn't created. The issue
            link is also not created.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the user\
            \ cannot view one or both of the issues. For example, the user doesn't\
            \ have *Browse project* project permission for a project containing one\
            \ of the issues.\n *  the user does not have *link issues* project permission.\n\
            \ *  either of the link issues are not found.\n *  the issue link type\
            \ is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Create issue link
      tags:
      - Issue links
      x-atlassian-connect-scope: WRITE
  /rest/api/3/issueLink/{linkId}:
    delete:
      deprecated: false
      description: "Deletes an issue link.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  Browse project [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for all the projects\
        \ containing the issues in the link.\n *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for at least one of the projects containing issues in the link.\n *  If\
        \ [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured,\
        \ permission to view both of the issues."
      operationId: com.atlassian.jira.rest.v2.issue.LinkIssueResource.deleteIssueLink_delete
      parameters:
      - description: The ID of the issue link.
        in: path
        name: linkId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 200 response
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue link ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link is not found.\n *  the user doesn't have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      - {}
      summary: Delete issue link
      tags:
      - Issue links
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns an issue link.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Browse project* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for all the projects\
        \ containing the linked issues.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, permission to view both of the issues."
      operationId: com.atlassian.jira.rest.v2.issue.LinkIssueResource.getIssueLink_get
      parameters:
      - description: The ID of the issue link.
        in: path
        name: linkId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"10001","type":{"id":"1000","name":"Duplicate","inward":"Duplicated
                by","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"},"inwardIssue":{"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"self":"https://your-domain.atlassian.net/rest/api/3/status/5","description":"The
                issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","name":"Closed","id":"5","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9","id":9,"key":"completed","colorName":"green"}},"priority":{"self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf","description":"Very
                little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","name":"Trivial","id":"2"},"issuetype":{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}}},"outwardIssue":{"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"self":"https://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}},"priority":{"self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900","description":"Major
                loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","name":"Major","id":"1"},"issuetype":{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1}}}}'
              schema:
                $ref: '#/components/schemas/IssueLink'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue link ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link is not found.\n *  the user doesn't have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue link
      tags:
      - Issue links
      x-atlassian-connect-scope: READ
  /rest/api/3/issueLinkType:
    get:
      deprecated: false
      description: 'Returns a list of all issue link types.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
        enabled.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for a project in the site.'
      operationId: com.atlassian.jira.rest.v2.issue.IssueLinkTypeResource.getIssueLinkTypes_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"issueLinkTypes":[{"id":"1000","name":"Duplicate","inward":"Duplicated
                by","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"},{"id":"1010","name":"Blocks","inward":"Blocked
                by","outward":"Blocks","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1010"}]}'
              schema:
                $ref: '#/components/schemas/IssueLinkTypes'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if issue linking is disabled.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue link types
      tags:
      - Issue link types
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Creates an issue link type. Use this operation to create descriptions
        of the reasons why issues are linked. The issue link type consists of a name
        and descriptions for a link''s inward and outward relationships.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
        enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueLinkTypeResource.createIssueLinkType_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              inward: Duplicated by
              name: Duplicate
              outward: Duplicates
            schema:
              $ref: '#/components/schemas/IssueLinkType'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"1000","name":"Duplicate","inward":"Duplicated by","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}'
              schema:
                $ref: '#/components/schemas/IssueLinkType'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link type name is in use.\n *  the user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Create issue link type
      tags:
      - Issue link types
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issueLinkType/{issueLinkTypeId}:
    delete:
      deprecated: false
      description: 'Deletes an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
        enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueLinkTypeResource.deleteIssueLinkType_delete
      parameters:
      - description: The ID of the issue link type.
        in: path
        name: issueLinkTypeId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue link type ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link type is not found.\n *  the user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Delete issue link type
      tags:
      - Issue link types
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
        enabled.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for a project in the site.'
      operationId: com.atlassian.jira.rest.v2.issue.IssueLinkTypeResource.getIssueLinkType_get
      parameters:
      - description: The ID of the issue link type.
        in: path
        name: issueLinkTypeId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"1000","name":"Duplicate","inward":"Duplicated by","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}'
              schema:
                $ref: '#/components/schemas/IssueLinkType'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue link type ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link type is not found.\n *  the user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue link type
      tags:
      - Issue link types
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates an issue link type.


        To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
        enabled.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueLinkTypeResource.updateIssueLinkType_put
      parameters:
      - description: The ID of the issue link type.
        in: path
        name: issueLinkTypeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              inward: Duplicated by
              name: Duplicate
              outward: Duplicates
            schema:
              $ref: '#/components/schemas/IssueLinkType'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"1000","name":"Duplicate","inward":"Duplicated by","outward":"Duplicates","self":"https://your-domain.atlassian.net/rest/api/3/issueLinkType/1000"}'
              schema:
                $ref: '#/components/schemas/IssueLinkType'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue link type ID or the request body are
            invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  issue linking is disabled.\n *  the issue\
            \ link type is not found.\n *  the user does not have the required permissions."
      security:
      - basicAuth: []
      - {}
      summary: Update issue link type
      tags:
      - Issue link types
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issuesecurityschemes:
    get:
      deprecated: false
      description: 'Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueSecuritySchemeResource.getIssueSecuritySchemes_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"issueSecuritySchemes":[{"self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000","id":10000,"name":"Default
                Issue Security Scheme","description":"Description for the default
                issue security scheme","defaultSecurityLevelId":10021}]}'
              schema:
                $ref: '#/components/schemas/SecuritySchemes'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to administer
            issue security schemes.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get issue security schemes
      tags:
      - Issue security schemes
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/issuesecurityschemes/{id}:
    get:
      deprecated: false
      description: "Returns an issue security scheme along with its security levels.\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \ *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for a project that uses the requested issue security scheme."
      operationId: com.atlassian.jira.rest.v2.issue.IssueSecuritySchemeResource.getIssueSecurityScheme_get
      parameters:
      - description: The ID of the issue security scheme. Use the [Get issue security
          schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list
          of issue security scheme IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000","id":10000,"name":"Default
                Issue Security Scheme","description":"Description for the default
                issue security scheme","defaultSecurityLevelId":10021,"levels":[{"self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021","id":"10021","description":"Only
                the reporter and internal staff can see this issue.","name":"Reporter
                Only"}]}'
              schema:
                $ref: '#/components/schemas/SecurityScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the administrator permission
            and the scheme is not used in any project where the user has administrative
            permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get issue security scheme
      tags:
      - Issue security schemes
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/issuetype:
    get:
      deprecated: false
      description: "Returns all issue types.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:** Issue types are only returned\
        \ as follows:\n\n *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ all issue types are returned.\n *  if the user has the *Browse projects*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for one\
        \ or more projects, the issue types associated with the projects the user\
        \ has permission to browse are returned."
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.getIssueAllTypes_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}]'
              schema:
                items:
                  $ref: '#/components/schemas/IssueTypeDetails'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all issue types for user
      tags:
      - Issue types
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Creates an issue type and adds it to the default issue type scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.createIssueType_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: description
              name: name
              type: standard
            schema:
              $ref: '#/components/schemas/IssueTypeCreateBean'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTypeDetails'
          description: Returned if the request is successful.
        '400':
          description: "Returned if the request is invalid because:\n\n *  no content\
            \ is sent.\n *  the issue type name exceeds 60 characters.\n *  a subtask\
            \ issue type is requested on an instance where subtasks are disabled."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '409':
          description: Returned if the issue type name is in use.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Create issue type
      tags:
      - Issue types
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issuetype/{id}:
    delete:
      deprecated: false
      description: 'Deletes the issue type. If the issue type is in use, all uses
        are updated with the alternative issue type (`alternativeIssueTypeId`). A
        list of alternative issue types are obtained from the [Get alternative issue
        types](#api-rest-api-3-issuetype-id-alternatives-get) resource.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.deleteIssueType_delete
      parameters:
      - description: The ID of the issue type.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the replacement issue type.
        in: query
        name: alternativeIssueTypeId
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if any issues cannot be updated with the alternative
            issue type.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the issue type is in use and an alternative\
            \ issue type is not specified.\n *  the issue type or alternative issue\
            \ type is not found."
        '409':
          description: "Returned if the issue type is in use and:\n\n *  also specified\
            \ as the alternative issue type.\n *  is a *standard* issue type and the\
            \ alternative issue type is a *subtask*."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Delete issue type
      tags:
      - Issue types
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns an issue type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        in a project the issue type is associated with or *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.getIssueType_get
      parameters:
      - description: The ID of the issue type.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1}'
              schema:
                $ref: '#/components/schemas/IssueTypeDetails'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue type ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the issue type is not found.\n *  the\
            \ user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue type
      tags:
      - Issue types
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates the issue type.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.updateIssueType_put
      parameters:
      - description: The ID of the issue type.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              avatarId: 1
              description: description
              name: name
            schema:
              $ref: '#/components/schemas/IssueTypeUpdateBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTypeDetails'
          description: Returned if the request is successful.
        '400':
          description: "Returned if the request is invalid because:\n\n *  no content\
            \ is sent.\n *  the issue type name exceeds 60 characters.\n *  the avatar\
            \ is not associated with this issue type."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the issue type is not found.
        '409':
          description: Returned if the issue type name is in use.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Update issue type
      tags:
      - Issue types
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issuetype/{id}/alternatives:
    get:
      deprecated: false
      description: 'Returns a list of issue types that can be used to replace the
        issue type. The alternative issue types are those assigned to the same workflow
        scheme, field configuration scheme, and screen scheme.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.getAlternativeIssueTypes_get
      parameters:
      - description: The ID of the issue type.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}]'
              schema:
                items:
                  $ref: '#/components/schemas/IssueTypeDetails'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the issue type is not found.\n *  the\
            \ user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get alternative issue types
      tags:
      - Issue types
      x-atlassian-connect-scope: READ
  /rest/api/3/issuetype/{id}/avatar2:
    post:
      deprecated: false
      description: "Loads an avatar for the issue type.\n\nSpecify the avatar's local\
        \ file location in the body of the request. Also, include the following headers:\n\
        \n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the\
        \ request, for more information see [Special Headers](#special-request-headers).\n\
        \ *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or\
        \ PNG.\n\nFor example:  \n`curl --request POST \\ --user email@example.com:<api_token>\
        \ \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/<\
        \ image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url\
        \ 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`\n\
        \nThe avatar is cropped to a square. If no crop parameters are specified,\
        \ the square originates at the top left of the image. The length of the square's\
        \ sides is set to the smaller of the height or width of the image.\n\nThe\
        \ cropped image is then used to create avatars of 16x16, 24x24, 32x32, and\
        \ 48x48 in size.\n\nAfter creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put)\
        \ to set it as the issue type's displayed avatar.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypeResource.createIssueTypeAvatar_post
      parameters:
      - description: The ID of the issue type.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The X coordinate of the top-left corner of the crop region.
        in: query
        name: x
        schema:
          default: 0
          format: int32
          type: integer
      - description: The Y coordinate of the top-left corner of the crop region.
        in: query
        name: y
        schema:
          default: 0
          format: int32
          type: integer
      - description: The length of each side of the crop region.
        in: query
        name: size
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          '*/*':
            schema: {}
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"1000","isSystemAvatar":true,"isSelected":false,"isDeletable":false,"urls":{"16x16":"/secure/useravatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"/secure/useravatar?size=small&avatarId=10040&avatarType=project","32x32":"/secure/useravatar?size=medium&avatarId=10040&avatarType=project","48x48":"/secure/useravatar?avatarId=10040&avatarType=project"}}'
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  an image isn't included in the request.\n\
            \ *  the image type is unsupported.\n *  the crop parameters extend the\
            \ crop area beyond the edge of the image.\n *  `cropSize` is missing.\n\
            \ *  the issue type ID is invalid."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the issue type is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Load issue type avatar
      tags:
      - Issue types
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issuetype/{issueTypeId}/properties:
    get:
      deprecated: false
      description: "Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)\
        \ keys of the issue type.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global\
        \ permission](https://confluence.atlassian.com/x/x4dKLg) to get the property\
        \ keys of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to get the property keys of any issue types associated with the projects\
        \ the user has permission to browse."
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypePropertyResource.getIssueTypePropertyKeys_get
      parameters:
      - description: The ID of the issue type.
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue type ID is invalid.
        '404':
          description: "Returned if:\n\n *  the issue type is not found.\n *  the\
            \ user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue type property keys
      tags:
      - Issue type properties
      x-atlassian-connect-scope: READ
  /rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: 'Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypePropertyResource.deleteIssueTypeProperty_delete
      parameters:
      - description: The ID of the issue type.
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      - description: The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get)
          to get a list of all issue type property keys.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the issue type property is deleted.
        '400':
          description: Returned if the issue type ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the issue type or property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Delete issue type property
      tags:
      - Issue type properties
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: "Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).\n\
        \nThis operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)\
        \ to get the details of any issue type.\n *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ to get the details of any issue types associated with the projects the user\
        \ has permission to browse."
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypePropertyResource.getIssueTypeProperty_get
      parameters:
      - description: The ID of the issue type.
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      - description: The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get)
          to get a list of all issue type property keys.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if the issue type ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue type or property is not found or the
            user does not have the required permissions.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get issue type property
      tags:
      - Issue type properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        Use this resource to store and update data against an issue type.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627),
        non-empty JSON blob. The maximum length is 32768 characters.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.IssueTypePropertyResource.setIssueTypeProperty_put
      parameters:
      - description: The ID of the issue type.
        in: path
        name: issueTypeId
        required: true
        schema:
          type: string
      - description: The key of the issue type property. The maximum length is 255
          characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              number: 5
              string: string-value
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the issue type property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the issue type property is created.
        '400':
          description: "Returned if:\n\n *  the issue type ID is invalid.\n *  a property\
            \ value is not provided.\n *  the property value JSON content is invalid."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to modify the
            issue type.
        '404':
          description: "Returned if:\n\n *  the issue type is not found.\n *  the\
            \ user does not have the permission view the issue type."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Set issue type property
      tags:
      - Issue type properties
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/issuetypescreenscheme/mapping:
    get:
      deprecated: false
      description: 'Returns a list of issue type screen scheme items.


        Only issue type screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.issuetypescreenscheme.IssueTypeScreenSchemeResource.getIssueTypeScreenSchemeMappings_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: 'The list of issue type screen scheme IDs. To include multiple
          issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.'
        in: query
        name: issueTypeScreenSchemeId
        schema:
          items:
            format: int64
            type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":100,"startAt":0,"total":4,"isLast":true,"values":[{"issueTypeScreenSchemeId":"10020","issueTypeId":"10000","screenSchemeId":"10010"},{"issueTypeScreenSchemeId":"10021","issueTypeId":"10001","screenSchemeId":"10010"},{"issueTypeScreenSchemeId":"10022","issueTypeId":"10002","screenSchemeId":"10010"},{"issueTypeScreenSchemeId":"10023","issueTypeId":"default","screenSchemeId":"10011"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemeItem'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the required permissions.
      security:
      - basicAuth: []
      summary: Get issue type screen scheme items
      tags:
      - Screens
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/issuetypescreenscheme/project:
    get:
      deprecated: false
      description: 'Returns a list of issue type screen schemes and, for each issue
        type screen scheme, a list of the projects that use it.


        Only issue type screen schemes used in classic projects are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.issuetypescreenscheme.IssueTypeScreenSchemeResource.getIssueTypeScreenSchemeProjectAssociations_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: 'The list of project IDs. To include multiple projects, separate
          IDs with ampersand: `projectId=10000&projectId=10001`.'
        in: query
        name: projectId
        schema:
          items:
            format: int64
            type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":100,"startAt":0,"total":1,"isLast":true,"values":[{"issueTypeScreenScheme":{"id":"1","name":"Default
                Issue Type Screen Scheme","description":"The default issue type screen
                scheme"},"projectIds":["10000","10001"]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanIssueTypeScreenSchemesProjects'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the required permissions.
      security:
      - basicAuth: []
      summary: Get issue type screen schemes for projects
      tags:
      - Screens
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/jql/autocompletedata:
    get:
      deprecated: false
      description: 'Returns reference data for JQL searches. This is a downloadable
        version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ)
        and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ),
        along with a list of JQL-reserved words. Use this information to assist with
        the programmatic creation of JQL queries or the validation of queries built
        in a custom query builder.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.search.SearchAutoCompleteResource.getAutoComplete_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"visibleFieldNames":[{"value":"summary","displayName":"summary","orderable":"true","searchable":"true","operators":["~","!~","is","is
                not"],"types":["java.lang.String"]},{"value":"Sprint","displayName":"Sprint
                - cf[10880]","orderable":"true","searchable":"true","auto":"true","cfid":"cf[10880]","operators":["=","!=","in","not
                in","is","is not"],"types":["com.atlassian.greenhopper.service.sprint.Sprint"]}],"visibleFunctionNames":[{"value":"standardIssueTypes()","displayName":"standardIssueTypes()","isList":"true","types":["com.atlassian.jira.issue.issuetype.IssueType"]}],"jqlReservedWords":["empty","and","or","in","distinct"]}'
              schema:
                $ref: '#/components/schemas/JQLReferenceData'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get field reference data
      tags:
      - JQL
      x-atlassian-connect-scope: READ
  /rest/api/3/jql/autocompletedata/suggestions:
    get:
      deprecated: false
      description: "Returns the JQL search auto complete suggestions for a field.\n\
        \nSuggestions can be obtained by providing:\n\n *  `fieldName` to get a list\
        \ of all values for the field.\n *  `fieldName` and `fieldValue` to get a\
        \ list of values containing the text in `fieldValue`.\n *  `fieldName` and\
        \ `predicateName` to get a list of all predicate values for the field.\n *\
        \  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate\
        \ values containing the text in `predicateValue`.\n\nThis operation can be\
        \ accessed anonymously.\n\n**[Permissions](#permissions) required:** None."
      operationId: com.atlassian.jira.rest.v2.search.SearchAutoCompleteResource.getFieldAutoCompleteForQueryString_get
      parameters:
      - description: The name of the field.
        in: query
        name: fieldName
        schema:
          example: reporter
          type: string
        x-showInExample: 'true'
      - description: The partial field item name entered by the user.
        in: query
        name: fieldValue
        schema:
          type: string
      - description: The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED)
          for which the suggestions are generated. The valid predicate operators are
          *by*, *from*, and *to*.
        in: query
        name: predicateName
        schema:
          type: string
      - description: The partial predicate item name entered by the user.
        in: query
        name: predicateValue
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"results":[{"value":"ActiveObjects","displayName":"<b>Ac</b>tiveObjects
                (AO)"},{"value":"Atlassian Connect","displayName":"Atlassian Connect
                (<b>AC</b>)"},{"value":"Atlassian Connect in Jira","displayName":"Atlassian
                Connect in Jira (<b>AC</b>JIRA)"}]}'
              schema:
                $ref: '#/components/schemas/AutoCompleteSuggestions'
          description: Returned if the request is successful.
        '400':
          description: Returned if an invalid combination of parameters is passed.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get field auto complete suggestions
      tags:
      - JQL
      x-atlassian-connect-scope: READ
  /rest/api/3/jql/match:
    post:
      deprecated: false
      description: "Checks whether one or more issues would be returned by one or\
        \ more JQL queries.\n\n**[Permissions](#permissions) required:** None, however,\
        \ issues are only matched against JQL queries where the user has:\n\n *  *Browse\
        \ projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project that the issue is in.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.match.IssueMatchResource.matchIssues_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              issueIds:
              - 10001
              - 1000
              - 10042
              jqls:
              - project = FOO
              - issuetype = Bug
              - summary ~ "some text" AND project in (FOO, BAR)
            schema:
              $ref: '#/components/schemas/IssuesAndJQLQueries'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"matches":[{"matchedIssues":[10000,10004],"errors":[]},{"matchedIssues":[100134,10025,10236],"errors":[]},{"matchedIssues":[],"errors":[]},{"matchedIssues":[],"errors":["Invalid
                JQL: broken = value"]}]}'
              schema:
                $ref: '#/components/schemas/IssueMatches'
          description: Returned if the request is successful.
        '400':
          description: Returned if `jqls` exceeds the maximum number of JQL queries
            or `issueIds` exceeds the maximum number of issue IDs.
      security:
      - basicAuth: []
      summary: Check issues against JQL
      tags:
      - Issue search
      x-atlassian-connect-scope: READ
  /rest/api/3/jql/parse:
    post:
      deprecated: false
      description: 'Parses and validates JQL queries.


        Validation is performed in context of the current user.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.jql.JqlParserResource.parseJqlQueries_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              queries:
              - summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy
                = currentUser()) AND status CHANGED AFTER startOfMonth(-1M) ORDER
                BY updated DESC
              - invalid query
              - summary = test
              - summary in test
              - project = INVALID
              - universe = 42
            schema:
              $ref: '#/components/schemas/JqlQueriesToParse'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"queries":[{"query":"summary ~ test AND (labels in (urgent,
                blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER
                -5d ORDER BY updated DESC","structure":{"where":{"clauses":[{"field":{"name":"summary"},"operator":"~","operand":{"value":"test"}},{"clauses":[{"field":{"name":"labels"},"operator":"in","operand":{"values":[{"value":"urgent"},{"value":"blocker"}]}},{"field":{"name":"lastCommentedBy","property":[{"entity":"issue","key":"propertyKey","path":"path.in.property","type":"user"}]},"operator":"=","operand":{"function":"currentUser","arguments":[]}}],"operator":"or"},{"field":{"name":"status"},"operator":"changed","predicates":[{"operator":"after","operand":{"function":"startOfMonth","arguments":["-1M"]}}]}],"operator":"and"},"orderBy":{"fields":[{"field":{"name":"updated"},"direction":"desc"}]}}},{"query":"invalid
                query","errors":["Error in the JQL Query: Expecting operator but got
                ''query''. The valid operators are ''='', ''!='', ''<'', ''>'', ''<='',
                ''>='', ''~'', ''!~'', ''IN'', ''NOT IN'', ''IS'' and ''IS NOT''.
                (line 1, character 9)"]},{"query":"summary = test","errors":["The
                operator ''='' is not supported by the ''summary'' field."]},{"query":"summary
                in test","errors":["Operator ''in'' does not support the non-list
                value ''\"test\"'' for field ''summary''."]},{"query":"project = INVALID","errors":["The
                value ''INVALID'' does not exist for the field ''project''."]},{"query":"universe
                = 42","errors":["Field ''universe'' does not exist or you do not have
                permission to view it."]}]}'
              schema:
                $ref: '#/components/schemas/ParsedJqlQueries'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Parse JQL query
      tags:
      - JQL
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/jql/pdcleaner:
    post:
      deprecated: false
      description: 'Converts one or more JQL queries with user identifiers (username
        or user key) to equivalent JQL queries with account IDs.


        You may wish to use this operation if your system stores JQL queries and you
        want to make them GDPR-compliant. For more information about GDPR-related
        changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.search.JQLPersonalDataMigrationResource.migrateQueries_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              queryStrings:
              - assignee = mia
              - issuetype = Bug AND assignee in (mia) AND reporter in (alana) order
                by lastViewed DESC
            schema:
              $ref: '#/components/schemas/JQLPersonalDataMigrationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"queryStrings":["issuetype = Bug AND assignee in (abcde-12345)
                AND reporter in (abc551-c4e99) order by lastViewed DESC"],"queriesWithUnknownUsers":[{"originalQuery":"assignee
                = mia","convertedQuery":"assignee = unknown"}]}'
              schema:
                $ref: '#/components/schemas/ConvertedJQLQueries'
          description: Returned if the request is successful. Note that the JQL queries
            are returned in the same order that they were passed.
        '400':
          description: Returned if at least one of the queries cannot be converted.
            For example, the JQL has invalid operators or invalid keywords, or the
            users in the query cannot be found.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Convert user identifiers to account IDs in JQL queries
      tags:
      - JQL
      x-atlassian-connect-scope: READ
  /rest/api/3/label:
    get:
      deprecated: false
      description: Returns a [paginated](#pagination) list of labels.
      operationId: com.atlassian.jira.rest.v2.label.LabelResource.getAllLabels_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 1000
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":2,"startAt":0,"total":100,"isLast":false,"values":["performance","security"]}'
              schema:
                $ref: '#/components/schemas/PageBeanString'
          description: Returned if the request is successful.
      security:
      - basicAuth: []
      summary: Get all labels
      tags:
      - Labels
      x-atlassian-connect-scope: READ
  /rest/api/3/mypermissions:
    get:
      deprecated: false
      description: "Returns a list of permissions indicating which permissions the\
        \ user has. Details of the user's permissions can be obtained in a global,\
        \ project, or issue context.\n\nThe user is reported as having a project permission:\n\
        \n *  in the global context, if the user has the project permission in any\
        \ project.\n *  for a project, where the project permission is determined\
        \ using issue data, if the user meets the permission's criteria for any issue\
        \ in the project. Otherwise, if the user has the project permission in the\
        \ project.\n *  for an issue, where a project permission is determined using\
        \ issue data, if the user has the permission in the issue. Otherwise, if the\
        \ user has the project permission in the project containing the issue.\n\n\
        This means that users may be shown as having an issue permission (such as\
        \ EDIT\\_ISSUE) in the global context or a project context but may not have\
        \ the permission for any or all issues. For example, if Reporters have the\
        \ EDIT\\_ISSUE permission a user would be shown as having this permission\
        \ in the global context or the context of a project, because any user can\
        \ be a reporter. However, if they are not the user who reported the issue\
        \ queried they would not have EDIT\\_ISSUE permission for that issue.\n\n\
        Global permissions are unaffected by context.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:** None."
      operationId: com.atlassian.jira.rest.v2.permission.PermissionsResource.getMyPermissions_get
      parameters:
      - description: The key of project. Ignored if `projectId` is provided.
        in: query
        name: projectKey
        schema:
          type: string
      - description: The ID of project.
        in: query
        name: projectId
        schema:
          type: string
      - description: The key of the issue. Ignored if `issueId` is provided.
        in: query
        name: issueKey
        schema:
          type: string
      - description: The ID of the issue.
        in: query
        name: issueId
        schema:
          type: string
      - description: A list of permission keys. This parameter accepts a comma-separated
          list. [ Omitting this parameter is **deprecated**.](https://developer.atlassian.com/cloud/jira/platform/change-notice-get-my-permissions-requires-permissions-query-parameter/)
          To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).
          Note that deprecated keys cannot be used. Deprecated keys are not returned
          by [Get all permissions](#api-rest-api-3-permissions-get) but are returned
          by this operation if `permissions` is omitted.
        in: query
        name: permissions
        schema:
          example: BROWSE_PROJECTS,EDIT_ISSUES
          type: string
        x-changes:
        - announced: '2018-08-01T00:00:00.000Z'
          details: https://developer.atlassian.com/cloud/jira/platform/change-notice-get-my-permissions-requires-permissions-query-parameter/
          effective: '2019-02-01T00:00:00.000Z'
          type: required
        x-showInExample: 'true'
      - in: query
        name: projectUuid
        schema:
          type: string
      - in: query
        name: projectConfigurationUuid
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"permissions":{"EDIT_ISSUE":{"id":"12","key":"EDIT_ISSUES","name":"Edit
                Issues","type":"PROJECT","description":"Ability to edit issues.","havePermission":true}}}'
              schema:
                $ref: '#/components/schemas/Permissions'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if `permissions` is empty or the permission key it
            contains is not found or deprecated.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the project or issue is not found or the user does
            not have permission to view the project or issue.
      security:
      - basicAuth: []
      - OAuth2: []
      - {}
      summary: Get my permissions
      tags:
      - Permissions
      x-atlassian-connect-scope: READ
  /rest/api/3/mypreferences:
    delete:
      deprecated: false
      description: "Deletes a preference of the user, which restores the default value\
        \ of system defined settings.\n\nNote that these keys are deprecated:\n\n\
        \ *  *jira.user.locale* The locale of the user. By default, not set. The user\
        \ takes the instance locale.\n *  *jira.user.timezone* The time zone of the\
        \ user. By default, not set. The user takes the instance timezone.\n\nUse\
        \ [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)\
        \ from the user management REST API to manage timezone and locale instead.\n\
        \n**[Permissions](#permissions) required:** Permission to access Jira."
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.removePreference_delete
      parameters:
      - description: The key of the preference.
        in: query
        name: key
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the key is not provided or not found.
      security:
      - basicAuth: []
      summary: Delete preference
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: "Returns the value of a preference of the current user.\n\nNote\
        \ that these keys are deprecated:\n\n *  *jira.user.locale* The locale of\
        \ the user. By default this is not set and the user takes the locale of the\
        \ instance.\n *  *jira.user.timezone* The time zone of the user. By default\
        \ this is not set and the user takes the timezone of the instance.\n\nUse\
        \ [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)\
        \ from the user management REST API to manage timezone and locale instead.\n\
        \n**[Permissions](#permissions) required:** Permission to access Jira."
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.getPreference_get
      parameters:
      - description: The key of the preference.
        in: query
        name: key
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the key is not provided or not found.
      security:
      - basicAuth: []
      summary: Get preference
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: "Creates a preference for the user or updates a preference's value\
        \ by sending a plain text string. For example, `false`. An arbitrary preference\
        \ can be created with the value containing up to 255 characters. In addition,\
        \ the following keys define system preferences that can be set or created:\n\
        \n *  *user.notifications.mimetype* The mime type used in notifications sent\
        \ to the user. Defaults to `html`.\n *  *user.notify.own.changes* Whether\
        \ the user gets notified of their own changes. Defaults to `false`.\n *  *user.default.share.private*\
        \ Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set\
        \ to private. Defaults to `true`.\n *  *user.keyboard.shortcuts.disabled*\
        \ Whether keyboard shortcuts are disabled. Defaults to `false`.\n *  *user.autowatch.disabled*\
        \ Whether the user automatically watches issues they create or add a comment\
        \ to. By default, not set: the user takes the instance autowatch setting.\n\
        \nNote that these keys are deprecated:\n\n *  *jira.user.locale* The locale\
        \ of the user. By default, not set. The user takes the instance locale.\n\
        \ *  *jira.user.timezone* The time zone of the user. By default, not set.\
        \ The user takes the instance timezone.\n\nUse [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)\
        \ from the user management REST API to manage timezone and locale instead.\n\
        \n**[Permissions](#permissions) required:** Permission to access Jira."
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.setPreference_put
      parameters:
      - description: The key of the preference. The maximum length is 255 characters.
        in: query
        name: key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: The value of the preference as a plain text string. The maximum
          length is 255 characters.
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the key or value is not provided or invalid.
      security:
      - basicAuth: []
      summary: Set preference
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/mypreferences/locale:
    delete:
      deprecated: true
      description: 'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)
        from the user management REST API instead.


        Deletes the locale of the user, which restores the default setting.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.deleteLocale_delete
      parameters: []
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      summary: Delete locale
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Returns the locale for the user.


        If the user has no language preference set (which is the default setting)
        or this resource is accessed anonymous, the browser locale detected by Jira
        is returned. Jira detects the browser locale using the *Accept-Language* header
        in the request. However, if this doesn''t match a locale available Jira, the
        site default locale is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.getLocale_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"locale":"en_US"}'
              schema:
                $ref: '#/components/schemas/Locale'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - {}
      summary: Get locale
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: true
      description: 'Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch)
        from the user management REST API instead.


        Sets the locale of the user. The locale must be one supported by the instance
        of Jira.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.preference.CurrentUserPreferencesResource.setLocale_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              locale: en_US
            schema:
              $ref: '#/components/schemas/Locale'
        description: The locale defined in a LocaleBean.
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      summary: Set locale
      tags:
      - Myself
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/myself:
    get:
      deprecated: false
      description: 'Returns details for the current user.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.CurrentUserResource.getCurrentUser_get
      parameters:
      - description: "Use [expand](#expansion) to include additional information about\
          \ user in the response. This parameter accepts a comma-separated list. Expand\
          \ options include:\n\n *  `groups` Returns all groups, including nested\
          \ groups, the user belongs to.\n *  `applicationRoles` Returns the application\
          \ roles the user is assigned to."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}'
              schema:
                $ref: '#/components/schemas/User'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Get current user
      tags:
      - Myself
      x-atlassian-connect-scope: READ
  /rest/api/3/notificationscheme:
    get:
      deprecated: false
      description: "Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg)\
        \ ordered by display name.\n\n### About notification schemes ###\n\nA notification\
        \ scheme is a list of events and recipients who will receive notifications\
        \ for those events. The list is contained within the `notificationSchemeEvents`\
        \ object and contains pairs of `events` and `notifications`:\n\n *  `event`\
        \ Identifies the type of event. The events can be [Jira system events](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents)\
        \ or [custom events](https://confluence.atlassian.com/x/AIlKLg).\n *  `notifications`\
        \ Identifies the [recipients](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-recipientsRecipients)\
        \ of notifications for each event. Recipients can be any of the following\
        \ types:\n    \n     *  `CurrentAssignee`\n     *  `Reporter`\n     *  `CurrentUser`\n\
        \     *  `ProjectLead`\n     *  `ComponentLead`\n     *  `User` (the `parameter`\
        \ is the user key)\n     *  `Group` (the `parameter` is the group name)\n\
        \     *  `ProjectRole` (the `parameter` is the project role ID)\n     *  `EmailAddress`\n\
        \     *  `AllWatchers`\n     *  `UserCustomField` (the `parameter` is the\
        \ ID of the custom field)\n     *  `GroupCustomField`(the `parameter` is the\
        \ ID of the custom field)\n\n*Note that you should allow for events without\
        \ recipients to appear in responses.*\n\n**[Permissions](#permissions) required:**\
        \ Permission to access Jira, however the user must have permission to administer\
        \ at least one project associated with a notification scheme for it to be\
        \ returned."
      operationId: com.atlassian.jira.rest.v2.notification.NotificationSchemeResource.getNotificationSchemes_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `all` Returns all expandable information.\n *  `field`\
          \ Returns information about any custom fields assigned to receive an event.\n\
          \ *  `group` Returns information about any groups assigned to receive an\
          \ event.\n *  `notificationSchemeEvents` Returns a list of event associations.\
          \ This list is returned for all expandable information.\n *  `projectRole`\
          \ Returns information about any project roles assigned to receive an event.\n\
          \ *  `user` Returns information about any users assigned to receive an event."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":6,"startAt":1,"total":5,"isLast":false,"values":[{"expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme","name":"notification
                scheme name","description":"description","notificationSchemeEvents":[{"event":{"id":1,"name":"Issue
                created","description":"Event published when an issue is created"},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]},{"event":{"id":20,"name":"Custom
                event","description":"Custom event that is published together with
                an issue created event","templateEvent":{"id":1,"name":"Issue created","description":"Event
                published when an issue is created"}},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]}]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanNotificationScheme'
          description: Returned if the request is successful. Only returns notification
            schemes that the user has permission to access. An empty list is returned
            if the user lacks permission to access all notification schemes.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get notification schemes paginated
      tags:
      - Issue notification schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/notificationscheme/{id}:
    get:
      deprecated: false
      description: 'Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg),
        including the list of events and the recipients who will receive notifications
        for those events.


        **[Permissions](#permissions) required:** Permission to access Jira, however
        the user must have permission to administer at least one project associated
        with the notification scheme.'
      operationId: com.atlassian.jira.rest.v2.notification.NotificationSchemeResource.getNotificationScheme_get
      parameters:
      - description: The ID of the notification scheme. Use [Get notification schemes
          paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification
          scheme IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `all` Returns all expandable information.\n *  `field`\
          \ Returns information about any custom fields assigned to receive an event.\n\
          \ *  `group` Returns information about any groups assigned to receive an\
          \ event.\n *  `notificationSchemeEvents` Returns a list of event associations.\
          \ This list is returned for all expandable information.\n *  `projectRole`\
          \ Returns information about any project roles assigned to receive an event.\n\
          \ *  `user` Returns information about any users assigned to receive an event."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme","name":"notification
                scheme name","description":"description","notificationSchemeEvents":[{"event":{"id":1,"name":"Issue
                created","description":"Event published when an issue is created"},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]},{"event":{"id":20,"name":"Custom
                event","description":"Custom event that is published together with
                an issue created event","templateEvent":{"id":1,"name":"Issue created","description":"Event
                published when an issue is created"}},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]}]}'
              schema:
                $ref: '#/components/schemas/NotificationScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the notification scheme is not found or the user
            does not have permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get notification scheme
      tags:
      - Issue notification schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/permissions:
    get:
      deprecated: false
      description: "Returns all permissions, including:\n\n *  global permissions.\n\
        \ *  project permissions.\n *  global permissions added by plugins.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.permission.PermissionsResource.getAllPermissions_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"permissions":{"BULK_CHANGE":{"key":"BULK_CHANGE","name":"Bulk
                Change","type":"GLOBAL","description":"Ability to modify a collection
                of issues at once. For example, resolve multiple issues in one step."}}}'
              schema:
                $ref: '#/components/schemas/Permissions'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get all permissions
      tags:
      - Permissions
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/permissions/check:
    post:
      deprecated: false
      description: "Returns:\n\n *  for a list of global permissions, the global permissions\
        \ granted to the user.\n *  for a list of project permissions and lists of\
        \ projects and issues, for each project permission a list of the projects\
        \ and issues the user can access or manipulate.\n\nNote that:\n\n *  Invalid\
        \ project and issue IDs are ignored.\n *  A maximum of 1000 projects and 1000\
        \ issues can be checked.\n\nThis operation can be accessed anonymously.\n\n\
        **[Permissions](#permissions) required:** None."
      operationId: com.atlassian.jira.rest.v2.permission.PermissionsResource.getBulkPermissions_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              globalPermissions:
              - SYSTEM_ADMIN
              projectPermissions:
              - issues:
                - 10010
                - 10011
                - 10012
                - 10013
                - 10014
                permissions:
                - EDIT_ISSUE
                projects:
                - 10001
            schema:
              $ref: '#/components/schemas/BulkPermissionsRequestBean'
        description: Details of the permissions to check.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"projectPermissions":[{"permission":"EDIT_ISSUE","issues":[10010,10013,10014],"projects":[10001]}],"globalPermissions":["SYSTEM_ADMIN"]}'
              schema:
                $ref: '#/components/schemas/BulkPermissionGrants'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":[],"errors":{"PERMISSION_123":"Unrecognized
                permission"}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: "Returned if:\n\n *  issue or project IDs are provided without\
            \ at least one project permission being provided.\n *  an invalid global\
            \ permission is provided in the global permissions list.\n *  an invalid\
            \ project permission is provided in the project permissions list.\n *\
            \  more than 1000 valid project IDs or more than 1000 valid issue IDs\
            \ are provided."
      security:
      - basicAuth: []
      - OAuth2: []
      - {}
      summary: Get bulk permissions
      tags:
      - Permissions
      x-atlassian-connect-scope: READ
  /rest/api/3/permissions/project:
    post:
      deprecated: false
      description: 'Returns all the projects where the user is granted a list of project
        permissions.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.permission.PermissionsResource.getPermittedProjects_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionsKeysBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"projects":[{"id":10000,"key":"DEMO"},{"id":10101,"key":"TEST"}]}'
              schema:
                $ref: '#/components/schemas/PermittedProjects'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":["Could not find permission with key: NOT_EXISTING_PERMISSION_KEY"],"errors":{}}'
          description: Returned if a project permission is not found.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2: []
      - {}
      summary: Get permitted projects
      tags:
      - Permissions
      x-atlassian-connect-scope: READ
  /rest/api/3/permissionscheme:
    get:
      deprecated: false
      description: "Returns all permission schemes.\n\n### About permission schemes\
        \ and grants ###\n\nA permission scheme is a collection of permission grants.\
        \ A permission grant consists of a `holder` and a `permission`.\n\n#### Holder\
        \ object ####\n\nThe `holder` object contains information about the user or\
        \ group being granted the permission. For example, the *Administer projects*\
        \ permission is granted to a group named *Teams in space administrators*.\
        \ In this case, the type is `\"type\": \"group\"`, and the parameter is the\
        \ group name, `\"parameter\": \"Teams in space administrators\"`. The `holder`\
        \ object is defined by the following properties:\n\n *  `type` Identifies\
        \ the user or group (see the list of types below).\n *  `parameter` The value\
        \ of this property depends on the `type`. For example, if the `type` is a\
        \ group, then you need to specify the group name.\n\nThe following `types`\
        \ are available. The expected values for the `parameter` are given in parenthesis\
        \ (some `types` may not have a `parameter`):\n\n *  `anyone` Grant for anonymous\
        \ users.\n *  `applicationRole` Grant for users with access to the specified\
        \ application (application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL)\
        \ for more information.\n *  `assignee` Grant for the user currently assigned\
        \ to an issue.\n *  `group` Grant for the specified group (group name).\n\
        \ *  `groupCustomField` Grant for a user in the group selected in the specified\
        \ custom field (custom field ID).\n *  `projectLead` Grant for a project lead.\n\
        \ *  `projectRole` Grant for the specified project role (project role ID).\n\
        \ *  `reporter` Grant for the user who reported the issue.\n *  `sd.customer.portal.only`\
        \ Jira Service Desk only. Grants customers permission to access the customer\
        \ portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg)\
        \ for more information.\n *  `user` Grant for the specified user (user ID\
        \ - historically this was the userkey but that is deprecated and the account\
        \ ID should be used).\n *  `userCustomField` Grant for a user selected in\
        \ the specified custom field (custom field ID).\n\n#### Built-in permissions\
        \ ####\n\nThe [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg)\
        \ are listed below. Apps can also define custom permissions. See the [project\
        \ permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/)\
        \ and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/)\
        \ module documentation for more information.\n\n**Project permissions**\n\n\
        \ *  `ADMINISTER_PROJECTS`\n *  `BROWSE_PROJECTS`\n *  `MANAGE_SPRINTS_PERMISSION`\
        \ (Jira Software only)\n *  `SERVICEDESK_AGENT` (Jira Service Desk only)\n\
        \ *  `VIEW_DEV_TOOLS` (Jira Software only)\n *  `VIEW_READONLY_WORKFLOW`\n\
        \n**Issue permissions**\n\n *  `ASSIGNABLE_USER`\n *  `ASSIGN_ISSUES`\n *\
        \  `CLOSE_ISSUES`\n *  `CREATE_ISSUES`\n *  `DELETE_ISSUES`\n *  `EDIT_ISSUES`\n\
        \ *  `LINK_ISSUES`\n *  `MODIFY_REPORTER`\n *  `MOVE_ISSUES`\n *  `RESOLVE_ISSUES`\n\
        \ *  `SCHEDULE_ISSUES`\n *  `SET_ISSUE_SECURITY`\n *  `TRANSITION_ISSUES`\n\
        \n**Voters and watchers permissions**\n\n *  `MANAGE_WATCHERS`\n *  `VIEW_VOTERS_AND_WATCHERS`\n\
        \n**Comments permissions**\n\n *  `ADD_COMMENTS`\n *  `DELETE_ALL_COMMENTS`\n\
        \ *  `DELETE_OWN_COMMENTS`\n *  `EDIT_ALL_COMMENTS`\n *  `EDIT_OWN_COMMENTS`\n\
        \n**Attachments permissions**\n\n *  `CREATE_ATTACHMENTS`\n *  `DELETE_ALL_ATTACHMENTS`\n\
        \ *  `DELETE_OWN_ATTACHMENTS`\n\n**Time tracking permissions**\n\n *  `DELETE_ALL_WORKLOGS`\n\
        \ *  `DELETE_OWN_WORKLOGS`\n *  `EDIT_ALL_WORKLOGS`\n *  `EDIT_OWN_WORKLOGS`\n\
        \ *  `WORK_ON_ISSUES`\n\n**[Permissions](#permissions) required:** Permission\
        \ to access Jira."
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.getAllPermissionSchemes_get
      parameters:
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ included when you specify any value. Expand options include:\n\n *  `all`\
          \ Returns all expandable information.\n *  `field` Returns information about\
          \ the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"permissionSchemes":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description"}]}'
              schema:
                $ref: '#/components/schemas/PermissionSchemes'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      summary: Get all permission schemes
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
    post:
      deprecated: false
      description: 'Creates a new permission scheme. You can create a permission scheme
        with or without defining a set of permission grants.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.createPermissionScheme_post
      parameters:
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ always included when you specify any value. Expand options include:\n\n\
          \ *  `all` Returns all expandable information.\n *  `field` Returns information\
          \ about the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: description
              name: Example permission scheme
              permissions:
              - holder:
                  parameter: jira-core-users
                  type: group
                permission: ADMINISTER_PROJECTS
            schema:
              $ref: '#/components/schemas/PermissionScheme'
        description: The permission scheme to create.
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description","permissions":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}]}'
              schema:
                $ref: '#/components/schemas/PermissionScheme'
          description: Returned if the permission scheme is created.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Create permission scheme
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/permissionscheme/{schemeId}:
    delete:
      deprecated: false
      description: 'Deletes a permission scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.deletePermissionScheme_delete
      parameters:
      - description: The ID of the permission scheme being deleted.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the permission scheme is deleted.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the permission scheme is not found.
      security:
      - basicAuth: []
      summary: Delete permission scheme
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Returns a permission scheme.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.getPermissionScheme_get
      parameters:
      - description: The ID of the permission scheme to return.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ included when you specify any value. Expand options include:\n\n *  `all`\
          \ Returns all expandable information.\n *  `field` Returns information about\
          \ the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description","permissions":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}]}'
              schema:
                $ref: '#/components/schemas/PermissionScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the permission scheme is not found or the user
            does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get permission scheme
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: "Updates a permission scheme. Below are some important things to\
        \ note when using this resource:\n\n *  If a permissions list is present in\
        \ the request, then it is set in the permission scheme, overwriting *all existing*\
        \ grants.\n *  If you want to update only the name and description, then do\
        \ not send a permissions list in the request.\n *  Sending an empty list will\
        \ remove all permission grants from the permission scheme.\n\nIf you want\
        \ to add or delete a permission grant instead of updating the whole list,\
        \ see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post)\
        \ or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).\n\
        \nSee [About permission schemes and grants](#about-permission-schemes) for\
        \ more details.\n\n**[Permissions](#permissions) required:** *Administer Jira*\
        \ [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.updatePermissionScheme_put
      parameters:
      - description: The ID of the permission scheme to update.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ always included when you specify any value. Expand options include:\n\n\
          \ *  `all` Returns all expandable information.\n *  `field` Returns information\
          \ about the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              description: description
              name: Example permission scheme
              permissions:
              - holder:
                  parameter: jira-core-users
                  type: group
                permission: ADMINISTER_PROJECTS
            schema:
              $ref: '#/components/schemas/PermissionScheme'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description","permissions":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}]}'
              schema:
                $ref: '#/components/schemas/PermissionScheme'
          description: Returned if the scheme is updated.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: "Returned if:\n\n *  the user does not have the necessary permission\
            \ to update permission schemes.\n *  the Jira instance is Jira Core Free\
            \ or Jira Software Free. Permission schemes cannot be updated on free\
            \ plans."
        '404':
          description: Returned if the permission scheme is not found.
      security:
      - basicAuth: []
      summary: Update permission scheme
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/permissionscheme/{schemeId}/permission:
    get:
      deprecated: false
      description: 'Returns all permission grants for a permission scheme.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.getPermissionSchemeGrants_get
      parameters:
      - description: The ID of the permission scheme.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ always included when you specify any value. Expand options include:\n\n\
          \ *  `permissions` Returns all permission grants for each permission scheme.\n\
          \ *  `user` Returns information about the user who is granted the permission.\n\
          \ *  `group` Returns information about the group that is granted the permission.\n\
          \ *  `projectRole` Returns information about the project role granted the\
          \ permission.\n *  `field` Returns information about the custom field granted\
          \ the permission.\n *  `all` Returns all expandable information."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"permissions":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}],"expand":"user,group,projectRole,field,all"}'
              schema:
                $ref: '#/components/schemas/PermissionGrants'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the permission schemes is not found or the user
            does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get permission scheme grants
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
    post:
      deprecated: false
      description: 'Creates a permission grant in a permission scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.createPermissionGrant_post
      parameters:
      - description: The ID of the permission scheme in which to create a new permission
          grant.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ always included when you specify any value. Expand options include:\n\n\
          \ *  `permissions` Returns all permission grants for each permission scheme.\n\
          \ *  `user` Returns information about the user who is granted the permission.\n\
          \ *  `group` Returns information about the group that is granted the permission.\n\
          \ *  `projectRole` Returns information about the project role granted the\
          \ permission.\n *  `field` Returns information about the custom field granted\
          \ the permission.\n *  `all` Returns all expandable information."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              holder:
                parameter: jira-core-users
                type: group
              permission: ADMINISTER_PROJECTS
            schema:
              $ref: '#/components/schemas/PermissionGrant'
        description: The permission grant to create.
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}'
              schema:
                $ref: '#/components/schemas/PermissionGrant'
          description: Returned if the scheme permission is created.
        '400':
          description: Returned if the value for expand is invalid or the same permission
            grant is present.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Create permission grant
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}:
    delete:
      deprecated: false
      description: 'Deletes a permission grant from a permission scheme. See [About
        permission schemes and grants](#about-permission-schemes) for more details.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.deletePermissionSchemeEntity_delete
      parameters:
      - description: The ID of the permission scheme to delete the permission grant
          from.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the permission grant to delete.
        in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the permission grant is deleted.
        '400':
          description: Returned if permission grant with the provided ID is not found.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Delete permission scheme grant
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Returns a permission grant.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.admin.permissionscheme.PermissionSchemeResource.getPermissionSchemeGrant_get
      parameters:
      - description: The ID of the permission scheme.
        in: path
        name: schemeId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the permission grant.
        in: path
        name: permissionId
        required: true
        schema:
          format: int64
          type: integer
      - description: "Use expand to include additional information in the response.\
          \ This parameter accepts a comma-separated list. Note that permissions are\
          \ always included when you specify any value. Expand options include:\n\n\
          \ *  `all` Returns all expandable information.\n *  `field` Returns information\
          \ about the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/permission/10000","holder":{"type":"group","parameter":"jira-core-users","expand":"group"},"permission":"ADMINISTER_PROJECTS"}'
              schema:
                $ref: '#/components/schemas/PermissionGrant'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the permission scheme or permission grant is not
            found or the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get permission scheme grant
      tags:
      - Permission schemes
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/priority:
    get:
      deprecated: false
      description: 'Returns the list of all issue priorities.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.PriorityResource.getPriorities_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900","description":"Major
                loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","name":"Major","id":"1"},{"self":"https://your-domain.atlassian.net/rest/api/3/priority/5","statusColor":"#cfcfcf","description":"Very
                little impact.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/trivial.png","name":"Trivial","id":"2"}]'
              schema:
                items:
                  $ref: '#/components/schemas/Priority'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get priorities
      tags:
      - Issue priorities
      x-atlassian-connect-scope: READ
  /rest/api/3/priority/{id}:
    get:
      deprecated: false
      description: 'Returns an issue priority.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.PriorityResource.getPriority_get
      parameters:
      - description: The ID of the issue priority.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/priority/3","statusColor":"#009900","description":"Major
                loss of function.","iconUrl":"https://your-domain.atlassian.net/images/icons/priorities/major.png","name":"Major","id":"1"}'
              schema:
                $ref: '#/components/schemas/Priority'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the issue priority is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get priority
      tags:
      - Issue priorities
      x-atlassian-connect-scope: READ
  /rest/api/3/project:
    get:
      deprecated: true
      description: 'Returns all projects visible to the user. Deprecated, use [ Get
        projects paginated](#api-rest-api-3-project-search-get) that supports search
        and pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** Projects are returned only where
        the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getAllProjects_get
      parameters:
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expanded\
          \ options include:\n\n *  `description` Returns the project description.\n\
          \ *  `issueTypes` Returns all issue types associated with the project.\n\
          \ *  `lead` Returns information about the the project lead.\n *  `projectKeys`\
          \ Returns all project keys associated with the project."
        in: query
        name: expand
        schema:
          type: string
      - description: Returns the user's most recently accessed projects. You may specify
          the number of results to return up to a maximum of 20. If access is anonymous,
          then the recently accessed projects are based on the current HTTP session.
        in: query
        name: recent
        schema:
          format: int32
          type: integer
      - description: A list of project properties to return for the project. This
          parameter accepts a comma-separated list.
        in: query
        name: properties
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}},{"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","id":"10001","key":"ABC","name":"Alphabetical","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}]'
              schema:
                items:
                  $ref: '#/components/schemas/Project'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all projects
      tags:
      - Projects
      x-atlassian-connect-scope: READ
      x-changes:
      - announced: '2018-10-19T00:00:00.000Z'
        details: https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-removal-of-get-filters-and-get-all-projects/
        effective: '2019-04-19T00:00:00.000Z'
        type: removed
    post:
      deprecated: false
      description: "Creates a project based on a project type template, as shown in\
        \ the following table:\n\n| Project Type Key | Project Template Key |  \n\
        |--|--|  \n| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`,\
        \ `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking`\
        \ |  \n| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-desk`,\
        \ `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk`\
        \ |  \n| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`,\
        \ `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`,\
        \ `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic`\
        \ |  \nThe project types are available according to the installed Jira features\
        \ as follows:\n\n *  Jira Core, the default, enables `business` projects.\n\
        \ *  Jira Service Desk enables `service_desk` projects.\n *  Jira Software\
        \ enables `software` projects.\n\nTo determine which features are installed,\
        \ go to **Jira settings** > **Apps** > **Manage apps** and review the System\
        \ Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance,\
        \ use **Jira settings** > **Apps** > **Finding new apps**. For more information,\
        \ see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).\n\n\
        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.createProject_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              assigneeType: PROJECT_LEAD
              avatarId: 10200
              categoryId: 10120
              description: Example Project description
              issueSecurityScheme: 10001
              key: EX
              lead: Charlie
              name: Example
              notificationScheme: 10021
              permissionScheme: 10011
              projectTemplateKey: com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
              projectTypeKey: business
              url: http://atlassian.com
            schema:
              $ref: '#/components/schemas/ProjectInputBean'
        description: The JSON representation of the project being created.
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/jira/rest/api/3/project/10042","id":10010,"key":"EX"}'
              schema:
                $ref: '#/components/schemas/ProjectIdentifiers'
          description: Returned if the project is created.
        '400':
          description: Returned if the request is not valid and the project could
            not be created.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to create projects.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Create project
      tags:
      - Projects
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/search:
    get:
      deprecated: false
      description: "Returns projects visible to the user.\n\nThis operation can be\
        \ accessed anonymously.\n\n**[Permissions](#permissions) required:** Projects\
        \ are returned only where the user has one of:\n\n *  *Browse Projects* [project\
        \ permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n\
        \ *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project.\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.searchProjects_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "[Order](#ordering) the results by a field.\n\n *  `category`\
          \ Sorts by project category. A complete list of category IDs is found using\
          \ [Get all project categories](#api-rest-api-3-projectCategory-get).\n *\
          \  `issueCount` Sorts by the total number of issues in each project.\n *\
          \  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the\
          \ last issue update time.\n *  `name` Sorts by project name.\n *  `owner`\
          \ Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project\
          \ archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted\
          \ date."
        in: query
        name: orderBy
        schema:
          default: key
          enum:
          - category
          - -category
          - +category
          - key
          - -key
          - +key
          - name
          - -name
          - +name
          - owner
          - -owner
          - +owner
          - issueCount
          - -issueCount
          - +issueCount
          - lastIssueUpdatedDate
          - -lastIssueUpdatedDate
          - +lastIssueUpdatedDate
          - archivedDate
          - +archivedDate
          - -archivedDate
          - deletedDate
          - +deletedDate
          - -deletedDate
          type: string
      - description: Filter the results using a literal string. Projects with a matching
          `key` or `name` are returned (case insensitive).
        in: query
        name: query
        schema:
          type: string
      - description: Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes).
          This parameter accepts a comma-separated list. Valid values are `business`,
          `service_desk`, and `software`.
        in: query
        name: typeKey
        schema:
          type: string
      - description: The ID of the project's category. A complete list of category
          IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get)
          operation.
        in: query
        name: categoryId
        schema:
          format: int64
          type: integer
      - in: query
        name: searchBy
        schema:
          default: key, name
          type: string
      - description: "Filter results by projects for which the user can:\n\n *  `view`\
          \ the project, meaning that they have one of the following permissions:\n\
          \    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
          \ for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
          \ for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
          \ *  `browse` the project, meaning that they have the *Browse projects*\
          \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
          \ project.\n *  `edit` the project, meaning that they have one of the following\
          \ permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
          \ for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
        in: query
        name: action
        schema:
          default: view
          enum:
          - view
          - browse
          - edit
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expanded\
          \ options include:\n\n *  `description` Returns the project description.\n\
          \ *  `projectKeys` Returns all project keys associated with a project.\n\
          \ *  `lead` Returns information about the the project lead.\n *  `issueTypes`\
          \ Returns all issue types associated with the project.\n *  `url` Returns\
          \ the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns\
          \ the insight details of total issue count and last issue update time for\
          \ the project."
        in: query
        name: expand
        schema:
          type: string
      - description: "EXPERIMENTAL. Filter results by project status:\n\n *  `live`\
          \ Search live projects.\n *  `archived` Search archived projects.\n *  `deleted`\
          \ Search deleted projects, those in the recycle bin."
        in: query
        name: status
        schema:
          items:
            default: live
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=0&maxResults=2","nextPage":"https://your-domain.atlassian.net/rest/api/3/project/search?startAt=2&maxResults=2","maxResults":2,"startAt":0,"total":7,"isLast":false,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}},{"self":"https://your-domain.atlassian.net/rest/api/3/project/ABC","id":"10001","key":"ABC","name":"Alphabetical","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10001","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10001","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10001","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10001"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanProject'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if no projects matching the search criteria are found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get projects paginated
      tags:
      - Projects
      x-atlassian-connect-scope: READ
  /rest/api/3/project/type:
    get:
      deprecated: false
      description: 'Returns all [project types](https://confluence.atlassian.com/x/Var1Nw),
        whether or not the instance has a valid license for each type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.project.type.ProjectTypeResource.getAllProjectTypes_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"key":"business","formattedKey":"Business","descriptionI18nKey":"jira.project.type.business.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#FFFFFF"},{"key":"software","formattedKey":"Software","descriptionI18nKey":"jira.project.type.software.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#AAAAAA"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ProjectType'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all project types
      tags:
      - Project types
      x-atlassian-connect-scope: READ
  /rest/api/3/project/type/accessible:
    get:
      deprecated: false
      description: Returns all [project types](https://confluence.atlassian.com/x/Var1Nw)
        on the instance with a valid license
      operationId: com.atlassian.jira.rest.v2.project.type.ProjectTypeResource.getAllAccessibleProjectTypes_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"key":"business","formattedKey":"Business","descriptionI18nKey":"jira.project.type.business.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#FFFFFF"},{"key":"software","formattedKey":"Software","descriptionI18nKey":"jira.project.type.software.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#AAAAAA"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ProjectType'
                type: array
          description: Returned if the request is successful.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all accessible project types on the instance
      tags:
      - Project types
      x-atlassian-connect-scope: READ
  /rest/api/3/project/type/{projectTypeKey}:
    get:
      deprecated: false
      description: 'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.project.type.ProjectTypeResource.getProjectTypeByKey_get
      parameters:
      - description: The key of the project type.
        in: path
        name: projectTypeKey
        required: true
        schema:
          enum:
          - software
          - service_desk
          - business
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"business","formattedKey":"Business","descriptionI18nKey":"jira.project.type.business.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#FFFFFF"}'
              schema:
                $ref: '#/components/schemas/ProjectType'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the project type is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project type by key
      tags:
      - Project types
      x-atlassian-connect-scope: READ
  /rest/api/3/project/type/{projectTypeKey}/accessible:
    get:
      deprecated: false
      description: 'Returns a [project type](https://confluence.atlassian.com/x/Var1Nw)
        if it is accessible to the user.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.project.type.ProjectTypeResource.getAccessibleProjectTypeByKey_get
      parameters:
      - description: The key of the project type.
        in: path
        name: projectTypeKey
        required: true
        schema:
          enum:
          - software
          - service_desk
          - business
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"business","formattedKey":"Business","descriptionI18nKey":"jira.project.type.business.description","icon":"PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjwhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxOC4xLjEsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApICAtLT4NCjxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiDQoJIHZpZXdCb3g9IjAgMCAzMiAzMiIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMzIgMzIiIHhtbDpzcGFjZT0icHJlc2VydmUiPg0KPGc+DQoJPHBhdGggZmlsbD0iIzY2NjY2NiIgZD0iTTE2LDBDNy4yLDAsMCw3LjIsMCwxNmMwLDguOCw3LjIsMTYsMTYsMTZjOC44LDAsMTYtNy4yLDE2LTE2QzMyLDcuMiwyNC44LDAsMTYsMHogTTI1LjcsMjMNCgkJYzAsMS44LTEuNCwzLjItMy4yLDMuMkg5LjJDNy41LDI2LjIsNiwyNC44LDYsMjNWOS44QzYsOCw3LjUsNi42LDkuMiw2LjZoMTMuMmMwLjIsMCwwLjQsMCwwLjcsMC4xbC0yLjgsMi44SDkuMg0KCQlDOSw5LjQsOC44LDkuNiw4LjgsOS44VjIzYzAsMC4yLDAuMiwwLjQsMC40LDAuNGgxMy4yYzAuMiwwLDAuNC0wLjIsMC40LTAuNHYtNS4zbDIuOC0yLjhWMjN6IE0xNS45LDIxLjNMMTEsMTYuNGwyLTJsMi45LDIuOQ0KCQlMMjYuNCw2LjhjMC42LDAuNywxLjIsMS41LDEuNywyLjNMMTUuOSwyMS4zeiIvPg0KPC9nPg0KPC9zdmc+","color":"#FFFFFF"}'
              schema:
                $ref: '#/components/schemas/ProjectType'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project type is not accessible to the user.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get accessible project type by key
      tags:
      - Project types
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}:
    delete:
      deprecated: false
      description: 'Deletes a project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.deleteProject_delete
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: EXPERIMENTAL. Whether this project is placed in the Jira recycle
          bin where it will be available for restoration.
        in: query
        name: enableUndo
        schema:
          default: false
          type: boolean
      responses:
        '204':
          description: Returned if the project is deleted.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to delete it.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Delete project
      tags:
      - Projects
      x-atlassian-connect-scope: PROJECT_ADMIN
    get:
      deprecated: false
      description: 'Returns the [project details](https://confluence.atlassian.com/x/ahLpNw)
        for a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProject_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Note that\
          \ the project description, issue types, and project lead are included in\
          \ all responses by default. Expand options include:\n\n *  `description`\
          \ The project description.\n *  `issueTypes` The issue types associated\
          \ with the project.\n *  `lead` The project lead.\n *  `projectKeys` All\
          \ project keys associated with the project.\n *  `issueTypeHierarchy` The\
          \ project issue type hierarchy."
        in: query
        name: expand
        schema:
          type: string
      - description: A list of project properties to return for the project. This
          parameter accepts a comma-separated list.
        in: query
        name: properties
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for REST.","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}],"url":"https://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"},"insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}'
              schema:
                $ref: '#/components/schemas/Project'
          description: Returned if successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project
      tags:
      - Projects
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates the [project details](https://confluence.atlassian.com/x/ahLpNw)
        of a project.


        All parameters are optional in the body of the request.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.updateProject_put
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Note that\
          \ the project description, issue types, and project lead are included in\
          \ all responses by default. Expand options include:\n\n *  `description`\
          \ The project description.\n *  `issueTypes` The issue types associated\
          \ with the project.\n *  `lead` The project lead.\n *  `projectKeys` All\
          \ project keys associated with the project."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              assigneeType: PROJECT_LEAD
              avatarId: 10200
              categoryId: 10120
              description: Example Project description
              issueSecurityScheme: 10001
              key: EX
              lead: Charlie
              name: Example
              notificationScheme: 10021
              permissionScheme: 10011
              projectTemplateKey: com.atlassian.jira-core-project-templates:jira-core-simplified-process-control
              projectTypeKey: business
              url: http://atlassian.com
            schema:
              $ref: '#/components/schemas/ProjectInputBean'
        description: The project details to be updated.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for REST.","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}],"url":"https://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"},"insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}'
              schema:
                $ref: '#/components/schemas/Project'
          description: Returned if the project is updated.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: "Returned if:\n\n *  the user does not have the necessary permission\
            \ to update project details.\n *  the permission scheme is being changed\
            \ and the Jira instance is Jira Core Free or Jira Software Free. Permission\
            \ schemes cannot be changed on free plans."
        '404':
          description: Returned if the project is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Update project
      tags:
      - Projects
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectIdOrKey}/avatar:
    put:
      deprecated: false
      description: 'Sets the avatar displayed for a project.


        Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post)
        to store avatars against the project, before using this operation to set the
        displayed avatar.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.updateProjectAvatar_put
      parameters:
      - description: The ID or (case-sensitive) key of the project.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              id: '10010'
            schema:
              $ref: '#/components/schemas/Avatar'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to administer
            the project.
        '404':
          description: Returned if the project or avatar is not found or the user
            does not have permission to view the project.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Set project avatar
      tags:
      - Project avatars
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectIdOrKey}/avatar/{id}:
    delete:
      deprecated: false
      description: 'Deletes a custom avatar from a project. Note that system avatars
        cannot be deleted.


        **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.deleteProjectAvatar_delete
      parameters:
      - description: The project ID or (case-sensitive) key.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the avatar.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the avatar is a system avatar or the user does
            not have permission to administer the project.
        '404':
          description: Returned if the project or avatar is not found or the user
            does not have permission to view the project.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete project avatar
      tags:
      - Project avatars
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectIdOrKey}/avatar2:
    post:
      deprecated: false
      description: "Loads an avatar for a project.\n\nSpecify the avatar's local file\
        \ location in the body of the request. Also, include the following headers:\n\
        \n *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the\
        \ request, for more information see [Special Headers](#special-request-headers).\n\
        \ *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or\
        \ PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token>\
        \ `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type:\
        \ image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\"\
        \ `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`\n\
        \nThe avatar is cropped to a square. If no crop parameters are specified,\
        \ the square originates at the top left of the image. The length of the square's\
        \ sides is set to the smaller of the height or width of the image.\n\nThe\
        \ cropped image is then used to create avatars of 16x16, 24x24, 32x32, and\
        \ 48x48 in size.\n\nAfter creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put)\
        \ to set it as the project's displayed avatar.\n\n**[Permissions](#permissions)\
        \ required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.createProjectAvatar_post
      parameters:
      - description: The ID or (case-sensitive) key of the project.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The X coordinate of the top-left corner of the crop region.
        in: query
        name: x
        schema:
          default: 0
          format: int32
          type: integer
      - description: The Y coordinate of the top-left corner of the crop region.
        in: query
        name: y
        schema:
          default: 0
          format: int32
          type: integer
      - description: The length of each side of the crop region.
        in: query
        name: size
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          '*/*':
            schema: {}
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"1010","isSystemAvatar":false,"isSelected":false,"isDeletable":true}'
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  an image isn't included in the request.\n\
            \ *  the image type is unsupported.\n *  the crop parameters extend the\
            \ crop area beyond the edge of the image."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to administer
            the project or an anonymous call is made to the operation.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view the project.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Load project avatar
      tags:
      - Project avatars
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectIdOrKey}/avatars:
    get:
      deprecated: false
      description: 'Returns all project avatars, grouped by system and custom avatars.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getAllProjectAvatars_get
      parameters:
      - description: The ID or (case-sensitive) key of the project.
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"system":[{"id":"1000","isSystemAvatar":true,"isSelected":false,"isDeletable":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}],"custom":[{"id":"1010","isSystemAvatar":false,"isSelected":false,"isDeletable":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}]}'
              schema:
                $ref: '#/components/schemas/ProjectAvatars'
          description: Returned if request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the the project is not found or the user does not
            have permission to view the project.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all project avatars
      tags:
      - Project avatars
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/component:
    get:
      deprecated: false
      description: 'Returns a [paginated](#pagination) representation of all components
        in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get)
        resource if you want to get a full list of versions without pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProjectComponentsPaginated_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "[Order](#ordering) the results by a field:\n\n *  `description`\
          \ Sorts by the component description.\n *  `issueCount` Sorts by the count\
          \ of issues associated with the component.\n *  `lead` Sorts by the user\
          \ key of the component's project lead.\n *  `name` Sorts by component name."
        in: query
        name: orderBy
        schema:
          enum:
          - description
          - -description
          - +description
          - issueCount
          - -issueCount
          - +issueCount
          - lead
          - -lead
          - +lead
          - name
          - -name
          - +name
          type: string
      - description: Filter the results using a literal string. Components with a
          matching `name` or `description` are returned (case insensitive).
        in: query
        name: query
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=0&maxResults=2","nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/component?startAt=2&maxResults=2","maxResults":2,"startAt":0,"total":7,"isLast":false,"values":[{"componentBean":{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000},"issueCount":1,"description":"This
                is a Jira component","self":"https://your-domain.atlassian.net/rest/api/3/component/10000","project":"HSP","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","projectId":10000,"realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","name":"Component
                1","id":"10000"},{"componentBean":{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10050","name":"PXA","description":"This
                is a another Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"PROJECTKEY","projectId":10000},"issueCount":5,"description":"This
                is a another Jira component","self":"https://your-domain.atlassian.net/rest/api/3/component/10000","project":"PROJECTKEY","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","projectId":10000,"realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","name":"PXA","id":"10050"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanComponentWithIssueCount'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project components paginated
      tags:
      - Project components
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/components:
    get:
      deprecated: false
      description: 'Returns all components in a project. See the [Get project components
        paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource
        if you want to get a full list of components with pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProjectComponents_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000},{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10050","name":"PXA","description":"This
                is a another Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"PROJECTKEY","projectId":10000}]'
              schema:
                items:
                  $ref: '#/components/schemas/Component'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project components
      tags:
      - Project components
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/properties:
    get:
      deprecated: false
      description: 'Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)
        keys for the project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectPropertyResource.getProjectPropertyKeys_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to view the project.
        '404':
          description: Returned if the project is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project property keys
      tags:
      - Project properties
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: 'Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties)
        from a project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project containing the property.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectPropertyResource.deleteProjectProperty_delete
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get)
          to get a list of all project property keys.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the project property is deleted.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to administer
            the project.
        '404':
          description: Returned if the project or property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete project property
      tags:
      - Project properties
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: 'Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project containing the property.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectPropertyResource.getProjectProperty_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get)
          to get a list of all project property keys.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to view the project.
        '404':
          description: Returned if the project or property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project property
      tags:
      - Project properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        You can use project properties to store custom data against the project.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627),
        non-empty JSON blob. The maximum length is 32768 characters.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project in which the property is created.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectPropertyResource.setProjectProperty_put
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the project property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              number: 5
              string: string-value
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the project property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the project property is created.
        '400':
          description: Returned if the project key or id is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have permission to administer
            the project.
        '404':
          description: Returned if the project is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Set project property
      tags:
      - Project properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/project/{projectIdOrKey}/role:
    get:
      deprecated: false
      description: 'Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg)
        for the project returning the name and self URL for each role.


        Note that all project roles are shared with all projects in Jira Cloud. See
        [Get all project roles](#api-rest-api-3-role-get) for more information.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleResource.getProjectRoles_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"Administrators":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10002","Users":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10001","Developers":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10000"}'
              schema:
                additionalProperties:
                  format: uri
                  type: string
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing or if the user lacks administrative permissions for the project.
        '404':
          description: Returned if the project is not found or or if the user does
            not have administrative permissions for the project.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project roles for project
      tags:
      - Project roles
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/role/{id}:
    delete:
      deprecated: false
      description: 'Deletes actors from a project role for the project.


        To remove default actors from the project role, use [Delete default actors
        from project role This operation can be accessed anonymously. ](#api-rest-api-3-role-id-actors-delete)


        [ ](#api-rest-api-3-role-id-actors-delete)**[Permissions](#permissions) required:**
        *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleResource.deleteActor_delete
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The user account ID of the user to remove from the project role.
        in: query
        name: user
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          type: string
        x-showInExample: 'true'
      - description: The name of the group to remove from the project role.
        in: query
        name: group
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '404':
          description: "Returned if:\n\n *  the project or project role is not found.\n\
            \ *  the calling user does not have administrative permission."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete actors from project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: PROJECT_ADMIN
    get:
      deprecated: false
      description: 'Returns a project role''s details and actors associated with the
        project. The list of actors is sorted by display name.


        To check whether a user belongs to a role based on their group memberships,
        use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter
        selected. Then check whether the user keys and groups match with the actors
        returned for the project.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleResource.getProjectRole_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the project or project role is not found.\n\
            \ *  the user does not have administrative permission."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project role for project
      tags:
      - Project roles
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Adds actors to a project role for the project.


        To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleResource.addActorUsers_post
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              group:
              - jira-developers
            schema:
              $ref: '#/components/schemas/ActorsMap'
        description: The groups or users to associate with the project role for this
          project. Provide the user account ID or group name.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: 'Returned if the request is successful. The complete list of
            actors for the project is returned.


            For example, the cURL request above adds a group, *jira-developers*. For
            the response below to be returned as a result of that request, the user
            *Mia Krystof* would have previously been added as a `user` actor for this
            project.'
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing or if the calling user lacks administrative permissions for the
            project.
        '404':
          description: "Returned if:\n\n *  the project is not found.\n *  the user\
            \ or group is not found.\n *  the group or user is not active."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Add actors to project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: PROJECT_ADMIN
    put:
      deprecated: false
      description: 'Sets the actors for a project role for a project, replacing all
        existing actors.


        To add actors to the project without overwriting the existing list, use [Add
        actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).


        **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleResource.setActors_put
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              categorisedActors:
                atlassian-group-role-actor:
                - jira-developers
                atlassian-user-role-actor:
                - 12345678-9abc-def1-2345-6789abcdef12
            schema:
              $ref: '#/components/schemas/ProjectRoleActorsUpdateBean'
        description: The groups or users to associate with the project role for this
          project. Provide the user account ID or group name.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful. The complete list of
            actors for the project is returned.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing or if the calling user lacks administrative permissions for the
            project.
        '404':
          description: "Returned if:\n\n *  the project is not found.\n *  a user\
            \ or group is not found.\n *  a group or user is not active."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Set actors for project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectIdOrKey}/roledetails:
    get:
      deprecated: false
      description: 'Returns all [project roles](https://confluence.atlassian.com/x/3odKLg)
        and the details for each role. Note that the list of project roles is common
        to all projects.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.project.ProjectRoleDetailsResource.getProjectRoleDetails_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: Whether the roles should be filtered to include only those the
          user is assigned to.
        in: query
        name: currentMember
        schema:
          default: false
          type: boolean
      - in: query
        name: excludeConnectAddons
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}]'
              schema:
                items:
                  $ref: '#/components/schemas/ProjectRole'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or if the user does not
            have the necessary permissions for the project.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project role details
      tags:
      - Project roles
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/statuses:
    get:
      deprecated: false
      description: 'Returns the valid statuses for a project. The statuses are grouped
        by issue type, as each project has a set of valid issue types and each issue
        type has a set of valid statuses.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getAllStatuses_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","name":"Task","subtask":false,"statuses":[{"self":"https://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000"},{"self":"https://your-domain.atlassian.net/rest/api/3/status/5","description":"The
                issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","name":"Closed","id":"5"}]}]'
              schema:
                items:
                  $ref: '#/components/schemas/IssueTypeWithStatus'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all statuses for project
      tags:
      - Projects
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}:
    put:
      deprecated: true
      description: 'Deprecated, this feature is no longer supported and no alternatives
        are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ).
        Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project
        type can be updated for classic projects only, project type cannot be updated
        for next-gen projects.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.updateProjectType_put
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The key of the new project type.
        in: path
        name: newProjectTypeKey
        required: true
        schema:
          enum:
          - software
          - service_desk
          - business
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","description":"This
                project was created as an example for REST.","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"components":[{"self":"https://your-domain.atlassian.net/rest/api/3/component/10000","id":"10000","name":"Component
                1","description":"This is a Jira component","lead":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"assigneeType":"PROJECT_LEAD","assignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"realAssigneeType":"PROJECT_LEAD","realAssignee":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"isAssigneeTypeValid":false,"project":"HSP","projectId":10000}],"issueTypes":[{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/3","id":"3","description":"A
                task that needs to be done.","iconUrl":"https://your-domain.atlassian.net//secure/viewavatar?size=xsmall&avatarId=10299&avatarType=issuetype\",","name":"Task","subtask":false,"avatarId":1},{"self":"https://your-domain.atlassian.net/rest/api/3/issueType/1","id":"1","description":"A
                problem with the software.","iconUrl":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10316&avatarType=issuetype\",","name":"Bug","subtask":false,"avatarId":10002,"entityId":"9d7dd6f7-e8b6-4247-954b-7b2c9b2a5ba2","scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}],"url":"https://your-domain.atlassian.net/browse/EX","email":"from-jira@example.com","assigneeType":"PROJECT_LEAD","versions":[],"name":"Example","roles":{"Developers":"https://your-domain.atlassian.net/rest/api/3/project/EX/role/10000"},"avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","properties":{"propertyKey":"propertyValue"},"insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}}'
              schema:
                $ref: '#/components/schemas/Project'
          description: Returned if the project type is updated.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Update project type
      tags:
      - Projects
      x-atlassian-connect-scope: PROJECT_ADMIN
      x-changes:
      - announced: '2019-06-03T00:00:00.000Z'
        details: https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-change-project-type-via-api//
        effective: '2019-12-03T00:00:00.000Z'
        type: removed
  /rest/api/3/project/{projectIdOrKey}/version:
    get:
      deprecated: false
      description: 'Returns a [paginated](#pagination) representation of all versions
        in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get)
        resource if you want to get a full list of versions without pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProjectVersionsPaginated_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "[Order](#ordering) the results by a field:\n\n *  `description`\
          \ Sorts by version description.\n *  `name` Sorts by version name.\n * \
          \ `releaseDate` Sorts by release date, starting with the oldest date. Versions\
          \ with no release date are listed last.\n *  `sequence` Sorts by the order\
          \ of appearance in the user interface.\n *  `startDate` Sorts by start date,\
          \ starting with the oldest date. Versions with no start date are listed\
          \ last."
        in: query
        name: orderBy
        schema:
          enum:
          - description
          - -description
          - +description
          - name
          - -name
          - +name
          - releaseDate
          - -releaseDate
          - +releaseDate
          - sequence
          - -sequence
          - +sequence
          - startDate
          - -startDate
          - +startDate
          type: string
      - description: Filter the results using a literal string. Versions with matching
          `name` or `description` are returned (case insensitive).
        in: query
        name: query
        schema:
          type: string
      - description: A list of status values used to filter the results by version
          status. This parameter accepts a comma-separated list. The status values
          are `released`, `unreleased`, and `archived`.
        in: query
        name: status
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `issuesstatus` Returns the number of issues in each status\
          \ category for each version.\n *  `operations` Returns actions that can\
          \ be performed on the specified version."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=0&maxResults=2","nextPage":"https://your-domain.atlassian.net/rest/api/3/project/PR/version?startAt=2&maxResults=2","maxResults":2,"startAt":0,"total":7,"isLast":false,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","overdue":true,"userReleaseDate":"6/Jul/2010","projectId":10000},{"self":"https://your-domain.atlassian.net/rest/api/3/version/10010","id":"10010","description":"Minor
                Bugfix version","name":"Next Version","archived":false,"released":false,"overdue":false,"projectId":10000,"issuesStatusForFixVersion":{"unmapped":0,"toDo":10,"inProgress":20,"done":100}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanVersion'
          description: Returned if the request is successful.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project versions paginated
      tags:
      - Project versions
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectIdOrKey}/versions:
    get:
      deprecated: false
      description: 'Returns all versions in a project. The response is not paginated.
        Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get)
        if you want to get the versions in a project with pagination.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectResource.getProjectVersions_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectIdOrKey
        required: true
        schema:
          type: string
      - description: Use [expand](#expansion) to include additional information in
          the response. This parameter accepts `operations`, which returns actions
          that can be performed on the version.
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","overdue":true,"userReleaseDate":"6/Jul/2010","projectId":10000},{"self":"https://your-domain.atlassian.net/rest/api/3/version/10010","id":"10010","description":"Minor
                Bugfix version","name":"Next Version","archived":false,"released":false,"overdue":false,"projectId":10000,"issuesStatusForFixVersion":{"unmapped":0,"toDo":10,"inProgress":20,"done":100}}]'
              schema:
                items:
                  $ref: '#/components/schemas/Version'
                type: array
          description: Returned if the request is successful.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project versions
      tags:
      - Project versions
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectId}/hierarchy:
    get:
      deprecated: false
      description: "Get the issue type hierarchy for a next-gen project.\n\nThe issue\
        \ type hierarchy for a project consists of:\n\n *  *Epic* at level 1 (optional).\n\
        \ *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*.\
        \ Where the issue type *Epic* is defined, these issue types are used to break\
        \ down the content of an epic.\n *  *Subtask* at level -1 (optional). This\
        \ issue type enables level 0 issue types to be broken down into components.\
        \ Issues based on a level -1 issue type must have a parent issue.\n\n**[Permissions](#permissions)\
        \ required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project."
      operationId: com.atlassian.jira.rest.v2.nextgen.HierarchyResource.getHierarchy_get
      parameters:
      - description: The ID of the project.
        in: path
        name: projectId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"projectId":10030,"hierarchy":[{"entityId":"dc96a3fd-1acf-4e41-a6ea-a7eda064b4f4","level":0,"name":"Base","issueTypes":[{"id":10008,"entityId":"346d7f9b-ca09-4457-acbf-a30c6abee1ef","name":"Story","avatarId":10324},{"id":10001,"entityId":"46d7dc78-4771-4a2e-b16d-f7dd40f09e66","name":"Bug","avatarId":10324}]},{"entityId":"e0cdcf4b-0639-40de-9959-10e431808a50","level":1,"name":"Epic","issueTypes":[{"id":10007,"entityId":"ece7fa7a-c27e-498f-8615-6b677799994b","name":"Epic","avatarId":10179}]},{"entityId":"cf1a2745-f539-4b2c-a61e-1b1d7ee40bf4","level":-1,"name":"Subtask","issueTypes":[{"id":10009,"entityId":"a6adec05-c2ed-42b9-8c40-07705aaf78d4","name":"Subtask","avatarId":10573}]}]}'
              schema:
                $ref: '#/components/schemas/ProjectIssueTypeHierarchy'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user does not have
            the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get project issue type hierarchy
      tags:
      - Projects
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme:
    get:
      deprecated: false
      description: 'Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg)
        associated with the project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectIssueSecurityLevelSchemeResource.getIssueSecurityScheme_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/issuesecurityschemes/10000","id":10000,"name":"Default
                Issue Security Scheme","description":"Description for the default
                issue security scheme","defaultSecurityLevelId":10021,"levels":[{"self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021","id":"10021","description":"Only
                the reporter and internal staff can see this issue.","name":"Reporter
                Only"}]}'
              schema:
                $ref: '#/components/schemas/SecurityScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the project is visible to the user but the user
            doesn't have administrative permissions.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get project issue security scheme
      tags:
      - Project permission schemes
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectKeyOrId}/notificationscheme:
    get:
      deprecated: false
      description: 'Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg)
        associated with the project. See the [Get notification scheme](#api-rest-api-3-notificationscheme-id-get)
        resource for more information about notification schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).'
      operationId: com.atlassian.jira.rest.v2.notification.ProjectNotificationSchemeResource.getNotificationScheme_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `all` Returns all expandable information.\n *  `field`\
          \ Returns information about any custom fields assigned to receive an event.\n\
          \ *  `group` Returns information about any groups assigned to receive an\
          \ event.\n *  `notificationSchemeEvents` Returns a list of event associations.\
          \ This list is returned for all expandable information.\n *  `projectRole`\
          \ Returns information about any project roles assigned to receive an event.\n\
          \ *  `user` Returns information about any users assigned to receive an event."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"expand":"notificationSchemeEvents,user,group,projectRole,field,all","id":10100,"self":"https://your-domain.atlassian.net/rest/api/3/notificationscheme","name":"notification
                scheme name","description":"description","notificationSchemeEvents":[{"event":{"id":1,"name":"Issue
                created","description":"Event published when an issue is created"},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]},{"event":{"id":20,"name":"Custom
                event","description":"Custom event that is published together with
                an issue created event","templateEvent":{"id":1,"name":"Issue created","description":"Event
                published when an issue is created"}},"notifications":[{"id":1,"notificationType":"Group","parameter":"jira-administrators","group":{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"},"expand":"group"},{"id":2,"notificationType":"CurrentAssignee"},{"id":3,"notificationType":"ProjectRole","parameter":"10360","projectRole":{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}},"expand":"projectRole"},{"id":4,"notificationType":"EmailAddress","parameter":"rest-developer@atlassian.com","emailAddress":"rest-developer@atlassian.com"},{"id":5,"notificationType":"User","parameter":"5b10a2844c20165700ede21g","user":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"expand":"user"},{"id":6,"notificationType":"GroupCustomField","parameter":"customfield_10101","field":{"id":"customfield_10101","key":"customfield_10101","name":"New
                custom field","custom":true,"orderable":true,"navigable":true,"searchable":true,"clauseNames":["cf[10101]","New
                custom field"],"schema":{"type":"project","custom":"com.atlassian.jira.plugin.system.customfieldtypes:project","customId":10101}},"expand":"field"}]}]}'
              schema:
                $ref: '#/components/schemas/NotificationScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project is not found or the user is not an
            administrator.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get project notification scheme
      tags:
      - Projects
      x-atlassian-connect-scope: READ
  /rest/api/3/project/{projectKeyOrId}/permissionscheme:
    get:
      deprecated: false
      description: 'Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg)
        associated with the project.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).'
      operationId: com.atlassian.jira.rest.v2.permission.ProjectPermissionSchemeResource.getAssignedPermissionScheme_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Note that\
          \ permissions are included when you specify any value. Expand options include:\n\
          \n *  `all` Returns all expandable information.\n *  `field` Returns information\
          \ about the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description"}'
              schema:
                $ref: '#/components/schemas/PermissionScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have permission to view the project's
            configuration.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view the project.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get assigned permission scheme
      tags:
      - Project permission schemes
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Assigns a permission scheme with a project. See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for more information
        about permission schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)'
      operationId: com.atlassian.jira.rest.v2.permission.ProjectPermissionSchemeResource.assignPermissionScheme_put
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Note that\
          \ permissions are included when you specify any value. Expand options include:\n\
          \n *  `all` Returns all expandable information.\n *  `field` Returns information\
          \ about the custom field granted the permission.\n *  `group` Returns information\
          \ about the group that is granted the permission.\n *  `permissions` Returns\
          \ all permission grants for each permission scheme.\n *  `projectRole` Returns\
          \ information about the project role granted the permission.\n *  `user`\
          \ Returns information about the user who is granted the permission."
        in: query
        name: expand
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              id: 10000
            schema:
              $ref: '#/components/schemas/IdBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/permissionscheme/10000","name":"Example
                permission scheme","description":"description"}'
              schema:
                $ref: '#/components/schemas/PermissionScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: "Returned if:\n\n *  the user does not have the necessary permission\
            \ to edit the project's configuration.\n *  the Jira instance is Jira\
            \ Core Free or Jira Software Free. Permission schemes cannot be assigned\
            \ to projects on free plans."
        '404':
          description: Returned if the project or permission scheme is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      summary: Assign permission scheme
      tags:
      - Project permission schemes
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/project/{projectKeyOrId}/securitylevel:
    get:
      deprecated: false
      description: 'Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg)
        levels for the project that the user has access to.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        for the project, however, issue security levels are only returned for authenticated
        user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        for the project.'
      operationId: com.atlassian.jira.rest.v2.securitylevel.ProjectSecurityLevelResource.getSecurityLevelsForProject_get
      parameters:
      - description: The project ID or project key (case sensitive).
        in: path
        name: projectKeyOrId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"levels":[{"self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100000","id":"100000","description":"Only
                the reporter and internal staff can see this issue.","name":"Reporter
                Only"},{"self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/100001","id":"100001","description":"Only
                internal staff can see this issue.","name":"Staff Only"}]}'
              schema:
                $ref: '#/components/schemas/ProjectIssueSecurityLevels'
          description: Returned if the request is successful.
        '404':
          description: Returned if the project is not found or the user does not have
            permission to view it.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get project issue security levels
      tags:
      - Project permission schemes
      x-atlassian-connect-scope: READ
  /rest/api/3/projectCategory:
    get:
      deprecated: false
      description: 'Returns all project categories.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectCategoryResource.getAllProjectCategories_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10001","id":"10001","name":"SECOND","description":"Second
                Project Category"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ProjectCategory'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get all project categories
      tags:
      - Project categories
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Creates a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectCategoryResource.createProjectCategory_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: Created Project Category
              name: CREATED
            schema:
              $ref: '#/components/schemas/ProjectCategory'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100","id":"10100","name":"CREATED","description":"Created
                Project Category"}'
              schema:
                $ref: '#/components/schemas/ProjectCategory'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '409':
          description: Returned if the project category name is in use.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      summary: Create project category
      tags:
      - Project categories
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/projectCategory/{id}:
    delete:
      deprecated: false
      description: 'Deletes a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectCategoryResource.removeProjectCategory_delete
      parameters:
      - description: ID of the project category to delete.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the project category is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      summary: Delete project category
      tags:
      - Project categories
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns a project category.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectCategoryResource.getProjectCategoryById_get
      parameters:
      - description: The ID of the project category.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"}'
              schema:
                $ref: '#/components/schemas/ProjectCategory'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project category is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get project category by id
      tags:
      - Project categories
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates a project category.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectCategoryResource.updateProjectCategory_put
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: Updated Project Category
              name: UPDATED
            schema:
              $ref: '#/components/schemas/ProjectCategory'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10100","id":"10100","name":"UPDATED","description":"Updated
                Project Category"}'
              schema:
                $ref: '#/components/schemas/UpdatedProjectCategory'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the project category is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      summary: Update project category
      tags:
      - Project categories
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/projectvalidate/key:
    get:
      deprecated: false
      description: 'Validates a project key by confirming the key is a valid string
        and not in use.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectValidateResource.validateProjectKey_get
      parameters:
      - description: The project key.
        in: query
        name: key
        schema:
          example: HSP
          type: string
        x-showInExample: 'true'
      responses:
        '200':
          content:
            application/json:
              example: '{"errorMessages":[],"errors":{"projectKey":"A project with
                that project key already exists."}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      summary: Validate project key
      tags:
      - Project key and name validation
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/projectvalidate/validProjectKey:
    get:
      deprecated: false
      description: 'Validates a project key and, if the key is invalid or in use,
        generates a valid random string for the project key.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectValidateResource.getValidProjectKey_get
      parameters:
      - description: The project key.
        in: query
        name: key
        schema:
          example: HSP
          type: string
        x-showInExample: 'true'
      responses:
        '200':
          content:
            application/json:
              example: '"VPNE"'
              schema:
                type: string
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      summary: Get valid project key
      tags:
      - Project key and name validation
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/projectvalidate/validProjectName:
    get:
      deprecated: false
      description: 'Checks that a project name isn''t in use. If the name isn''t in
        use, the passed string is returned. If the name is in use, this operation
        attempts to generate a valid project name based on the one supplied, usually
        by adding a sequence number. If a valid project name cannot be generated,
        a 404 response is returned.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.ProjectValidateResource.getValidProjectName_get
      parameters:
      - description: The project name.
        in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '"Valid Project Name Example"'
              schema:
                type: string
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if a valid project name cannot be generated.
      security:
      - basicAuth: []
      summary: Get valid project name
      tags:
      - Project key and name validation
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/resolution:
    get:
      deprecated: false
      description: 'Returns a list of all issue resolution values.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.ResolutionResource.getResolutions_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/resolution/1","id":"10000","description":"A
                fix for this issue is checked into the tree and tested.","name":"Fixed"},{"self":"https://your-domain.atlassian.net/rest/api/3/resolution/3","id":"10001","description":"This
                is what it is supposed to do.","name":"Works as designed"}]'
              schema:
                items:
                  $ref: '#/components/schemas/Resolution'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get resolutions
      tags:
      - Issue resolutions
      x-atlassian-connect-scope: READ
  /rest/api/3/resolution/{id}:
    get:
      deprecated: false
      description: 'Returns an issue resolution value.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.ResolutionResource.getResolution_get
      parameters:
      - description: The ID of the issue resolution value.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/resolution/1","id":"10000","description":"A
                fix for this issue is checked into the tree and tested.","name":"Fixed"}'
              schema:
                $ref: '#/components/schemas/Resolution'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue resolution value is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get resolution
      tags:
      - Issue resolutions
      x-atlassian-connect-scope: READ
  /rest/api/3/role:
    get:
      deprecated: false
      description: "Gets a list of all project roles, complete with project role details\
        \ and default actors.\n\n### About project roles ###\n\n[Project roles](https://confluence.atlassian.com/x/3odKLg)\
        \ are a flexible way to to associate users and groups with projects. In Jira\
        \ Cloud, the list of project roles is shared globally with all projects, but\
        \ each project can have a different set of actors associated with it (unlike\
        \ groups, which have the same membership throughout all Jira applications).\n\
        \nProject roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get),\
        \ [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue\
        \ security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post),\
        \ and workflow conditions.\n\n#### Members and actors ####\n\nIn the Jira\
        \ REST API, a member of a project role is called an *actor*. An *actor* is\
        \ a group or user associated with a project role.\n\nActors may be set as\
        \ [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole)\
        \ of the project role or set at the project level:\n\n *  Default actors:\
        \ Users and groups that are assigned to the project role for all newly created\
        \ projects. The default actors can be removed at the project level later if\
        \ desired.\n *  Actors: Users and groups that are associated with a project\
        \ role for a project, which may differ from the default actors. This enables\
        \ you to assign a user to different roles in different projects.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.getAllProjectRoles_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}]'
              schema:
                items:
                  $ref: '#/components/schemas/ProjectRole'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get all project roles
      tags:
      - Project roles
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Creates a new project role with no [default actors](#api-rest-api-3-resolution-get).
        You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post)
        operation to add default actors to the project role after creating it.


        *Note that although a new project role is available to all projects upon creation,
        any default actors that are associated with the project role are not added
        to projects that existed prior to the role being created.*<


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.createProjectRole_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              description: A project role that represents developers in a project
              name: Developers
            schema:
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project"}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid. The `name` cannot be
            empty or start or end with whitespace.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '409':
          description: Returned if a project role with the provided name already exists.
      security:
      - basicAuth: []
      summary: Create project role
      tags:
      - Project roles
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/role/{id}:
    delete:
      deprecated: false
      description: 'Deletes a project role. You must specify a replacement project
        role if you wish to delete a project role that is in use.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.deleteProjectRole_delete
      parameters:
      - description: The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the project role that will replace the one being deleted.
        in: query
        name: swap
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid or if the replacement project
            role is not found.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role being deleted is not found.
        '409':
          description: Returned if the project role being deleted is in use and a
            replacement project role is not specified in the request.
      security:
      - basicAuth: []
      summary: Delete project role
      tags:
      - Project roles
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Gets the project role details and the default actors associated
        with the role. The list of default actors is sorted by display name.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.getProjectRoleById_get
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get project role by ID
      tags:
      - Project roles
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Updates either the project role''s name or its description.


        You cannot update both the name and description at the same time using this
        operation. If you send a request with a name and a description only the name
        is updated.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.partialUpdateProjectRole_post
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: A project role that represents developers in a project
              name: Developers
            schema:
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      summary: Partial update project role
      tags:
      - Project roles
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: 'Updates the project role''s name and description. You must include
        both a name and a description in the request.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.fullyUpdateProjectRole_put
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              description: A project role that represents developers in a project
              name: Developers
            schema:
              $ref: '#/components/schemas/CreateUpdateRoleRequestBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/project/MKY/role/10360","name":"Developers","id":10360,"description":"A
                project role that represents developers in a project","actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}},{"id":10241,"displayName":"Mia
                Krystof","type":"atlassian-user-role-actor","name":"","actorUser":{"accountId":"5b10a2844c20165700ede21g"}}],"scope":{"type":"PROJECT","project":{"id":"10000","key":"KEY","name":"Next
                Gen Project"}}}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is not valid. The `name` cannot be
            empty or start or end with whitespace.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      summary: Fully update project role
      tags:
      - Project roles
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/role/{id}/actors:
    delete:
      deprecated: false
      description: 'Deletes the [default actors](#api-rest-api-3-resolution-get) from
        a project role. You may delete a group or user, but you cannot delete a group
        and a user in the same request.


        Changing a project role''s default actors does not affect project role members
        for projects already created.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.deleteProjectRoleActorsFromRole_delete
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The user account ID of the user to remove as a default actor.
        in: query
        name: user
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          type: string
        x-showInExample: 'true'
      - description: The group name of the group to be removed as a default actor.
        in: query
        name: group
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}}]}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      summary: Delete default actors from project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Returns the [default actors](#api-rest-api-3-resolution-get) for
        the project role.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.getProjectRoleActorsForRole_get
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}}]}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get default actors for project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Adds [default actors](#api-rest-api-3-resolution-get) to a role.
        You may add groups or users, but you cannot add groups and users in the same
        request.


        Changing a project role''s default actors does not affect project role members
        for projects already created.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.project.RoleResource.addProjectRoleActorsToRole_post
      parameters:
      - description: The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get)
          to get a list of project role IDs.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              user:
              - admin
            schema:
              $ref: '#/components/schemas/ActorInputBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"actors":[{"id":10240,"displayName":"jira-developers","type":"atlassian-group-role-actor","name":"jira-developers","actorGroup":{"name":"jira-developers","displayName":"jira-developers"}}]}'
              schema:
                $ref: '#/components/schemas/ProjectRole'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have administrative permissions.
        '404':
          description: Returned if the project role is not found.
      security:
      - basicAuth: []
      summary: Add default actors to project role
      tags:
      - Project role actors
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/screens:
    get:
      deprecated: false
      description: 'Returns all screens.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.getAllScreens_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanScreen'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get all screens
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/addToDefault/{fieldId}:
    post:
      deprecated: false
      description: 'Adds a field to the default tab of the default screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.addFieldToDefaultScreen_post
      parameters:
      - description: The ID of the field.
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the field it not found or the field is already
            present.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Add field to default screen
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/{screenId}/availableFields:
    get:
      deprecated: false
      description: 'Returns the fields that can be added to a tab on a screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.getAvailableScreenFields_get
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScreenableField'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get available screen fields
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/{screenId}/tabs:
    get:
      deprecated: false
      description: "Returns the list of tabs for a screen.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \ *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ when the project key is specified, providing that the screen is associated\
        \ with the project through a Screen Scheme and Issue Type Screen Scheme."
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.getAllScreenTabs_get
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The key of the project.
        in: query
        name: projectKey
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScreenableTab'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if the screen ID is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get all screen tabs
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Creates a tab for a screen.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.addScreenTab_post
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              name: Fields Tab
            schema:
              $ref: '#/components/schemas/ScreenableTab'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"name":"Fields Tab"}'
              schema:
                $ref: '#/components/schemas/ScreenableTab'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Create screen tab
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/{screenId}/tabs/{tabId}:
    delete:
      deprecated: false
      description: 'Deletes a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.deleteScreenTab_delete
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen or screen tab is not found.
      security:
      - basicAuth: []
      - {}
      summary: Delete screen tab
      tags:
      - Screens
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: 'Updates the name of a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.renameScreenTab_put
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenableTab'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":10000,"name":"Fields Tab"}'
              schema:
                $ref: '#/components/schemas/ScreenableTab'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen or screen tab is not found.
      security:
      - basicAuth: []
      - {}
      summary: Update screen tab
      tags:
      - Screens
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/screens/{screenId}/tabs/{tabId}/fields:
    get:
      deprecated: false
      description: "Returns all fields for a screen tab.\n\n**[Permissions](#permissions)\
        \ required:**\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \ *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ when the project key is specified, providing that the screen is associated\
        \ with the project through a Screen Scheme and Issue Type Screen Scheme."
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.getAllScreenTabFields_get
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: The key of the project.
        in: query
        name: projectKey
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ScreenableField'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen or screen tab is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get all screen tab fields
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Adds a field to a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.addScreenTabField_post
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              fieldId: summary
            schema:
              $ref: '#/components/schemas/AddFieldBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":"summary","name":"Summary"}'
              schema:
                $ref: '#/components/schemas/ScreenableField'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen, screen tab, or field is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Add screen tab field
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}:
    delete:
      deprecated: false
      description: 'Removes a field from a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.removeScreenTabField_delete
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the field.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen, screen tab, or field is not found.
      security:
      - basicAuth: []
      - {}
      summary: Remove screen tab field
      tags:
      - Screens
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move:
    post:
      deprecated: false
      description: 'Moves a screen tab field.


        If `after` and `position` are provided in the request, `position` is ignored.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.moveScreenTabField_post
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the field.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFieldBean'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen, screen tab, or field is not found or
            the field can't be moved to the requested position.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Move screen tab field
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}:
    post:
      deprecated: false
      description: 'Moves a screen tab.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.ScreensResource.moveScreenTab_post
      parameters:
      - description: The ID of the screen.
        in: path
        name: screenId
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the screen tab.
        in: path
        name: tabId
        required: true
        schema:
          format: int64
          type: integer
      - description: The position of tab. The base index is 0.
        in: path
        name: pos
        required: true
        schema:
          format: int32
          type: integer
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the screen or screen tab is not found or the position
            is invalid.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Move screen tab
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/screenscheme:
    get:
      deprecated: false
      description: 'Returns all screen schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.screenscheme.ScreenSchemeResource.getAllScreenSchemes_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 25
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/screenscheme?maxResults=25&startAt=0","maxResults":25,"startAt":0,"total":2,"isLast":true,"values":[{"id":10010,"name":"Employees
                screen scheme","description":"Managing employees data","screens":{"default":10017,"edit":10019,"create":10019,"view":10020}},{"id":10032,"name":"Offices
                screen scheme","description":"Managing offices data","screens":{"default":10020}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanScreenScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Get all screen schemes
      tags:
      - Screens
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/search:
    get:
      deprecated: false
      description: "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\
        \nIf the JQL query expression is too large to be encoded as a query parameter,\
        \ use the [POST](#api-rest-api-3-search-post) version of this resource.\n\n\
        This operation can be accessed anonymously.\n\n**[Permissions](#permissions)\
        \ required:** Issues are included in the response where the user has:\n\n\
        \ *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for the project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.search.SearchResource.searchForIssuesUsingJql_get
      parameters:
      - description: "The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines\
          \ the search. Note:\n\n *  If no JQL expression is provided, all issues\
          \ are returned.\n *  `username` and `userkey` cannot be used as search terms\
          \ due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden\
          \ their email address in their user profile, partial matches of the email\
          \ address will not find the user. An exact match is required."
        in: query
        name: jql
        schema:
          example: project = HSP
          type: string
        x-showInExample: 'true'
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page. To manage page
          size, Jira may return fewer items per page where a large number of fields
          are requested. The greatest number of items returned per page is achieved
          when requesting `id` or `key` only.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: "Determines how to validate the JQL query and treat the validation\
          \ results. Supported values are:\n\n *  `strict` Returns a 400 response\
          \ code if any errors are found, along with a list of all errors (and warnings).\n\
          \ *  `warn` Returns all errors as warnings.\n *  `none` No validation is\
          \ performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *\
          \  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL\
          \ is not correctly formed a 400 response code is returned, regardless of\
          \ the `validateQuery` value."
        in: query
        name: validateQuery
        schema:
          default: strict
          enum:
          - strict
          - warn
          - none
          - 'true'
          - 'false'
          type: string
      - description: "A list of fields to return for each issue, use it to retrieve\
          \ a subset of fields. This parameter accepts a comma-separated list. Expand\
          \ options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns\
          \ navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\
          \nExamples:\n\n *  `summary,comment` Returns only the summary and comments\
          \ fields.\n *  `-description` Returns all navigable (default) fields except\
          \ description.\n *  `*all,-comment` Returns all fields except comments.\n\
          \nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\
          \nNote: All navigable fields are returned by default. This differs from\
          \ [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default\
          \ is all fields."
        in: query
        name: fields
        schema:
          items:
            default: '*navigable'
            type: string
          type: array
      - description: "Use [expand](#expansion) to include additional information about\
          \ issues in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `renderedFields` Returns field values rendered\
          \ in HTML format.\n *  `names` Returns the display name of each field.\n\
          \ *  `schema` Returns the schema describing a field type.\n *  `transitions`\
          \ Returns all possible transitions for the issue.\n *  `operations` Returns\
          \ all possible operations for the issue.\n *  `editmeta` Returns information\
          \ about how each field can be edited.\n *  `changelog` Returns a list of\
          \ recent updates to an issue, sorted by date, starting from the most recent.\n\
          \ *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations`\
          \ a JSON array containing each version of a field's value, with the highest\
          \ numbered item representing the most recent version."
        in: query
        name: expand
        schema:
          type: string
      - description: A list of issue property keys for issue properties to include
          in the results. This parameter accepts a comma-separated list. Multiple
          properties can also be provided using an ampersand separated list. For example,
          `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property
          keys can be specified.
        in: query
        name: properties
        schema:
          items:
            type: string
          type: array
      - description: Reference fields by their key (rather than ID).
        in: query
        name: fieldsByKeys
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"expand":"names,schema","startAt":0,"maxResults":50,"total":1,"issues":[{"expand":"","id":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.715+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow broken"}]}]},"project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}},"comment":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}],"warningMessages":["The
                value ''bar'' does not exist for the field ''foo''."]}'
              schema:
                $ref: '#/components/schemas/SearchResults'
          description: Returned if the request is successful.
        '400':
          description: Returned if the JQL query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Search for issues using JQL (GET)
      tags:
      - Issue search
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: "Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).\n\
        \nThere is a [GET](#api-rest-api-3-search-get) version of this resource that\
        \ can be used for smaller JQL query expressions.\n\nThis operation can be\
        \ accessed anonymously.\n\n**[Permissions](#permissions) required:** Issues\
        \ are included in the response where the user has:\n\n *  *Browse projects*\
        \ [project permission](https://confluence.atlassian.com/x/yodKLg) for the\
        \ project containing the issue.\n *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg)\
        \ is configured, issue-level security permission to view the issue."
      operationId: com.atlassian.jira.rest.v2.search.SearchResource.searchForIssuesUsingJql_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              expand:
              - names
              - schema
              - operations
              fields:
              - summary
              - status
              - assignee
              fieldsByKeys: false
              jql: project = HSP
              maxResults: 15
              startAt: 0
            schema:
              $ref: '#/components/schemas/SearchRequestBean'
        description: A JSON object containing the search request.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"expand":"names,schema","startAt":0,"maxResults":50,"total":1,"issues":[{"expand":"","id":"10002","self":"https://your-domain.atlassian.net/rest/api/3/issue/10002","key":"ED-1","fields":{"watcher":{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-1/watchers","isWatching":false,"watchCount":1,"watchers":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false}]},"attachment":[{"id":10000,"self":"https://your-domain.atlassian.net/rest/api/3/attachments/10000","filename":"picture.jpg","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.715+0000","size":23123,"mimeType":"image/jpeg","content":"https://your-domain.atlassian.net/jira/attachments/10000","thumbnail":"https://your-domain.atlassian.net/jira/secure/thumbnail/10000"}],"sub-tasks":[{"id":"10000","type":{"id":"10000","name":"","inward":"Parent","outward":"Sub-task"},"outwardIssue":{"id":"10003","key":"ED-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/ED-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"description":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Main
                order flow broken"}]}]},"project":{"self":"https://your-domain.atlassian.net/rest/api/3/project/EX","id":"10000","key":"EX","name":"Example","avatarUrls":{"48x48":"https://your-domain.atlassian.net/secure/projectavatar?size=large&pid=10000","24x24":"https://your-domain.atlassian.net/secure/projectavatar?size=small&pid=10000","16x16":"https://your-domain.atlassian.net/secure/projectavatar?size=xsmall&pid=10000","32x32":"https://your-domain.atlassian.net/secure/projectavatar?size=medium&pid=10000"},"projectCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/projectCategory/10000","id":"10000","name":"FIRST","description":"First
                Project Category"},"simplified":false,"style":"classic","insight":{"totalIssueCount":100,"lastIssueUpdateTime":"2020-03-04T06:50:29.902+0000"}},"comment":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/comment/10000","id":"10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"body":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"Lorem
                ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget
                venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper
                quam laoreet nisi egestas at posuere augue semper."}]}]},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"created":"2020-03-04T06:50:30.736+0000","updated":"2020-03-04T06:50:30.736+0000","visibility":{"type":"role","value":"Administrators"}}],"issuelinks":[{"id":"10001","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"outwardIssue":{"id":"10004L","key":"PR-2","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-2","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}},{"id":"10002","type":{"id":"10000","name":"Dependent","inward":"depends
                on","outward":"is depended by"},"inwardIssue":{"id":"10004","key":"PR-3","self":"https://your-domain.atlassian.net/rest/api/3/issue/PR-3","fields":{"status":{"iconUrl":"https://your-domain.atlassian.net/images/icons/statuses/open.png","name":"Open"}}}}],"worklog":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}],"updated":1,"timetracking":{"originalEstimate":"10m","remainingEstimate":"3m","timeSpent":"6m","originalEstimateSeconds":600,"remainingEstimateSeconds":200,"timeSpentSeconds":400}}}],"warningMessages":["The
                value ''bar'' does not exist for the field ''foo''."]}'
              schema:
                $ref: '#/components/schemas/SearchResults'
          description: Returned if the request is successful.
        '400':
          description: Returned if the JQL query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Search for issues using JQL (POST)
      tags:
      - Issue search
      x-atlassian-connect-scope: READ
  /rest/api/3/securitylevel/{id}:
    get:
      deprecated: false
      description: 'Returns details of an issue security level.


        Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get)
        to obtain the IDs of issue security levels associated with the issue security
        scheme.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.IssueSecurityLevelResource.getIssueSecurityLevel_get
      parameters:
      - description: The ID of the issue security level.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/securitylevel/10021","id":"10021","description":"Only
                the reporter and internal staff can see this issue.","name":"Reporter
                Only"}'
              schema:
                $ref: '#/components/schemas/SecurityLevel'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the issue security level is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      - {}
      summary: Get issue security level
      tags:
      - Issue security level
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/serverInfo:
    get:
      deprecated: false
      description: 'Returns information about the Jira instance.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.ServerInfoResource.getServerInfo_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '{"baseUrl":"https://your-domain.atlassian.net/jira","version":"1001.0.0-SNAPSHOT","versionNumbers":[5,0,0],"buildNumber":582,"buildDate":"2020-03-04T06:50:30.446+0000","serverTime":"2020-03-04T06:50:30.446+0000","scmInfo":"1f51473f5c7b75c1a69a0090f4832cdc5053702a","serverTitle":"My
                Jira instance","defaultLocale":{"locale":"en_AU"}}'
              schema:
                $ref: '#/components/schemas/ServerInformation'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
      security:
      - basicAuth: []
      - OAuth2: []
      - {}
      summary: Get Jira instance info
      tags:
      - Server info
      x-atlassian-connect-scope: READ
  /rest/api/3/settings/columns:
    get:
      deprecated: false
      description: 'Returns the default issue navigator columns.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.SettingsResource.getIssueNavigatorDefaultColumns_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"label":"Key","value":"issuekey"},{"label":"Summary","value":"summary"}]'
              schema:
                items:
                  $ref: '#/components/schemas/ColumnItem'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get issue navigator default columns
      tags:
      - Issue navigator settings
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: 'Sets the default issue navigator columns.


        The `columns` parameter accepts a navigable field value and is expressed as
        HTML form data. To specify multiple columns, pass multiple `columns` parameters.
        For example, in curl:


        `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`


        If no column details are sent, then all default columns are removed.


        A navigable field is one that can be used as a column on the issue navigator.
        Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.SettingsResource.setIssueNavigatorDefaultColumns_put
      parameters: []
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
          multipart/form-data:
            schema:
              items:
                type: string
              type: array
        description: A navigable field value.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          description: Returned if invalid parameters are passed.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if a navigable field value is not found.
      security:
      - basicAuth: []
      summary: Set issue navigator default columns
      tags:
      - Issue navigator settings
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/status:
    get:
      deprecated: false
      description: 'Returns a list of all statuses associated with workflows.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.StatusResource.getStatuses_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}},{"self":"https://your-domain.atlassian.net/rest/api/3/status/5","description":"The
                issue is closed.","iconUrl":"https://your-domain.atlassian.net/images/icons/closed.gif","name":"Closed","id":"5","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9","id":9,"key":"completed","colorName":"green"}}]'
              schema:
                items:
                  $ref: '#/components/schemas/StatusDetails'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all statuses
      tags:
      - Workflow statuses
      x-atlassian-connect-scope: READ
  /rest/api/3/status/{idOrName}:
    get:
      deprecated: false
      description: 'Returns a status. The status must be associated with a workflow
        to be returned.


        If a name is used on more than one status, only the status found first is
        returned. Therefore, identifying the status by its ID may be preferable.


        This operation can be accessed anonymously.


        [Permissions](#permissions) required: None.'
      operationId: com.atlassian.jira.rest.v2.issue.StatusResource.getStatus_get
      parameters:
      - description: The ID or name of the status.
        in: path
        name: idOrName
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/status/10000","description":"The
                issue is currently being worked on.","iconUrl":"https://your-domain.atlassian.net/images/icons/progress.gif","name":"In
                Progress","id":"10000","statusCategory":{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}}'
              schema:
                $ref: '#/components/schemas/StatusDetails'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the status is not found.\n *  the status\
            \ is not associated with a workflow.\n *  the user does not have the required\
            \ permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get status
      tags:
      - Workflow statuses
      x-atlassian-connect-scope: READ
  /rest/api/3/statuscategory:
    get:
      deprecated: false
      description: 'Returns a list of all status categories.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.StatusCategoryResource.getStatusCategories_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"},{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/9","id":9,"key":"completed","colorName":"green"}]'
              schema:
                items:
                  $ref: '#/components/schemas/StatusCategory'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get all status categories
      tags:
      - Workflow status categories
      x-atlassian-connect-scope: READ
  /rest/api/3/statuscategory/{idOrKey}:
    get:
      deprecated: false
      description: 'Returns a status category. Status categories provided a mechanism
        for categorizing [statuses](#api-rest-api-3-status-idOrName-get).


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.StatusCategoryResource.getStatusCategory_get
      parameters:
      - description: The ID or key of the status category.
        in: path
        name: idOrKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/statuscategory/1","id":1,"key":"in-flight","colorName":"yellow","name":"In
                Progress"}'
              schema:
                $ref: '#/components/schemas/StatusCategory'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the status category is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get status category
      tags:
      - Workflow status categories
      x-atlassian-connect-scope: READ
  /rest/api/3/task/{taskId}:
    get:
      deprecated: false
      description: "Returns the status of a [long-running asynchronous task](#async).\n\
        \nWhen a task has finished, this operation returns the JSON blob applicable\
        \ to the task. See the documentation of the operation that created the task\
        \ for details. Task details are not permanently retained. As of September\
        \ 2019, details are retained for 14 days although this period may change without\
        \ notice.\n\n**[Permissions](#permissions) required:** either of:\n\n *  *Administer\
        \ Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \ *  Creator of the task."
      operationId: com.atlassian.jira.rest.v2.task.TaskResource.getTask_get
      parameters:
      - description: The ID of the task.
        in: path
        name: taskId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/task/1","id":"1","description":"Task
                description","status":"COMPLETE","result":"the task result, this may
                be any JSON","submittedBy":10000,"progress":100,"elapsedRuntime":156,"submitted":1583304635960,"started":1583304636061,"finished":1583304636161,"lastUpdate":1583304636161}'
              schema:
                $ref: '#/components/schemas/TaskProgressBeanObject'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the task is not found.
      security:
      - basicAuth: []
      - OAuth2: []
      summary: Get task
      tags:
      - Tasks
      x-atlassian-connect-scope: NONE
  /rest/api/3/task/{taskId}/cancel:
    post:
      deprecated: false
      description: "Cancels a task.\n\n**[Permissions](#permissions) required:** either\
        \ of:\n\n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \ *  Creator of the task."
      operationId: com.atlassian.jira.rest.v2.task.TaskResource.cancelTask_post
      parameters:
      - description: The ID of the task.
        in: path
        name: taskId
        required: true
        schema:
          type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Returned if cancellation of the task is not possible.
        '401':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Returned if the user does not have the necessary permission.
        '404':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Returned if the task is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Cancel task
      tags:
      - Tasks
      x-atlassian-connect-scope: NONE
      x-experimental: true
  /rest/api/3/universal_avatar/type/{type}/owner/{entityId}:
    get:
      deprecated: false
      description: 'Returns the system and custom avatars for a project or issue type.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.UniversalAvatarResource.getAvatars_get
      parameters:
      - description: The avatar type.
        in: path
        name: type
        required: true
        schema:
          enum:
          - project
          - issuetype
          type: string
      - description: The ID of the item the avatar is associated with.
        in: path
        name: entityId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"system":[{"id":"1000","isSystemAvatar":true,"isSelected":false,"isDeletable":false,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10040&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10040&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10040&avatarType=project"}}],"custom":[{"id":"1010","isSystemAvatar":false,"isSelected":false,"isDeletable":true,"urls":{"16x16":"https://your-domain.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10080&avatarType=project","24x24":"https://your-domain.atlassian.net/secure/viewavatar?size=small&avatarId=10080&avatarType=project","32x32":"https://your-domain.atlassian.net/secure/viewavatar?size=medium&avatarId=10080&avatarType=project","48x48":"https://your-domain.atlassian.net/secure/viewavatar?avatarId=10080&avatarType=project"}}]}'
              schema:
                $ref: '#/components/schemas/Avatars'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the avatar type is invalid, the associated item
            ID is missing, or the item is not found.
      security:
      - basicAuth: []
      - {}
      summary: Get avatars
      tags:
      - Avatars
      x-atlassian-connect-scope: INACCESSIBLE
    post:
      deprecated: false
      description: "Loads a custom avatar for a project or issue type.\n\nSpecify\
        \ the avatar's local file location in the body of the request. Also, include\
        \ the following headers:\n\n *  `X-Atlassian-Token: no-check` To prevent XSRF\
        \ protection blocking the request, for more information see [Special Headers](#special-request-headers).\n\
        \ *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or\
        \ PNG.\n\nFor example:  \n`curl --request POST `\n\n`--user email@example.com:<api_token>\
        \ `\n\n`--header 'X-Atlassian-Token: no-check' `\n\n`--header 'Content-Type:\
        \ image/< image_type>' `\n\n`--data-binary \"<@/path/to/file/with/your/avatar>\"\
        \ `\n\n`--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`\n\
        \nThe avatar is cropped to a square. If no crop parameters are specified,\
        \ the square originates at the top left of the image. The length of the square's\
        \ sides is set to the smaller of the height or width of the image.\n\nThe\
        \ cropped image is then used to create avatars of 16x16, 24x24, 32x32, and\
        \ 48x48 in size.\n\nAfter creating the avatar use:\n\n *  [Update issue type](#api-rest-api-3-issuetype-id-put)\
        \ to set it as the issue type's displayed avatar.\n *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put)\
        \ to set it as the project's displayed avatar.\n\n**[Permissions](#permissions)\
        \ required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.issue.UniversalAvatarResource.storeAvatar_post
      parameters:
      - description: The avatar type.
        in: path
        name: type
        required: true
        schema:
          enum:
          - project
          - issuetype
          type: string
      - description: The ID of the item the avatar is associated with.
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: The X coordinate of the top-left corner of the crop region.
        in: query
        name: x
        schema:
          default: 0
          format: int32
          type: integer
      - description: The Y coordinate of the top-left corner of the crop region.
        in: query
        name: y
        schema:
          default: 0
          format: int32
          type: integer
      - description: The length of each side of the crop region.
        in: query
        name: size
        required: true
        schema:
          format: int32
          type: integer
      requestBody:
        content:
          '*/*':
            schema: {}
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":"1000","isSystemAvatar":true,"isSelected":false,"isDeletable":false,"urls":{"16x16":"/secure/useravatar?size=xsmall&avatarId=10040&avatarType=project","24x24":"/secure/useravatar?size=small&avatarId=10040&avatarType=project","32x32":"/secure/useravatar?size=medium&avatarId=10040&avatarType=project","48x48":"/secure/useravatar?avatarId=10040&avatarType=project"}}'
              schema:
                $ref: '#/components/schemas/Avatar'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  an image isn't included in the request.\n\
            \ *  the image type is unsupported.\n *  the crop parameters extend the\
            \ crop area beyond the edge of the image."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permissions.
        '404':
          description: Returned if the avatar type is invalid, the associated item
            ID is missing, or the item is not found.
      security:
      - basicAuth: []
      - {}
      summary: Load avatar
      tags:
      - Avatars
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}:
    delete:
      deprecated: false
      description: 'Deletes an avatar from a project or issue type.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.UniversalAvatarResource.deleteAvatar_delete
      parameters:
      - description: The avatar type.
        in: path
        name: type
        required: true
        schema:
          enum:
          - project
          - issuetype
          type: string
      - description: The ID of the item the avatar is associated with.
        in: path
        name: owningObjectId
        required: true
        schema:
          type: string
      - description: The ID of the avatar.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '403':
          description: Returned if the user does not have permission to delete the
            avatar, the avatar is not deletedable.
        '404':
          description: Returned if the avatar type, associated item ID, or avatar
            ID is invalid.
      security:
      - basicAuth: []
      - {}
      summary: Delete avatar
      tags:
      - Avatars
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/user:
    delete:
      deprecated: false
      description: 'Deletes a user.


        **[Permissions](#permissions) required:** Site administration (that is, membership
        of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.removeUser_delete
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        required: true
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: key
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the user cannot be removed.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  `accountId` is missing.\n *  the user\
            \ is not found."
      security:
      - basicAuth: []
      - {}
      summary: Delete user
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
    get:
      deprecated: false
      description: 'Returns a user.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUser_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
          Required.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide)
          for details.
        in: query
        name: key
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information about\
          \ users in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `groups` includes all groups and nested\
          \ groups to which the user belongs.\n *  `applicationRoles` includes details\
          \ of all the applications to which the user has access."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}'
              schema:
                $ref: '#/components/schemas/User'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the calling user does not have the *Browse users
            and groups* global permission.
        '404':
          description: "Returned if:\n\n *  `accountId` is missing.\n *  the user\
            \ is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Get user
      tags:
      - Users
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Creates a user. This resource is retained for legacy compatibility.
        As soon as a more suitable alternative is available this resource will be
        deprecated.


        The option is provided to set or generate a password for the user. When using
        the option to generate a password, by omitting `password` from the request,
        include `"notification": "true"` to ensure the user is sent an email advising
        them that their account is created. This email includes a link for the user
        to set their password. If the notification isn''t sent for a generated password,
        the user will need to be sent a reset password request from Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.createUser_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              displayName: Mia Krystof
              emailAddress: mia@atlassian.com
              name: ''
              password: abracadabra
            schema:
              $ref: '#/components/schemas/UserWriteBean'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}'
              schema:
                $ref: '#/components/schemas/User'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid or the number of licensed
            users is exceeded.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - {}
      summary: Create user
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
      x-experimental: true
  /rest/api/3/user/assignable/multiProjectSearch:
    get:
      deprecated: false
      description: 'Returns a list of users who can be assigned issues in one or more
        projects. The list may be restricted to users whose attributes match a string.


        This operation takes the users in the range defined by `startAt` and `maxResults`,
        up to the thousandth user, and then returns only the users from that range
        that can be assigned issues in the projects. This means the operation usually
        returns fewer users than specified in `maxResults`. To get all the users who
        can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get)
        and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** None.'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findBulkAssignableUsers_get
      parameters:
      - description: A query string that is matched against user attributes, such
          as `displayName` and `emailAddress`, to find relevant users. The string
          can match the prefix of the attribute's value. For example, *query=john*
          matches a user with a `displayName` of *John Smith* and a user with an `emailAddress`
          of *johnson@example.com*. Required, unless `accountId` is specified.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: A query string that is matched exactly against user `accountId`.
          Required, unless `query` is specified.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: A list of project keys (case sensitive). This parameter accepts
          a comma-separated list.
        in: query
        name: projectKeys
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `projectKeys` is missing.\n *  `query`\
            \ or `accountId` is missing.\n *  `query` and `accountId` are provided."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if one or more of the projects is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users assignable to projects
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/assignable/search:
    get:
      deprecated: false
      description: "Returns a list of users that can be assigned to an issue. Use\
        \ this operation to find the list of users who can be assigned to:\n\n * \
        \ a new issue, by providing the `projectKeyOrId`.\n *  an updated issue, by\
        \ providing the `issueKey`.\n *  to an issue during a transition (workflow\
        \ action), by providing the `issueKey` and the transition id in `actionDescriptorId`.\
        \ You can obtain the IDs of an issue's valid transitions using the `transitions`\
        \ option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).\n\
        \nIn all these cases, you can pass an account ID to determine if a user can\
        \ be assigned to an issue. The user is returned in the response if they can\
        \ be assigned to the issue or issue transition.\n\nThis operation takes the\
        \ users in the range defined by `startAt` and `maxResults`, up to the thousandth\
        \ user, and then returns only the users from that range that can be assigned\
        \ the issue. This means the operation usually returns fewer users than specified\
        \ in `maxResults`. To get all the users who can be assigned the issue, use\
        \ [Get all users](#api-rest-api-3-users-search-get) and filter the records\
        \ in your code.\n\n**[Permissions](#permissions) required:** Permission to\
        \ access Jira."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findAssignableUsers_get
      parameters:
      - description: A query string that is matched against user attributes, such
          as `displayName`, and `emailAddress`, to find relevant users. The string
          can match the prefix of the attribute's value. For example, *query=john*
          matches a user with a `displayName` of *John Smith* and a user with an `emailAddress`
          of *johnson@example.com*. Required, unless `username` or `accountId` is
          specified.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - description: The sessionId of this request. SessionId is the same until the
          assignee is set.
        in: query
        name: sessionId
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: A query string that is matched exactly against user `accountId`.
          Required, unless `query` is specified.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: The project ID or project key (case sensitive). Required, unless
          `issueKey` is specified.
        in: query
        name: project
        schema:
          type: string
      - description: The key of the issue. Required, unless `project` is specified.
        in: query
        name: issueKey
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return. This operation may return
          less than the maximum number of items even if more are available. The operation
          fetches users up to the maximum and then, from the fetched users, returns
          only the users that can be assigned to the issue.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: The ID of the transition.
        in: query
        name: actionDescriptorId
        schema:
          format: int32
          type: integer
      - in: query
        name: recommend
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `issueKey` or `project` is missing.\n\
            \ *  `query` or `accountId` is missing.\n *  `query` and `accountId` are\
            \ provided."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the project, issue, or transition is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users assignable to issues
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/bulk:
    get:
      deprecated: false
      description: 'Returns details of the users specified by one or more account
        IDs.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.user.UserBulkResource.bulkGetUsers_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 10
          format: int32
          type: integer
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          items:
            type: string
          type: array
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: key
        schema:
          items:
            type: string
          type: array
      - description: The account ID of a user. To specify multiple users, pass multiple
          `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
        in: query
        name: accountId
        required: true
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          items:
            example: 5b10ac8d82e05b22cc7d4ef5
            maxLength: 128
            type: string
          maxLength: 128
          type: array
        x-showInExample: 'true'
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":100,"startAt":0,"total":1,"isLast":true,"values":[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}}]}'
              schema:
                $ref: '#/components/schemas/PageBeanUser'
          description: Returned if the request is successful.
        '400':
          description: Returned if `accountID` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Bulk get users
      tags:
      - Users
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/user/bulk/migration:
    get:
      deprecated: false
      description: 'Returns the account IDs for the users specified in the `key` or
        `username` parameters. Note that multiple `key` or `username` parameters can
        be specified.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.user.UserBulkResource.bulkGetUsersMigration_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 10
          format: int32
          type: integer
      - description: Username of a user. To specify multiple users, pass multiple
          copies of this parameter. For example, `username=fred&username=barney`.
          Required if `key` isn't provided. Cannot be provided if `key` is present.
        in: query
        name: username
        schema:
          items:
            type: string
          type: array
      - description: Key of a user. To specify multiple users, pass multiple copies
          of this parameter. For example, `key=fred&key=barney`. Required if `username`
          isn't provided. Cannot be provided if `username` is present.
        in: query
        name: key
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              example: '[{"username":"mia","accountId":"5b10a2844c20165700ede21g"},{"username":"emma","accountId":"5b10ac8d82e05b22cc7d4ef5"}]'
              schema:
                items:
                  $ref: '#/components/schemas/UserMigrationBean'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if `key` or `username`
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Get account IDs for users
      tags:
      - Users
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/user/columns:
    delete:
      deprecated: false
      description: "Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg)\
        \ for the user to the system default. If `accountId` is not passed, the calling\
        \ user's default columns are reset.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ to set the columns on any user.\n *  Permission to access Jira, to set the\
        \ calling user's columns."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.resetUserColumns_delete
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
      security:
      - basicAuth: []
      - {}
      summary: Reset user default columns
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: "Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg)\
        \ for the user. If `accountId` is not passed in the request, the calling user's\
        \ details are returned.\n\n**[Permissions](#permissions) required:**\n\n *\
        \  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl),\
        \ to get the column details for any user.\n *  Permission to access Jira,\
        \ to get the calling user's column details."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUserDefaultColumns_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ColumnItem'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the requested user is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Get user default columns
      tags:
      - Users
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg)\
        \ for the user. If an account ID is not passed, the calling user's default\
        \ columns are set. If no column details are sent, then all default columns\
        \ are removed.\n\nThe parameters for this resource are expressed as HTML form\
        \ data. For example, in curl:\n\n`curl -X PUT -d columns=summary -d columns=description\
        \ https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global\
        \ permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns\
        \ on any user.\n *  Permission to access Jira, to set the calling user's columns."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.setUserColumns_put
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
          multipart/form-data:
            schema:
              items:
                type: string
              type: array
        description: The ID of a column to set. To set multiple columns, send multiple
          `columns` parameters.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the requested user is not found.
        '500':
          description: Returned if an invalid issue table column ID is sent.
      security:
      - basicAuth: []
      - {}
      summary: Set user default columns
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/user/email:
    get:
      deprecated: false
      description: Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      operationId: com.atlassian.jira.rest.v2.user.UnrestrictedUserEmailResource.getUserEmail_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.
        in: query
        name: accountId
        required: true
        schema:
          maxLength: 128
          type: string
      responses:
        '200':
          content:
            application/json:
              example: name@example.com
              schema:
                $ref: '#/components/schemas/UnrestrictedUserEmail'
          description: Returned if the request is successful.
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing from the request (for example if a user is trying to access this
            API).
        '404':
          description: Returned if a user with the given `accountId` doesn't exist
        '503':
          description: Indicates the API is not currently enabled
      security:
      - basicAuth: []
      summary: Get user email
      tags:
      - Users
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
      x-experimental: true
  /rest/api/3/user/email/bulk:
    get:
      deprecated: false
      description: Returns a user's email address. This API is only available to apps
        approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
      operationId: com.atlassian.jira.rest.v2.user.UnrestrictedUserEmailResource.getUserEmailBulk_get
      parameters:
      - description: The account IDs of the users for which emails are required. An
          `accountId` is an identifier that uniquely identifies the user across all
          Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this
          should be treated as an opaque identifier (that is, do not assume any structure
          in the value).
        in: query
        name: accountId
        required: true
        schema:
          items:
            maxLength: 128
            type: string
          maxLength: 128
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnrestrictedUserEmail'
          description: Returned if the request is successful.
        '400':
          description: Returned if the calling app is not approved to use this API.
        '401':
          description: Returned if the authentication credentials are incorrect, or
            missing from the request (for example if a user is trying to access this
            API).
        '503':
          description: Indicates the API is not currently enabled.
      security:
      - basicAuth: []
      summary: Get user email bulk
      tags:
      - Users
      x-atlassian-connect-scope: ACCESS_EMAIL_ADDRESSES
      x-experimental: true
  /rest/api/3/user/groups:
    get:
      deprecated: false
      description: 'Returns the groups to which a user belongs.


        **[Permissions](#permissions) required:** *Browse users and groups* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.getUserGroups_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        required: true
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: key
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"name":"jira-administrators","self":"https://your-domain.atlassian.net/rest/api/3/group?groupname=jira-administrators"}'
              schema:
                items:
                  $ref: '#/components/schemas/GroupName'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the calling user does not have the *Browse users
            and groups* global permission.
        '404':
          description: "Returned if:\n\n *  `accountId` is missing.\n *  the user\
            \ is not found."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Get user groups
      tags:
      - Users
      x-atlassian-connect-scope: READ
  /rest/api/3/user/permission/search:
    get:
      deprecated: false
      description: "Returns a list of users who fulfill these criteria:\n\n *  their\
        \ user attributes match a search string.\n *  they have a set of permissions\
        \ for a project or issue.\n\nIf no search string is provided, a list of all\
        \ users with the permissions is returned.\n\nThis operation takes the users\
        \ in the range defined by `startAt` and `maxResults`, up to the thousandth\
        \ user, and then returns only the users from that range that match the search\
        \ string and have permission for the project or issue. This means the operation\
        \ usually returns fewer users than specified in `maxResults`. To get all the\
        \ users who match the search string and have permission for the project or\
        \ issue, use [Get all users](#api-rest-api-3-users-search-get) and filter\
        \ the records in your code.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:**\n\n *  *Administer Jira* [global\
        \ permission](https://confluence.atlassian.com/x/x4dKLg), to get users for\
        \ any project.\n *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)\
        \ for a project, to get users for that project."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsersWithAllPermissions_get
      parameters:
      - description: A query string that is matched against user attributes, such
          as `displayName` and `emailAddress`, to find relevant users. The string
          can match the prefix of the attribute's value. For example, *query=john*
          matches a user with a `displayName` of *John Smith* and a user with an `emailAddress`
          of *johnson@example.com*. Required, unless `accountId` is specified.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: A query string that is matched exactly against user `accountId`.
          Required, unless `query` is specified.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: "A list of permissions. This parameter accepts a comma-separated\
          \ list. The valid permissions are:\n\n *  ASSIGNABLE\\_USER\n *  ASSIGN\\\
          _ISSUE\n *  ATTACHMENT\\_DELETE\\_ALL\n *  ATTACHMENT\\_DELETE\\_OWN\n *\
          \  BROWSE\n *  CLOSE\\_ISSUE\n *  COMMENT\\_DELETE\\_ALL\n *  COMMENT\\\
          _DELETE\\_OWN\n *  COMMENT\\_EDIT\\_ALL\n *  COMMENT\\_EDIT\\_OWN\n *  COMMENT\\\
          _ISSUE\n *  CREATE\\_ATTACHMENT\n *  CREATE\\_ISSUE\n *  DELETE\\_ISSUE\n\
          \ *  EDIT\\_ISSUE\n *  LINK\\_ISSUE\n *  MANAGE\\_WATCHER\\_LIST\n *  MODIFY\\\
          _REPORTER\n *  MOVE\\_ISSUE\n *  PROJECT\\_ADMIN\n *  RESOLVE\\_ISSUE\n\
          \ *  SCHEDULE\\_ISSUE\n *  SET\\_ISSUE\\_SECURITY\n *  TRANSITION\\_ISSUE\n\
          \ *  VIEW\\_VERSION\\_CONTROL\n *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n *  VIEW\\\
          _WORKFLOW\\_READONLY\n *  WORKLOG\\_DELETE\\_ALL\n *  WORKLOG\\_DELETE\\\
          _OWN\n *  WORKLOG\\_EDIT\\_ALL\n *  WORKLOG\\_EDIT\\_OWN\n *  WORK\\_ISSUE"
        in: query
        name: permissions
        required: true
        schema:
          type: string
      - description: The issue key for the issue.
        in: query
        name: issueKey
        schema:
          type: string
      - description: The project key for the project (case sensitive).
        in: query
        name: projectKey
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n\
            \ *  `query` or `accountId` is missing.\n *  `query` and `accountId` are\
            \ provided.\n *  `permissions` is empty or contains an invalid entry."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the issue or project is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users with permissions
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/picker:
    get:
      deprecated: false
      description: 'Returns a list of users whose attributes match the query term.
        The returned object includes the `html` field where the matched query term
        is highlighted with the HTML strong tag. A list of account IDs can be provided
        to exclude users from the results.


        This operation takes the users in the range defined by `maxResults`, up to
        the thousandth user, and then returns only the users from that range that
        match the query term. This means the operation usually returns fewer users
        than specified in `maxResults`. To get all the users who match the query term,
        use [Get all users](#api-rest-api-3-users-search-get) and filter the records
        in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global
        permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and
        calls by users without the required permission return search results for an
        exact name match only.'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsersForPicker_get
      parameters:
      - description: A query string that is matched against user attributes, such
          as `displayName`, and `emailAddress`, to find relevant users. The string
          can match the prefix of the attribute's value. For example, *query=john*
          matches a user with a `displayName` of *John Smith* and a user with an `emailAddress`
          of *johnson@example.com*.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: The maximum number of items to return. The total number of matched
          users is returned in `total`.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: Include the URI to the user's avatar.
        in: query
        name: showAvatar
        schema:
          default: false
          type: boolean
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: exclude
        schema:
          items:
            type: string
          type: array
      - description: A list of account IDs to exclude from the search results. This
          parameter accepts a comma-separated list. Multiple account IDs can also
          be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`.
          Cannot be provided with `exclude`.
        in: query
        name: excludeAccountIds
        schema:
          items:
            type: string
          type: array
      - in: query
        name: avatarSize
        schema:
          type: string
      - in: query
        name: excludeConnectUsers
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"users":[{"accountId":"5b10a2844c20165700ede21g","accountType":"atlassian","name":"mia","key":"mia","html":"<strong>Mi</strong>a
                Krystof - <strong>mi</strong>a@example.com (<strong>mi</strong>a)","displayName":"Mia
                Krystof","avatarUrl":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16"}],"total":25,"header":"Showing
                20 of 25 matching groups"}'
              schema:
                $ref: '#/components/schemas/FoundUsers'
          description: Returned if the request is successful.
        '400':
          description: Returned if `exclude` and `excludeAccountIds` are provided.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users for picker
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/properties:
    get:
      deprecated: false
      description: "Returns the keys of all properties for a user.\n\nNote: This operation\
        \ does not access the [user properties](https://confluence.atlassian.com/x/8YxjL)\
        \ created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ to access the property keys on any user.\n *  Access to Jira, to access\
        \ the calling user's property keys."
      operationId: com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.getUserPropertyKeys_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: userKey
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"keys":[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/EX-2/properties/issue.support","key":"issue.support"}]}'
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Get user property keys
      tags:
      - User properties
      x-atlassian-connect-scope: READ
  /rest/api/3/user/properties/{propertyKey}:
    delete:
      deprecated: false
      description: "Deletes a property from a user.\n\nNote: This operation does not\
        \ access the [user properties](https://confluence.atlassian.com/x/8YxjL) created\
        \ and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n\
        \ *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ to delete a property from any user.\n *  Access to Jira, to delete a property\
        \ from the calling user's record."
      operationId: com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.deleteUserProperty_delete
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: userKey
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: The key of the user's property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the user property is deleted.
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the user or the property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Delete user property
      tags:
      - User properties
      x-atlassian-connect-scope: DELETE
    get:
      deprecated: false
      description: "Returns the value of a user's property. If no property key is\
        \ provided [Get user property keys](#api-rest-api-3-user-properties-get) is\
        \ called.\n\nNote: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL)\
        \ created and maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\
        \n *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ to get a property from any user.\n *  Access to Jira, to get a property\
        \ from the calling user's record."
      operationId: com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.getUserProperty_get
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: userKey
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: The key of the user's property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"issue.support","value":{"system.conversation.id":"b1bf38be-5e94-4b40-a3b8-9278735ee1e6","system.support.time":"1m"}}'
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Get user property
      tags:
      - User properties
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Sets the value of a user's property. Use this resource to store\
        \ custom data against a user.\n\nNote: This operation does not access the\
        \ [user properties](https://confluence.atlassian.com/x/8YxjL) created and\
        \ maintained in Jira.\n\n**[Permissions](#permissions) required:**\n\n * \
        \ *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg),\
        \ to set a property on any user.\n *  Access to Jira, to set a property on\
        \ the calling user's record."
      operationId: com.atlassian.jira.rest.v2.userproperty.UserPropertyResource.setUserProperty_put
      parameters:
      - description: The account ID of the user, which uniquely identifies the user
          across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        in: query
        name: accountId
        schema:
          example: 5b10ac8d82e05b22cc7d4ef5
          maxLength: 128
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: userKey
        schema:
          type: string
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: The key of the user's property. The maximum length is 255 characters.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the user property is updated.
        '201':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the user property is created.
        '400':
          description: Returned if `accountId` is missing.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission
            or is not accessing their user record.
        '404':
          description: Returned if the user is not found.
        '405':
          description: Returned if the property key is not specified.
      security:
      - basicAuth: []
      - OAuth2:
        - write:jira-work
      summary: Set user property
      tags:
      - User properties
      x-atlassian-connect-scope: WRITE
  /rest/api/3/user/search:
    get:
      deprecated: false
      description: 'Returns a list of users that match the search string and property.


        This operation takes the users in the range defined by `startAt` and `maxResults`,
        up to the thousandth user, and then returns only the users from that range
        that match the search string and property. This means the operation usually
        returns fewer users than specified in `maxResults`. To get all the users who
        match the search string and property, use [Get all users](#api-rest-api-3-users-search-get)
        and filter the records in your code.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse users and groups* [global
        permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or
        calls by users without the required permission return empty search results.'
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsers_get
      parameters:
      - description: A query string that is matched against user attributes ( `displayName`,
          and `emailAddress`) to find relevant users. The string can match the prefix
          of the attribute's value. For example, *query=john* matches a user with
          a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.
          Required, unless `accountId` or `property` is specified.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - in: query
        name: username
        schema:
          type: string
      - description: A query string that is matched exactly against a user `accountId`.
          Required, unless `query` or `property` is specified.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: 'A query string used to search properties. Property keys are
          specified by path, so property keys containing dot (.) or equals (=) characters
          cannot be used. The query string cannot be specified using a JSON object.
          Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}`
          use `thepropertykey.something.nested=1`. Required, unless `accountId` or
          `query` is specified.'
        in: query
        name: property
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `accountId`, `query` or `property` is\
            \ missing.\n *  `query` and `accountId` are provided.\n *  `property`\
            \ parameter is not valid."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/search/query:
    get:
      deprecated: false
      description: "Finds users with a structured query and returns user details.\n\
        \nThis operation takes the users in the range defined by `startAt` and `maxResults`,\
        \ up to the thousandth user, and then returns only the users from that range\
        \ that match the structured query. This means the operation usually returns\
        \ fewer users than specified in `maxResults`. To get all the users who match\
        \ the structured query, use [Get all users](#api-rest-api-3-users-search-get)\
        \ and filter the records in your code.\n\n**[Permissions](#permissions) required:**\
        \ *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users\
        \ that are assignees of at least one issue in project *PROJ*.\n *  `is assignee\
        \ of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1*\
        \ or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are\
        \ reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1,\
        \ PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n\
        \ *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues\
        \ *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users\
        \ that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is\
        \ transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition\
        \ on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path\
        \ is \"property value\"` Returns users with the entity property value.\n\n\
        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ...\
        \ PROJ-n)*. Statements can be combined using the `AND` and `OR` operators\
        \ to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path\
        \ is \"property value\"`"
      operationId: com.atlassian.jira.rest.v2.search.UserSearchResource.findUsersByQuery_get
      parameters:
      - description: The search query.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanUser'
          description: Returned if the request is successful.
        '400':
          description: Returned if the query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '408':
          description: Returned if the search is timed out.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Find users by query
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/search/query/key:
    get:
      deprecated: false
      description: "Finds users with a structured query and returns a list of user\
        \ keys.\n\nThis operation takes the users in the range defined by `startAt`\
        \ and `maxResults`, up to the thousandth user, and then returns only the users\
        \ from that range that match the structured query. This means the operation\
        \ usually returns fewer users than specified in `maxResults`. To get all the\
        \ users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get)\
        \ and filter the records in your code.\n\n**[Permissions](#permissions) required:**\
        \ *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n\
        \nThe query statements are:\n\n *  `is assignee of PROJ` Returns the users\
        \ that are assignees of at least one issue in project *PROJ*.\n *  `is assignee\
        \ of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1*\
        \ or *PROJ-2*.\n *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are\
        \ reporters on the issues *PROJ-1* or *PROJ-2*.\n *  `is watcher of (PROJ-1,\
        \ PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.\n\
        \ *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues\
        \ *PROJ-1* or *PROJ-2*.\n *  `is commenter of (PROJ-1, PROJ-2)` Returns users\
        \ that have posted a comment on the issues *PROJ-1* or *PROJ-2*.\n *  `is\
        \ transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition\
        \ on issues *PROJ-1* or *PROJ-2*.\n *  `[propertyKey].entity.property.path\
        \ is \"property value\"` Returns users with the entity property value.\n\n\
        The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ...\
        \ PROJ-n)*. Statements can be combined using the `AND` and `OR` operators\
        \ to form more complex queries. For example:\n\n`is assignee of PROJ AND [propertyKey].entity.property.path\
        \ is \"property value\"`"
      operationId: com.atlassian.jira.rest.v2.search.UserSearchResource.findUserKeysByQuery_get
      parameters:
      - description: The search query.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBeanUserKey'
          description: Returned if the request is successful.
        '400':
          description: Returned if the query is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '408':
          description: Returned if the search is timed out.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      summary: Find user keys by query
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/user/viewissue/search:
    get:
      deprecated: false
      description: "Returns a list of users who fulfill these criteria:\n\n *  their\
        \ user attributes match a search string.\n *  they have permission to browse\
        \ issues.\n\nUse this resource to find users who can browse:\n\n *  an issue,\
        \ by providing the `issueKey`.\n *  any issue in a project, by providing the\
        \ `projectKey`.\n\nThis operation takes the users in the range defined by\
        \ `startAt` and `maxResults`, up to the thousandth user, and then returns\
        \ only the users from that range that match the search string and have permission\
        \ to browse issues. This means the operation usually returns fewer users than\
        \ specified in `maxResults`. To get all the users who match the search string\
        \ and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get)\
        \ and filter the records in your code.\n\nThis operation can be accessed anonymously.\n\
        \n**[Permissions](#permissions) required:** *Browse users and groups* [global\
        \ permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls\
        \ and calls by users without the required permission return empty search results."
      operationId: com.atlassian.jira.rest.v2.issue.UserResource.findUsersWithBrowsePermission_get
      parameters:
      - description: A query string that is matched against user attributes, such
          as `displayName` and `emailAddress`, to find relevant users. The string
          can match the prefix of the attribute's value. For example, *query=john*
          matches a user with a `displayName` of *John Smith* and a user with an `emailAddress`
          of *johnson@example.com*. Required, unless `accountId` is specified.
        in: query
        name: query
        schema:
          example: query
          type: string
        x-showInExample: 'true'
      - description: This parameter is no longer available and will be removed from
          the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/)
          for details.
        in: query
        name: username
        schema:
          type: string
      - description: A query string that is matched exactly against user `accountId`.
          Required, unless `query` is specified.
        in: query
        name: accountId
        schema:
          maxLength: 128
          type: string
      - description: The issue key for the issue. Required, unless `projectKey` is
          specified.
        in: query
        name: issueKey
        schema:
          type: string
      - description: The project key for the project (case sensitive). Required, unless
          `issueKey` is specified.
        in: query
        name: projectKey
        schema:
          type: string
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  `issueKey` or `projectKey` is missing.\n\
            \ *  `query` or `accountId` is missing.\n *  `query` and `accountId` are\
            \ provided."
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the issue or project is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Find users with browse permission
      tags:
      - User search
      x-atlassian-connect-scope: READ
  /rest/api/3/users:
    get:
      deprecated: false
      description: 'Returns a list of all (active and inactive) users.


        **[Permissions](#permissions) required:** *Browse users and groups* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.UsersResource.getAllUsersDefault_get
      parameters:
      - description: The index of the first item to return.
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '403':
          description: Returned if the user doesn't have the necessary permission.
        '409':
          description: Returned if the request takes longer than 10 seconds or is
            interrupted.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Get all users default
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/users/search:
    get:
      deprecated: false
      description: 'Returns a list of all (active and inactive) users.


        **[Permissions](#permissions) required:** *Browse users and groups* [global
        permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.issue.UsersResource.getAllUsers_get
      parameters:
      - description: The index of the first item to return.
        in: query
        name: startAt
        schema:
          default: 0
          format: int32
          type: integer
      - description: The maximum number of items to return.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":false},{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10ac8d82e05b22cc7d4ef5","key":"","accountId":"5b10ac8d82e05b22cc7d4ef5","name":"","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/AA-3.png?size=32&s=32"},"displayName":"Emma
                Richards","active":false}]'
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '403':
          description: Returned if the user doesn't have the necessary permission.
        '409':
          description: Returned if the request takes longer than 10 seconds or is
            interrupted.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-user
      - {}
      summary: Get all users
      tags:
      - Users
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/version:
    post:
      deprecated: false
      description: 'Creates a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project the version is added to.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.createVersion_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              archived: false
              description: An excellent version
              name: New Version 1
              projectId: 10000
              releaseDate: '2010-07-06T00:00:00.000Z'
              released: true
            schema:
              $ref: '#/components/schemas/Version'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","userReleaseDate":"6/Jul/2010","project":"PXA","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the project is not found.\n *  the user\
            \ does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Create version
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}:
    delete:
      deprecated: true
      description: 'Deletes a project version.


        Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post)
        that supports swapping version values in custom fields, in addition to the
        swapping for `fixVersion` and `affectedVersion` provided in this resource.


        Alternative versions can be provided to update issues that use the deleted
        version in `fixVersion` or `affectedVersion`. If alternatives are not provided,
        occurrences of `fixVersion` and `affectedVersion` that contain the deleted
        version are cleared.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.deleteVersion_delete
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the version to update `fixVersion` to when the field
          contains the deleted version. The replacement version must be in the same
          project as the version being deleted and cannot be the version being deleted.
        in: query
        name: moveFixIssuesTo
        schema:
          type: string
      - description: The ID of the version to update `affectedVersion` to when the
          field contains the deleted version. The replacement version must be in the
          same project as the version being deleted and cannot be the version being
          deleted.
        in: query
        name: moveAffectedIssuesTo
        schema:
          type: string
      responses:
        '204':
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: "Returned if:\n\n *  the authentication credentials are incorrect.\n\
            \ *  the user does not have the required permissions."
        '404':
          description: Returned if the version is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete version
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
    get:
      deprecated: false
      description: 'Returns a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project containing the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.getVersion_get
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: "Use [expand](#expansion) to include additional information about\
          \ version in the response. This parameter accepts a comma-separated list.\
          \ Expand options include:\n\n *  `operations` Returns the list of operations\
          \ available for this version.\n *  `issuesstatus` Returns the count of issues\
          \ in this version for each of the status categories *to do*, *in progress*,\
          \ *done*, and *unmapped*. The *unmapped* property represents the number\
          \ of issues with a status other than *to do*, *in progress*, and *done*."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","overdue":true,"userReleaseDate":"6/Jul/2010","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: Returned if the version is not found or the user does not have
            the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get version
      tags:
      - Project versions
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: 'Updates a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.updateVersion_put
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              archived: false
              description: An excellent version
              id: '10000'
              name: New Version 1
              overdue: true
              projectId: 10000
              releaseDate: '2010-07-06T00:00:00.000Z'
              released: true
              self: https://your-domain.atlassian.net/rest/api/~ver~/version/10000
              userReleaseDate: 6/Jul/2010
            schema:
              $ref: '#/components/schemas/Version'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","userReleaseDate":"6/Jul/2010","project":"PXA","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  the request is invalid.\n *  the user\
            \ does not have the required permissions."
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the version is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Update version
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/mergeto/{moveIssuesTo}:
    put:
      deprecated: false
      description: 'Merges two project versions. The merge is completed by deleting
        the version specified in `id` and replacing any occurrences of its ID in `fixVersion`
        with the version ID specified in `moveIssuesTo`.


        Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post)
        instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`,
        and custom fields.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.mergeVersions_put
      parameters:
      - description: The ID of the version to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the version to merge into.
        in: path
        name: moveIssuesTo
        required: true
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: "Returned if:\n\n *  the authentication credentials are incorrect\
            \ or missing.\n *  the user does not have the required permissions."
        '404':
          description: Returned if the version to be deleted or the version to merge
            to are not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Merge versions
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/move:
    post:
      deprecated: false
      description: 'Modifies the version''s sequence within the project, which affects
        the display order of the versions in Jira.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project permission
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.moveVersion_post
      parameters:
      - description: The ID of the version to be moved.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              after: https://your-domain.atlassian.net/rest/api/~ver~/version/10000
            schema:
              $ref: '#/components/schemas/VersionMoveBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","id":"10000","description":"An
                excellent version","name":"New Version 1","archived":false,"released":true,"releaseDate":"2010-07-06","overdue":true,"userReleaseDate":"6/Jul/2010","projectId":10000}'
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '400':
          description: "Returned if:\n\n *  no body parameters are provided.\n * \
            \ `after` and `position` are provided.\n *  `position` is invalid."
        '401':
          description: "Returned if:\n\n *  the authentication credentials are incorrect\
            \ or missing\n *  the user does not have the required commissions."
        '404':
          description: Returned if the version or move after version are not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Move version
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/relatedIssueCounts:
    get:
      deprecated: false
      description: "Returns the following counts for a version:\n\n *  Number of issues\
        \ where the `fixVersion` is set to the version.\n *  Number of issues where\
        \ the `affectedVersion` is set to the version.\n *  Number of issues where\
        \ a version custom field is set to the version.\n\nThis operation can be accessed\
        \ anonymously.\n\n**[Permissions](#permissions) required:** *Browse projects*\
        \ project permission for the project that contains the version."
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.getVersionRelatedIssues_get
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","issuesFixedCount":23,"issuesAffectedCount":101,"issueCountWithCustomFieldsShowingVersion":54,"customFieldUsage":[{"fieldName":"Field1","customFieldId":10000,"issueCountWithVersionInCustomField":2},{"fieldName":"Field2","customFieldId":10010,"issueCountWithVersionInCustomField":3}]}'
              schema:
                $ref: '#/components/schemas/VersionIssueCounts'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: "Returned if:\n\n *  the version is not found.\n *  the user\
            \ does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get version's related issues count
      tags:
      - Project versions
      x-atlassian-connect-scope: READ
  /rest/api/3/version/{id}/removeAndSwap:
    post:
      deprecated: false
      description: 'Deletes a project version.


        Alternative versions can be provided to update issues that use the deleted
        version in `fixVersion`, `affectedVersion`, or any version picker custom fields.
        If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`,
        and any version picker custom field, that contain the deleted version, are
        cleared. Any replacement version must be in the same project as the version
        being deleted and cannot be the version being deleted.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.deleteAndReplaceVersion_post
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAndReplaceVersionBean'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the version to delete is not found.\n\
            \ *  the user does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      - {}
      summary: Delete and replace version
      tags:
      - Project versions
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/unresolvedIssueCount:
    get:
      deprecated: false
      description: 'Returns counts of the issues and unresolved issues for the project
        version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project permission
        for the project that contains the version.'
      operationId: com.atlassian.jira.rest.v2.issue.VersionResource.getVersionUnresolvedIssues_get
      parameters:
      - description: The ID of the version.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","issuesUnresolvedCount":23,"issuesCount":30}'
              schema:
                $ref: '#/components/schemas/VersionUnresolvedIssuesCount'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          description: "Returned if:\n\n *  the version is not found.\n *  the user\
            \ does not have the required permissions."
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      - {}
      summary: Get version's unresolved issues count
      tags:
      - Project versions
      x-atlassian-connect-scope: READ
  /rest/api/3/webhook:
    delete:
      deprecated: false
      description: 'Removes webhooks by ID. Only webhooks registered by the calling
        Connect app are removed. If webhooks created by other apps are specified,
        they are ignored.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)
        can use this operation.'
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.deleteWebhookById_delete
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              webhookIds:
              - 10000
              - 10001
              - 10042
            schema:
              $ref: '#/components/schemas/ContainerForWebhookIDs'
        required: true
      responses:
        '202':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the list of webhook IDs is missing.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Delete webhooks by ID
      tags:
      - Webhooks
      x-atlassian-connect-scope: READ
    get:
      deprecated: false
      description: 'Returns the webhooks registered by the calling app.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)
        can use this operation.'
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.getDynamicWebhooksForApp_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 100
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":2,"startAt":0,"total":100,"isLast":false,"values":[{"id":10000,"jqlFilter":"project
                = PRJ","events":["jira:issue_updated","jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000"},{"id":10001,"jqlFilter":"issuetype
                = Bug","events":["jira:issue_created"],"expirationDate":"2019-06-01T12:42:30.000+0000"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanWebhook'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get dynamic webhooks for app
      tags:
      - Webhooks
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: 'Registers webhooks.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)
        can use this operation.'
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.registerDynamicWebhooks_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              url: https://your-app.example.com/webhook-received
              webhooks:
              - events:
                - jira:issue_created
                - jira:issue_updated
                jqlFilter: project = PROJ
              - events:
                - jira:issue_deleted
                jqlFilter: project IN (PROJ, EXP) AND status = done
            schema:
              $ref: '#/components/schemas/WebhookRegistrationDetails'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"webhookRegistrationResult":[{"createdWebhookId":1000},{"errors":["The
                clause watchCount is unsupported"]},{"createdWebhookId":1001}]}'
              schema:
                $ref: '#/components/schemas/ContainerForRegisteredWebhooks'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Register dynamic webhooks
      tags:
      - Webhooks
      x-atlassian-connect-scope: READ
  /rest/api/3/webhook/failed:
    get:
      deprecated: false
      description: 'Returns webhooks that have recently failed to be delivered to
        the requesting app after the maximum number of retries.


        After 72 hours the failure may no longer be returned by this operation.


        The oldest failure is returned first.


        This method uses a cursor-based pagination. To request the next page use the
        failure time of the last webhook on the list as the `failedAfter` value or
        use the URL provided in `next`.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)
        can use this operation.'
      operationId: com.atlassian.jira.rest.v2.webhook.FailedWebhookResource.getFailedWebhooks_get
      parameters:
      - description: The maximum number of webhooks to return per page. If obeying
          the maxResults directive would result in records with the same failure time
          being split across pages, the directive is ignored and all records with
          the same failure time included on the page.
        in: query
        name: maxResults
        schema:
          format: int32
          type: integer
      - description: The time after which any webhook failure must have occurred for
          the record to be returned, expressed as milliseconds since the UNIX epoch.
        in: query
        name: after
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"values":[{"id":"1","body":"{\"data\":\"webhook data\"}","url":"https://example.com","failureTime":1573118132000},{"id":"2","url":"https://example.com","failureTime":1573540473480}],"maxResults":100,"next":"https://your-domain.atlassian.net/rest/api/3/webhook/failed?failedAfter=1573540473480&maxResults=100"}'
              schema:
                $ref: '#/components/schemas/FailedWebhooks'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: 400 response
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get failed webhooks
      tags:
      - Webhooks
      x-atlassian-connect-scope: READ
      x-experimental: true
  /rest/api/3/webhook/refresh:
    put:
      deprecated: false
      description: 'Webhooks registered through the REST API expire after 30 days.
        Call this resource periodically to keep them alive.


        Unrecognized webhook IDs (nonexistent or belonging to other apps) are ignored.


        **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)
        can use this operation.'
      operationId: com.atlassian.jira.rest.v2.webhook.DynamicWebhookResource.refreshWebhooks_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              webhookIds:
              - 10000
              - 10001
              - 10042
            schema:
              $ref: '#/components/schemas/ContainerForWebhookIDs'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"expirationDate":"2019-06-01T12:42:30.000+0000"}'
              schema:
                $ref: '#/components/schemas/WebhooksExpirationDate'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Extend webhook life
      tags:
      - Webhooks
      x-atlassian-connect-scope: READ
  /rest/api/3/workflow:
    get:
      deprecated: true
      description: 'Returns all workflows in Jira or a workflow. Deprecated, use [Get
        workflows paginated](#api-rest-api-3-workflow-search-get).


        If the `workflowName` parameter is specified, the workflow is returned as
        an object (not in an array). Otherwise, an array of workflow objects is returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.WorkflowsResource.getAllWorkflows_get
      parameters:
      - description: The name of the workflow to be returned. Only one workflow can
          be specified.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"name":"classic workflow","description":"A classic Jira
                workflow","lastModifiedDate":"01-01-2011","lastModifiedUser":"admin","lastModifiedUserAccountId":"5b10a2844c20165700ede21g","steps":5,"default":true}]'
              schema:
                items:
                  $ref: '#/components/schemas/DeprecatedWorkflow'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get all workflows
      tags:
      - Workflows
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflow/rule/config:
    get:
      deprecated: false
      description: "Returns a paginated list of workflows with transition rules. The\
        \ workflows can be filtered to return only those containing workflow transition\
        \ rules:\n\n *  of one or more transition rule types, such as [workflow post\
        \ functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).\n\
        \ *  matching one or more transition rule keys.\n\nOnly workflows containing\
        \ transition rules created by the calling Connect app are returned. However,\
        \ if a workflow is returned all transition rules that match the filters are\
        \ returned for that workflow.\n\nDue to server-side optimizations, workflows\
        \ with an empty list of rules may be returned; these workflows can be ignored.\n\
        \n**[Permissions](#permissions) required:** Only Connect apps can use this\
        \ operation."
      operationId: com.atlassian.jira.rest.v2.admin.workflow.WorkflowRuleConfigResource.getWorkflowTransitionRuleConfigurations_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 10
          format: int32
          type: integer
      - description: The types of the transition rules to return.
        in: query
        name: types
        required: true
        schema:
          items:
            enum:
            - postfunction
            - condition
            - validator
            type: string
          type: array
          uniqueItems: true
      - description: The transition rule class keys, as defined in the Connect app
          descriptor, of the transition rules to return.
        in: query
        name: keys
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: Use [expand](#expansion) to include additional information in
          the response. This parameter accepts `transition`, which, for each rule,
          returns information about the transition the rule is assigned to.
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":10,"startAt":0,"total":1,"isLast":true,"values":[{"workflowId":{"name":"My
                Workflow name","draft":false},"postFunctions":[{"id":"b4d6cbdc-59f5-11e9-8647-d663bd873d93","key":"postfunction-key","configuration":{"value":"{
                \"color\": \"red\" }"},"transition":{"id":1,"name":"Open"}}],"conditions":[{"id":"d663bd873d93-59f5-11e9-8647-b4d6cbdc","key":"condition-key","configuration":{"value":"{
                \"size\": \"medium\" }"},"transition":{"id":1,"name":"Open"}}],"validators":[{"id":"11e9-59f5-b4d6cbdc-8647-d663bd873d93","key":"validator-key","configuration":{"value":"\"{
                \\\"shape\\\": \\\"square\\\" }\""},"transition":{"id":1,"name":"Open"}}]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanWorkflowTransitionRules'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
        '404':
          description: Returned if the any transition rule type is not supported.
      security:
      - basicAuth: []
      summary: Get workflow transition rule configurations
      tags:
      - Workflow transition rules
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: "Updates configuration of workflow transition rules. The following\
        \ rule types are supported:\n\n *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)\n\
        \ *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)\n\
        \ *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)\n\
        \nOnly rules created by the calling Connect app can be updated.\n\n**[Permissions](#permissions)\
        \ required:** Only Connect apps can use this operation."
      operationId: com.atlassian.jira.rest.v2.admin.workflow.WorkflowRuleConfigResource.updateWorkflowTransitionRuleConfigurations_put
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              workflows:
              - conditions:
                - configuration:
                    value: '{ "size": "medium" }'
                  id: d663bd873d93-59f5-11e9-8647-b4d6cbdc
                postFunctions:
                - configuration:
                    value: '{ "color": "red" }'
                  id: b4d6cbdc-59f5-11e9-8647-d663bd873d93
                validators:
                - configuration:
                    value: '{ "shape": "square" }'
                  id: 11e9-59f5-b4d6cbdc-8647-d663bd873d93
                workflowId:
                  draft: false
                  name: My Workflow name
            schema:
              $ref: '#/components/schemas/WorkflowTransitionRulesUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"updateResults":[{"workflowId":{"name":"Workflow with one
                rule not updated","draft":false},"ruleUpdateErrors":{"example-rule-id":["The
                rule with this id does not exist: example-rule-id"]},"updateErrors":[]},{"workflowId":{"name":"Workflow
                with all rules successfully updated","draft":true},"ruleUpdateErrors":{},"updateErrors":[]},{"workflowId":{"name":"Non-existing
                workflow","draft":false},"ruleUpdateErrors":{},"updateErrors":["Workflow
                not found: WorkflowIdBean{name=Non-existing workflow, draft=false}"]}]}'
              schema:
                $ref: '#/components/schemas/WorkflowTransitionRulesUpdateErrors'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the request is invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the caller is not a Connect app.
      security:
      - basicAuth: []
      summary: Update workflow transition rule configurations
      tags:
      - Workflow transition rules
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflow/search:
    get:
      deprecated: false
      description: 'Returns a [paginated](#pagination) list of published classic workflows.
        When workflow names are specified, details of those workflows are returned.
        Otherwise, all published classic workflows are returned.


        This operation does not return next-gen workflows.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflow.WorkflowSearchResource.getWorkflowsPaginated_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      - description: The name of a workflow to return.
        in: query
        name: workflowName
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: "Use [expand](#expansion) to include additional information in\
          \ the response. This parameter accepts a comma-separated list. Expand options\
          \ include:\n\n *  `transitions` For each workflow, returns information about\
          \ the transitions inside the workflow.\n *  `transitions.rules` For each\
          \ workflow transition, returns information about its rules. Transitions\
          \ are included automatically if this expand is requested.\n *  `statuses`\
          \ For each workflow, returns information about the statuses inside the workflow.\n\
          \ *  `statuses.properties` For each workflow status, returns information\
          \ about its properties. Statuses are included automatically if this expand\
          \ is requested."
        in: query
        name: expand
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":1,"startAt":0,"total":5,"isLast":false,"values":[{"id":{"name":"SCRUM
                Workflow"},"description":"A workflow used for Software projects in
                the SCRUM methodology","transitions":[{"id":"5","name":"In Progress","description":"Start
                working on the issue.","from":["10","13"],"to":"14","type":"directed","screen":{"id":"10000"},"rules":{"conditions":[{"type":"PermissionCondition","configuration":{"permissionKey":"WORK_ON_ISSUES"}}],"validators":[{"type":"FieldRequiredValidator","configuration":{"ignoreContext":true,"errorMessage":"A
                custom error message","fields":["description","assignee"]}}],"postFunctions":[{"type":"UpdateIssueStatusFunction"},{"type":"GenerateChangeHistoryFunction"},{"type":"FireIssueEventFunction"}]}}],"statuses":[{"id":"3","name":"In
                Progress","properties":{"issueEditable":false}}]}]}'
              schema:
                $ref: '#/components/schemas/PageBeanWorkflow'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              example: '{"errorMessages":["Only Jira administrators can access workflows."],"errors":{}}'
              schema:
                $ref: '#/components/schemas/ErrorCollection'
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-project
      summary: Get workflows paginated
      tags:
      - Workflows
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflow/transitions/{transitionId}/properties:
    delete:
      deprecated: false
      description: 'Deletes a property from a workflow transition. Transition properties
        are used to change the behavior of a transition. For more information, see
        [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.WorkflowTransitionResource.deleteWorkflowTransitionProperty_delete
      parameters:
      - description: The ID of the transition. To get the ID, view the workflow in
          text mode in the Jira admin settings. The ID is shown next to the transition.
        in: path
        name: transitionId
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of the transition property to delete, also known as
          the name of the property.
        in: query
        name: key
        required: true
        schema:
          type: string
      - description: The name of the workflow that the transition belongs to.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      - description: The workflow status. Set to `live` for inactive workflows or
          `draft` for draft workflows. Active workflows cannot be edited.
        in: query
        name: workflowMode
        schema:
          enum:
          - live
          - draft
          type: string
      responses:
        '200':
          description: 200 response
        '304':
          description: Returned if no changes were made by the request. For example,
            trying to delete a property that cannot be found.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow transition is not found.
      security:
      - basicAuth: []
      summary: Delete workflow transition property
      tags:
      - Workflow transition properties
      x-atlassian-connect-scope: INACCESSIBLE
    get:
      deprecated: false
      description: 'Returns the properties on a workflow transition. Transition properties
        are used to change the behavior of a transition. For more information, see
        [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.WorkflowTransitionResource.getWorkflowTransitionProperties_get
      parameters:
      - description: The ID of the transition. To get the ID, view the workflow in
          text mode in the Jira administration console. The ID is shown next to the
          transition.
        in: path
        name: transitionId
        required: true
        schema:
          format: int64
          type: integer
      - description: Some properties with keys that have the *jira.* prefix are reserved,
          which means they are not editable. To include these properties in the results,
          set this parameter to *true*.
        in: query
        name: includeReservedKeys
        schema:
          default: false
          type: boolean
      - description: The key of the property being returned, also known as the name
          of the property. If this parameter is not specified, all properties on the
          transition are returned.
        in: query
        name: key
        schema:
          type: string
      - description: The name of the workflow that the transition belongs to.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      - description: The workflow status. Set to *live* for active and inactive workflows,
          or *draft* for draft workflows.
        in: query
        name: workflowMode
        schema:
          default: live
          enum:
          - live
          - draft
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '[{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"},{"key":"jira.permission","value":"createissue","id":"jira.permission"}]'
              schema:
                $ref: '#/components/schemas/WorkflowTransitionProperty'
          description: 200 response
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have admin permission
        '404':
          description: Returned if the workflow transition or property is not found.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get workflow transition properties
      tags:
      - Workflow transition properties
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Adds a property to a workflow transition. Transition properties
        are used to change the behavior of a transition. For more information, see
        [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.WorkflowTransitionResource.createWorkflowTransitionProperty_post
      parameters:
      - description: The ID of the transition. To get the ID, view the workflow in
          text mode in the Jira admin settings. The ID is shown next to the transition.
        in: path
        name: transitionId
        required: true
        schema:
          format: int64
          type: integer
      - description: The key of the property being added, also known as the name of
          the property. Set this to the same value as the `key` defined in the request
          body.
        in: query
        name: key
        required: true
        schema:
          type: string
      - description: The name of the workflow that the transition belongs to.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      - description: The workflow status. Set to *live* for inactive workflows or
          *draft* for draft workflows. Active workflows cannot be edited.
        in: query
        name: workflowMode
        schema:
          default: live
          enum:
          - live
          - draft
          type: string
      requestBody:
        content:
          application/json:
            example:
              value: createissue
            schema:
              $ref: '#/components/schemas/WorkflowTransitionProperty'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}'
              schema:
                $ref: '#/components/schemas/WorkflowTransitionProperty'
          description: 200 response
        '400':
          description: Returned if a workflow property with the same key is present
            on the transition.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow transition is not found.
      security:
      - basicAuth: []
      summary: Create workflow transition property
      tags:
      - Workflow transition properties
      x-atlassian-connect-scope: INACCESSIBLE
    put:
      deprecated: false
      description: 'Updates a workflow transition by changing the property value.
        Trying to update a property that does not exist results in a new property
        being added to the transition. Transition properties are used to change the
        behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties)
        and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.WorkflowTransitionResource.updateWorkflowTransitionProperty_put
      parameters:
      - description: The ID of the transition. To get the ID, view the workflow in
          text mode in the Jira admin settings. The ID is shown next to the transition.
        in: path
        name: transitionId
        required: true
        schema:
          format: int64
          type: integer
      - description: The key of the property being updated, also known as the name
          of the property. Set this to the same value as the `key` defined in the
          request body.
        in: query
        name: key
        required: true
        schema:
          type: string
      - description: The name of the workflow that the transition belongs to.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      - description: The workflow status. Set to `live` for inactive workflows or
          `draft` for draft workflows. Active workflows cannot be edited.
        in: query
        name: workflowMode
        schema:
          enum:
          - live
          - draft
          type: string
      requestBody:
        content:
          application/json:
            example:
              value: createissue
            schema:
              $ref: '#/components/schemas/WorkflowTransitionProperty'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"key":"jira.i18n.title","value":"some.title","id":"jira.i18n.title"}'
              schema:
                $ref: '#/components/schemas/WorkflowTransitionProperty'
          description: 200 response
        '304':
          description: Returned if no changes were made by the request. For example,
            attempting to update a property with its current value.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow transition is not found.
      security:
      - basicAuth: []
      summary: Update workflow transition property
      tags:
      - Workflow transition properties
      x-atlassian-connect-scope: INACCESSIBLE
  /rest/api/3/workflowscheme:
    get:
      deprecated: false
      description: 'Returns a paginated list of all workflow schemes, not including
        draft workflow schemes.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getAllWorkflowSchemes_get
      parameters:
      - description: The index of the first item to return in a page of results (page
          offset).
        in: query
        name: startAt
        schema:
          default: 0
          format: int64
          type: integer
      - description: The maximum number of items to return per page.
        in: query
        name: maxResults
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"maxResults":50,"startAt":0,"total":2,"isLast":true,"values":[{"id":101010,"name":"Example
                workflow scheme","description":"The description of the example workflow
                scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"},{"id":101011,"name":"Another
                example workflow scheme","description":"The description of the another
                example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101011"}]}'
              schema:
                $ref: '#/components/schemas/PageBeanWorkflowScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Get all workflow schemes
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    post:
      deprecated: false
      description: 'Creates a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.createWorkflowScheme_post
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              defaultWorkflow: jira
              description: The description of the example workflow scheme.
              issueTypeMappings:
                '10000': scrum workflow
                '10001': builds workflow
              name: Example workflow scheme
            schema:
              $ref: '#/components/schemas/WorkflowScheme'
        required: true
      responses:
        '201':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Create workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/project:
    get:
      deprecated: false
      description: 'Returns a list of the workflow schemes associated with a list
        of projects. Each returned workflow scheme includes a list of the requested
        projects associated with it. Any next-gen or non-existent projects in the
        request are ignored and no errors are returned.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.project.WorkflowSchemeProjectResource.getWorkflowSchemeProjectAssociations_get
      parameters:
      - description: 'The ID of a project to return the workflow schemes for. To include
          multiple projects, provide an ampersand-Jim: oneseparated list. For example,
          `projectId=10000&projectId=10001`.'
        in: query
        name: projectId
        required: true
        schema:
          items:
            example: 10010
            format: int64
            type: integer
          maxItems: 100
          minItems: 1
          type: array
          uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              example: '{"values":[{"projectIds":["10010","10020"],"workflowScheme":{"id":101010,"name":"Example
                workflow scheme","description":"The description of the example workflow
                scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}}]}'
              schema:
                $ref: '#/components/schemas/ContainerOfWorkflowSchemeAssociations'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example: '{"errorMessages":[],"errors":{"projectId":"The projectId query
                param is required."}}'
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          content:
            application/json:
              example: '{"errorMessages":["Only Jira administrators can access workflow
                scheme associations."],"errors":{}}'
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      - OAuth2:
        - manage:jira-configuration
      summary: Get workflow scheme project associations
      tags:
      - Workflow scheme project associations
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}:
    delete:
      deprecated: false
      description: 'Deletes a workflow scheme. Note that a workflow scheme cannot
        be deleted if it is active (that is, being used by at least one project).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteWorkflowScheme_delete
      parameters:
      - description: The ID of the workflow scheme. Find this ID by editing the desired
          workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example,
          *schemeId=10301*.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          description: Returned if the scheme is active.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Delete workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getWorkflowScheme_get
      parameters:
      - description: The ID of the workflow scheme. Find this ID by editing the desired
          workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example,
          *schemeId=10301*.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Returns the workflow scheme's draft rather than scheme itself,
          if set to true. If the workflow scheme does not have a draft, then the workflow
          scheme is returned.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Get workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Updates a workflow scheme, including the name, default workflow,
        issue type to project mappings, and more. If the workflow scheme is active
        (that is, being used by at least one project), then a draft workflow scheme
        is created or updated instead, provided that `updateDraftIfNeeded` is set
        to `true`.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateWorkflowScheme_put
      parameters:
      - description: The ID of the workflow scheme. Find this ID by editing the desired
          workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example,
          *schemeId=10301*.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              defaultWorkflow: jira
              description: The description of the example workflow scheme.
              issueTypeMappings:
                '10000': scrum workflow
              name: Example workflow scheme
              updateDraftIfNeeded: false
            schema:
              $ref: '#/components/schemas/WorkflowScheme'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Update workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/createdraft:
    post:
      deprecated: false
      description: 'Create a draft workflow scheme from an active workflow scheme,
        by copying the active workflow scheme. Note that an active workflow scheme
        can only have one draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.createWorkflowSchemeDraftFromParent_post
      parameters:
      - description: The ID of the active workflow scheme that the draft is created
          from.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '201':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
      security:
      - basicAuth: []
      summary: Create draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/default:
    delete:
      deprecated: false
      description: 'Resets the default workflow for a workflow scheme. That is, the
        default workflow is set to Jira''s system workflow (the *jira* workflow).


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme
        is created or updated with the default workflow reset. The draft workflow
        scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteDefaultWorkflow_delete
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Set to true to create or update the draft of a workflow scheme
          and delete the mapping from the draft, when the workflow scheme cannot be
          edited. Defaults to `false`.
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded`
            is not `true`.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Delete default workflow
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the default workflow for a workflow scheme. The default
        workflow is the workflow that is assigned any issue types that have not been
        mapped to any other workflow. The default workflow has *All Unassigned Issue
        Types* listed in its issue types for the workflow scheme in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getDefaultWorkflow_get
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: Set to `true` to return the default workflow for the workflow
          scheme's draft rather than scheme itself. If the workflow scheme does not
          have a draft, then the default workflow for the workflow scheme is returned.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"workflow":"jira"}'
              schema:
                $ref: '#/components/schemas/DefaultWorkflow'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Get default workflow
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the default workflow for a workflow scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` in the request object and a
        draft workflow scheme is created or updated with the new default workflow.
        The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateDefaultWorkflow_put
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              updateDraftIfNeeded: false
              workflow: jira
            schema:
              $ref: '#/components/schemas/DefaultWorkflow'
        description: The new default workflow.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded`
            is not `true`.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme is not found.
      security:
      - basicAuth: []
      summary: Update default workflow
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/draft:
    delete:
      deprecated: false
      description: 'Deletes a draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteWorkflowSchemeDraft_delete
      parameters:
      - description: The ID of the active workflow scheme that the draft was created
          from.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission..
        '404':
          description: "Returned if:\n\n *  the original active workflow scheme is\
            \ not found.\n *  the original active workflow scheme does not have a\
            \ draft."
      security:
      - basicAuth: []
      summary: Delete draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: "Returns the draft workflow scheme for an active workflow scheme.\
        \ Draft workflow schemes allow changes to be made to the active workflow schemes:\
        \ When an active workflow scheme is updated, a draft copy is created. The\
        \ draft is modified, then the changes in the draft are copied back to the\
        \ active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg)\
        \ for more information.  \nNote that:\n\n *  Only active workflow schemes\
        \ can have draft workflow schemes.\n *  An active workflow scheme can only\
        \ have one draft workflow scheme.\n\n**[Permissions](#permissions) required:**\
        \ *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)."
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getWorkflowSchemeDraft_get
      parameters:
      - description: The ID of the active workflow scheme that the draft was created
          from.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the original active workflow scheme is\
            \ not found.\n *  the original active workflow scheme does not have a\
            \ draft."
      security:
      - basicAuth: []
      summary: Get draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Updates a draft workflow scheme. If a draft workflow scheme does
        not exist for the active workflow scheme, then a draft is created. Note that
        an active workflow scheme can only have one draft workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateWorkflowSchemeDraft_put
      parameters:
      - description: The ID of the active workflow scheme that the draft was created
          from.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              defaultWorkflow: jira
              description: The description of the example workflow scheme.
              issueTypeMappings:
                '10000': scrum workflow
              name: Example workflow scheme
              updateDraftIfNeeded: false
            schema:
              $ref: '#/components/schemas/WorkflowScheme'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if:\n\n *  the original active workflow scheme is\
            \ not found.\n *  the original active workflow scheme does not have a\
            \ draft."
      security:
      - basicAuth: []
      summary: Update draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/draft/default:
    delete:
      deprecated: false
      description: 'Resets the default workflow for a workflow scheme''s draft. That
        is, the default workflow is set to Jira''s system workflow (the *jira* workflow).


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteDraftDefaultWorkflow_delete
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow scheme does not have a draft."
      security:
      - basicAuth: []
      summary: Delete draft default workflow
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the default workflow for a workflow scheme''s draft. The
        default workflow is the workflow that is assigned any issue types that have
        not been mapped to any other workflow. The default workflow has *All Unassigned
        Issue Types* listed in its issue types for the workflow scheme in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getDraftDefaultWorkflow_get
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"workflow":"jira"}'
              schema:
                $ref: '#/components/schemas/DefaultWorkflow'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission..
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow scheme does not have a draft."
      security:
      - basicAuth: []
      summary: Get draft default workflow
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the default workflow for a workflow scheme''s draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateDraftDefaultWorkflow_put
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            example:
              updateDraftIfNeeded: false
              workflow: jira
            schema:
              $ref: '#/components/schemas/DefaultWorkflow'
        description: The object for the new default workflow.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow scheme does not have a draft."
      security:
      - basicAuth: []
      summary: Update draft default workflow
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}:
    delete:
      deprecated: false
      description: 'Deletes the issue type-workflow mapping for an issue type in a
        workflow scheme''s draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteWorkflowSchemeDraftIssueType_delete
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Delete workflow for issue type in draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the issue type-workflow mapping for an issue type in a
        workflow scheme''s draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getWorkflowSchemeDraftIssueType_get
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"issueType":"10000","workflow":"jira"}'
              schema:
                $ref: '#/components/schemas/IssueTypeWorkflowMapping'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Get workflow for issue type in draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the workflow for an issue type in a workflow scheme''s draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.setWorkflowSchemeDraftIssueType_put
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              issueType: '10000'
              updateDraftIfNeeded: false
              workflow: jira
            schema:
              $ref: '#/components/schemas/IssueTypeWorkflowMapping'
        description: The issue type-project mapping.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":17218781,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"scrum
                workflow","issueTypeMappings":{"10000":"jira","10001":"jira"},"originalDefaultWorkflow":"jira","originalIssueTypeMappings":{"10001":"builds
                workflow"},"draft":true,"lastModifiedUser":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","key":"","accountId":"5b10a2844c20165700ede21g","name":"","emailAddress":"mia@example.com","avatarUrls":{"48x48":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=48&s=48","24x24":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=24&s=24","16x16":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=16&s=16","32x32":"https://avatar-management--avatars.server-location.prod.public.atl-paas.net/initials/MK-5.png?size=32&s=32"},"displayName":"Mia
                Krystof","active":true,"timeZone":"Australia/Sydney","groups":{"size":3,"items":[]},"applicationRoles":{"size":1,"items":[]}},"lastModified":"Today
                6:38 PM","self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/17218781/draft"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Set workflow for issue type in draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/draft/workflow:
    delete:
      deprecated: false
      description: 'Deletes the workflow-issue type mapping for a workflow in a workflow
        scheme''s draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteDraftWorkflowMapping_delete
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of the workflow.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow scheme does not have a draft.\n\
            \ *  The workflow is not found.\n *  The workflow is not specified."
      security:
      - basicAuth: []
      summary: Delete issue types for workflow in draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the workflow-issue type mappings for a workflow scheme''s
        draft.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getDraftWorkflow_get
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of a workflow in the scheme. Limits the results to the
          workflow-issue type mapping for the specified workflow.
        in: query
        name: workflowName
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"workflow":"jira","issueTypes":["10000","10001"],"defaultMapping":false}'
              schema:
                $ref: '#/components/schemas/IssueTypesWorkflowMapping'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if either the workflow scheme or workflow (if specified)
            is not found. session.
      security:
      - basicAuth: []
      summary: Get issue types for workflows in draft workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the issue types for a workflow in a workflow scheme''s draft.
        The workflow can also be set as the default workflow for the draft workflow
        scheme. Unmapped issues types are mapped to the default workflow.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateDraftWorkflowMapping_put
      parameters:
      - description: The ID of the workflow scheme that the draft belongs to.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of the workflow.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              issueTypes:
              - '10000'
              updateDraftIfNeeded: true
              workflow: jira
            schema:
              $ref: '#/components/schemas/IssueTypesWorkflowMapping'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow scheme does not have a draft.\n\
            \ *  The workflow is not found.\n *  The workflow is not specified."
      security:
      - basicAuth: []
      summary: Set issue types for workflow in workflow scheme
      tags:
      - Workflow scheme drafts
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/issuetype/{issueType}:
    delete:
      deprecated: false
      description: 'Deletes the issue type-workflow mapping for an issue type in a
        workflow scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme
        is created or updated with the issue type-workflow mapping deleted. The draft
        workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteWorkflowSchemeIssueType_delete
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      - description: Set to true to create or update the draft of a workflow scheme
          and update the mapping in the draft, when the workflow scheme cannot be
          edited. Defaults to `false`.
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the workflow cannot be edited and `updateDraftIfNeeded`
            is false.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Delete workflow for issue type in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the issue type-workflow mapping for an issue type in a
        workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getWorkflowSchemeIssueType_get
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      - description: Returns the mapping from the workflow scheme's draft rather than
          the workflow scheme, if set to true. If no draft exists, the mapping from
          the workflow scheme is returned.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"issueType":"10000","workflow":"jira"}'
              schema:
                $ref: '#/components/schemas/IssueTypeWorkflowMapping'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Get workflow for issue type in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the workflow for an issue type in a workflow scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` in the request body and a draft
        workflow scheme is created or updated with the new issue type-workflow mapping.
        The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.setWorkflowSchemeIssueType_put
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The ID of the issue type.
        in: path
        name: issueType
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              issueType: '10000'
              updateDraftIfNeeded: false
              workflow: jira
            schema:
              $ref: '#/components/schemas/IssueTypeWorkflowMapping'
        description: The issue type-project mapping.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the workflow cannot be edited and `updateDraftIfNeeded`
            is false.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if the workflow scheme or issue type is not found.
      security:
      - basicAuth: []
      summary: Set workflow for issue type in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/workflowscheme/{id}/workflow:
    delete:
      deprecated: false
      description: 'Deletes the workflow-issue type mapping for a workflow in a workflow
        scheme.


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme
        is created or updated with the workflow-issue type mapping deleted. The draft
        workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.deleteWorkflowMapping_delete
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of the workflow.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      - description: Set to true to create or update the draft of a workflow scheme
          and delete the mapping from the draft, when the workflow scheme cannot be
          edited. Defaults to `false`.
        in: query
        name: updateDraftIfNeeded
        schema:
          type: boolean
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          description: Returned if the workflow cannot be edited and `updateDraftIfNeeded`
            is not true.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow is not found.\n *  The workflow\
            \ is not specified."
      security:
      - basicAuth: []
      summary: Delete issue types for workflow in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    get:
      deprecated: false
      description: 'Returns the workflow-issue type mappings for a workflow scheme.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.getWorkflow_get
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of a workflow in the scheme. Limits the results to the
          workflow-issue type mapping for the specified workflow.
        in: query
        name: workflowName
        schema:
          type: string
      - description: Returns the mapping from the workflow scheme's draft rather than
          the workflow scheme, if set to true. If no draft exists, the mapping from
          the workflow scheme is returned.
        in: query
        name: returnDraftIfExists
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              example: '{"workflow":"jira","issueTypes":["10000","10001"],"defaultMapping":false}'
              schema:
                $ref: '#/components/schemas/IssueTypesWorkflowMapping'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: Returned if either the workflow scheme or workflow is not found.
      security:
      - basicAuth: []
      summary: Get issue types for workflows in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
    put:
      deprecated: false
      description: 'Sets the issue types for a workflow in a workflow scheme. The
        workflow can also be set as the default workflow for the workflow scheme.
        Unmapped issues types are mapped to the default workflow.


        Note that active workflow schemes cannot be edited. If the workflow scheme
        is active, set `updateDraftIfNeeded` to `true` in the request body and a draft
        workflow scheme is created or updated with the new workflow-issue types mappings.
        The draft workflow scheme can be published in Jira.


        **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).'
      operationId: com.atlassian.jira.rest.v2.admin.workflowscheme.WorkflowSchemeResource.updateWorkflowMapping_put
      parameters:
      - description: The ID of the workflow scheme.
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
      - description: The name of the workflow.
        in: query
        name: workflowName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              issueTypes:
              - '10000'
              updateDraftIfNeeded: true
              workflow: jira
            schema:
              $ref: '#/components/schemas/IssueTypesWorkflowMapping'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '{"id":101010,"name":"Example workflow scheme","description":"The
                description of the example workflow scheme.","defaultWorkflow":"jira","issueTypeMappings":{"10000":"scrum
                workflow","10001":"builds workflow"},"draft":false,"self":"https://your-domain.atlassian.net/rest/api/3/workflowscheme/101010"}'
              schema:
                $ref: '#/components/schemas/WorkflowScheme'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
        '403':
          description: Returned if the user does not have the necessary permission.
        '404':
          description: "Returned if any of the following is true:\n\n *  The workflow\
            \ scheme is not found.\n *  The workflow is not found.\n *  The workflow\
            \ is not specified."
      security:
      - basicAuth: []
      summary: Set issue types for workflow in workflow scheme
      tags:
      - Workflow schemes
      x-atlassian-connect-scope: ADMIN
  /rest/api/3/worklog/deleted:
    get:
      deprecated: false
      description: 'Returns a list of IDs and delete timestamps for worklogs deleted
        after a date and time.


        This resource is paginated, with a limit of 1000 worklogs per page. Each page
        lists worklogs from oldest to youngest. If the number of items in the date
        range exceeds 1000, `until` indicates the timestamp of the youngest item on
        the page. Also, `nextPage` provides the URL for the next page of worklogs.
        The `lastPage` parameter is set to true on the last page of worklogs.


        This resource does not return worklogs deleted during the minute preceding
        the request.


        **[Permissions](#permissions) required:** Permission to access Jira.'
      operationId: com.atlassian.jira.rest.v2.issue.worklog.WorklogResource.getIdsOfWorklogsDeletedSince_get
      parameters:
      - description: The date and time, in UNIX timestamp format, after which deleted
          worklogs are returned.
        in: query
        name: since
        schema:
          default: 0
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              example: '{"values":[{"worklogId":103,"updatedTime":1438013671562,"properties":[]},{"worklogId":104,"updatedTime":1438013672165,"properties":[]},{"worklogId":105,"updatedTime":1438013693136,"properties":[]}],"since":1438013671562,"until":1438013693136,"self":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013671562","nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/deleted?since=1438013693136","lastPage":true}'
              schema:
                $ref: '#/components/schemas/ChangedWorklogs'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get IDs of deleted worklogs
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: READ
  /rest/api/3/worklog/list:
    post:
      deprecated: false
      description: "Returns worklog details for a list of worklog IDs.\n\nThe returned\
        \ list of worklogs is limited to 1000 items.\n\n**[Permissions](#permissions)\
        \ required:** Permission to access Jira, however, worklogs are only returned\
        \ where either of the following is true:\n\n *  the worklog is set as *Viewable\
        \ by All Users*.\n *  the user is a member of a project role or group with\
        \ permission to view the worklog."
      operationId: com.atlassian.jira.rest.v2.issue.worklog.WorklogResource.getWorklogsForIds_post
      parameters:
      - description: Use [expand](#expansion) to include additional information about
          worklogs in the response. This parameter accepts `properties` that returns
          the properties of each worklog.
        in: query
        name: expand
        schema:
          default: ''
          type: string
      requestBody:
        content:
          application/json:
            example:
              ids:
              - 1
              - 2
              - 5
              - 10
            schema:
              $ref: '#/components/schemas/WorklogIdsRequestBean'
        description: A JSON object containing a list of worklog IDs.
        required: true
      responses:
        '200':
          content:
            application/json:
              example: '[{"self":"https://your-domain.atlassian.net/rest/api/3/issue/10010/worklog/10000","author":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"updateAuthor":{"self":"https://your-domain.atlassian.net/rest/api/3/user?accountId=5b10a2844c20165700ede21g","accountId":"5b10a2844c20165700ede21g","displayName":"Mia
                Krystof","active":false},"comment":{"type":"doc","version":1,"content":[{"type":"paragraph","content":[{"type":"text","text":"I
                did some work here."}]}]},"updated":"2020-03-04T06:50:30.741+0000","visibility":{"type":"group","value":"jira-developers"},"started":"2020-03-04T06:50:30.741+0000","timeSpent":"3h
                20m","timeSpentSeconds":12000,"id":"100028","issueId":"10002"}]'
              schema:
                items:
                  $ref: '#/components/schemas/Worklog'
                type: array
          description: Returned if the request is successful.
        '400':
          description: Returned if the request contains more than 1000 worklog IDs
            or is empty.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get worklogs
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: READ
  /rest/api/3/worklog/updated:
    get:
      deprecated: false
      description: "Returns a list of IDs and update timestamps for worklogs updated\
        \ after a date and time.\n\nThis resource is paginated, with a limit of 1000\
        \ worklogs per page. Each page lists worklogs from oldest to youngest. If\
        \ the number of items in the date range exceeds 1000, `until` indicates the\
        \ timestamp of the youngest item on the page. Also, `nextPage` provides the\
        \ URL for the next page of worklogs. The `lastPage` parameter is set to true\
        \ on the last page of worklogs.\n\nThis resource does not return worklogs\
        \ updated during the minute preceding the request.\n\n**[Permissions](#permissions)\
        \ required:** Permission to access Jira, however, worklogs are only returned\
        \ where either of the following is true:\n\n *  the worklog is set as *Viewable\
        \ by All Users*.\n *  the user is a member of a project role or group with\
        \ permission to view the worklog."
      operationId: com.atlassian.jira.rest.v2.issue.worklog.WorklogResource.getIdsOfWorklogsModifiedSince_get
      parameters:
      - description: The date and time, in UNIX timestamp format, after which updated
          worklogs are returned.
        in: query
        name: since
        schema:
          default: 0
          format: int64
          type: integer
      - description: Use [expand](#expansion) to include additional information about
          worklogs in the response. This parameter accepts `properties` that returns
          the properties of each worklog.
        in: query
        name: expand
        schema:
          default: ''
          type: string
      responses:
        '200':
          content:
            application/json:
              example: '{"values":[{"worklogId":103,"updatedTime":1438013671562,"properties":[]},{"worklogId":104,"updatedTime":1438013672165,"properties":[]},{"worklogId":105,"updatedTime":1438013693136,"properties":[]}],"since":1438013671562,"until":1438013693136,"self":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013671562","nextPage":"https://your-domain.atlassian.net/api/~ver~/worklog/updated?since=1438013693136","lastPage":true}'
              schema:
                $ref: '#/components/schemas/ChangedWorklogs'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or
            missing.
      security:
      - basicAuth: []
      - OAuth2:
        - read:jira-work
      summary: Get IDs of updated worklogs
      tags:
      - Issue worklogs
      x-atlassian-connect-scope: READ
  /rest/atlassian-connect/1/addons/{addonKey}/properties:
    get:
      deprecated: false
      description: 'Gets all the properties of an app.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches
        `addonKey` can make this request.'
      operationId: AddonPropertiesResource.getAddonProperties_get
      parameters:
      - description: The key of the app, as defined in its descriptor.
        in: path
        name: addonKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                keys:
                - key: propertyKey
                  self: https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey
              schema:
                $ref: '#/components/schemas/PropertyKeys'
          description: Returned if the request is successful.
        '401':
          content:
            application/json:
              example:
                message: Access to this resource must be authenticated as an app.
                statusCode: 401
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the authentication credentials are incorrect or
            missing.
      summary: Get app properties
      tags:
      - App properties
      x-atlassian-connect-scope: NONE
  /rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}:
    delete:
      deprecated: false
      description: 'Deletes an app''s property.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches
        `addonKey` can make this request.'
      operationId: AddonPropertiesResource.deleteAddonProperty_delete
      parameters:
      - description: The key of the app, as defined in its descriptor.
        in: path
        name: addonKey
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example:
                message: The property key cannot be longer than 127 characters.
                statusCode: 400
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the property key is longer than 127 characters.
        '401':
          content:
            application/json:
              example:
                message: Access to this resource must be authenticated as an app.
                statusCode: 401
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              example:
                message: Property with key not found.
                statusCode: 404
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the property is not found or doesn't belong to
            the app.
      summary: Delete app property
      tags:
      - App properties
      x-atlassian-connect-scope: NONE
    get:
      deprecated: false
      description: 'Returns the key and value of an app''s property.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches
        `addonKey` can make this request.'
      operationId: AddonPropertiesResource.getAddonProperty_get
      parameters:
      - description: The key of the app, as defined in its descriptor.
        in: path
        name: addonKey
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              example:
                key: propertyKey
                self: https://your-domain.atlassian.net/jira/rest/atlassian-connect/1/addon/example.app.key/properties/propertyKey
                value: propertyValue
              schema:
                $ref: '#/components/schemas/EntityProperty'
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example:
                message: The property key cannot be longer than 127 characters.
                statusCode: 400
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the property key is longer than 127 characters.
        '401':
          content:
            application/json:
              example:
                message: Access to this resource must be authenticated as an app.
                statusCode: 401
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the authentication credentials are incorrect or
            missing.
        '404':
          content:
            application/json:
              example:
                message: Property with key not found.
                statusCode: 404
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the property is not found or doesn't belong to
            the app.
      summary: Get app property
      tags:
      - App properties
      x-atlassian-connect-scope: NONE
    put:
      deprecated: false
      description: 'Sets the value of an app''s property. Use this resource to store
        custom data for your app.


        The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627),
        non-empty JSON blob. The maximum length is 32768 characters.


        **[Permissions](#permissions) required:** Only a Connect app whose key matches
        `addonKey` can make this request.'
      operationId: AddonPropertiesResource.putAddonProperty_put
      parameters:
      - description: The key of the app, as defined in its descriptor.
        in: path
        name: addonKey
        required: true
        schema:
          type: string
      - description: The key of the property.
        in: path
        name: propertyKey
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                message: Property updated.
                statusCode: 200
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the property is updated.
        '201':
          content:
            application/json:
              example:
                message: Property created.
                statusCode: 201
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned is the property is created.
        '400':
          content:
            application/json:
              example:
                message: The property key cannot be longer than 127 characters.
                statusCode: 400
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: "Returned if:\n  * the property key is longer than 127 characters.\n\
            \  * the value is not valid JSON.\n  * the value is longer than 32768\
            \ characters."
        '401':
          content:
            application/json:
              example:
                message: Access to this resource must be authenticated as an app.
                statusCode: 401
              schema:
                $ref: '#/components/schemas/OperationMessage'
          description: Returned if the authentication credentials are incorrect or
            missing.
      summary: Set app property
      tags:
      - App properties
      x-atlassian-connect-scope: NONE
  /rest/atlassian-connect/1/app/module/dynamic:
    delete:
      deprecated: false
      description: 'Remove all or a list of modules registered by the calling app.


        **[Permissions](#permissions) required:** Only Connect apps can make this
        request.'
      operationId: DynamicModulesResource.removeModules_delete
      parameters:
      - description: 'The key of the module to remove. To include multiple module
          keys, provide multiple copies of this parameter.

          For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.

          Nonexistent keys are ignored.'
        in: query
        name: moduleKey
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '204':
          description: Returned if the request is successful.
        '401':
          content:
            application/json:
              example:
                message: The request is not from a Connect app.
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Returned if the call is not from a Connect app.
      summary: Remove modules
      tags:
      - Dynamic modules
      x-atlassian-connect-scope: NONE
      x-experimental: true
    get:
      deprecated: false
      description: 'Returns all modules registered dynamically by the calling app.


        **[Permissions](#permissions) required:** Only Connect apps can make this
        request.'
      operationId: DynamicModulesResource.getModules_get
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectModules'
          description: Returned if the request is successful.
        '401':
          content:
            application/json:
              example:
                message: The request is not from a Connect app.
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Returned if the call is not from a Connect app.
      summary: Get modules
      tags:
      - Dynamic modules
      x-atlassian-connect-scope: NONE
      x-experimental: true
    post:
      deprecated: false
      description: 'Registers a list of modules.


        **[Permissions](#permissions) required:** Only Connect apps can make this
        request.'
      operationId: DynamicModulesResource.registerModules_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectModules'
        required: true
      responses:
        '200':
          description: Returned if the request is successful.
        '400':
          content:
            application/json:
              example:
                message: 'Installation failed. The app com.example.app.key has duplicate
                  module keys: [module-key]. Please contact the app vendor.'
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: 'Returned if:

            * any of the provided modules is invalid. For example, required properties
            are missing.

            * any of the modules conflict with registered dynamic modules or modules
            defined in the app descriptor. For example, there are duplicate keys.


            Details of the issues encountered are included in the error message.'
        '401':
          content:
            application/json:
              example:
                message: The request is not from a Connect app.
              schema:
                $ref: '#/components/schemas/ErrorMessage'
          description: Returned if the call is not from a Connect app.
      summary: Register modules
      tags:
      - Dynamic modules
      x-atlassian-connect-scope: NONE
      x-experimental: true
servers:
- url: ''
tags:
- description: This resource represents application roles. Use it to get details of
    an application role or all application roles.
  name: Application roles
- description: This resource represents audits that record activities undertaken in
    Jira. Use it to get a list of audit records.
  name: Audit records
- description: This resource represents system and custom avatars. Use it to obtain
    the details of system or custom avatars as well as add and remove avatars from
    a project or issue type.
  name: Avatars
- description: This resource represents dashboards. Use it to obtain the details of
    dashboards as well as add and remove item properties from dashboards.
  name: Dashboards
- description: This resource represents [filters](https://confluence.atlassian.com/x/eQiiLQ).
    Use it to get, create, update, or delete filters. Also use it to configure the
    columns for a filter and set favorite filters.
  name: Filters
- description: This resource represents options for sharing [filters](#api-group-Filters).
    Use it to get share scopes as well as add and remove share scopes from filters.
  name: Filter sharing
- description: This resource represents a list of users and a list of groups. Use
    it to obtain the details to populate user and group picker suggestions list.
  name: Group and user picker
- description: This resource represents groups of users. Use it to get, create, find,
    and delete groups as well as add and remove users from groups.
  name: Groups
- description: "This resource represents Jira issues. Use it to:\n\n *  create or\
    \ edit issues, individually or in bulk.\n *  retrieve metadata about the options\
    \ for creating or editing issues.\n *  delete an issue.\n *  assign a user to\
    \ an issue.\n *  get issue changelogs.\n *  send notifications about an issue.\n\
    \ *  get details of the transitions available for an issue.\n *  transition an\
    \ issue."
  name: Issues
- description: This resource represents issue attachments and the attachment settings
    for Jira. Use it to get the metadata for an attachment, delete an attachment,
    and view the metadata for the contents of an attachment. Also, use it to get the
    attachment settings for Jira.
  name: Issue attachments
- description: "This resource represents issue comments. Used it to:\n\n *  get, create,\
    \ update, and delete a comment from an issue.\n *  get all comments from issue.\n\
    \ *  get a list of comments by comment ID."
  name: Issue comments
- description: This resource represents [issue comment](#api-group-Issue-comments)
    properties, which provides for storing custom data against an issue comment. Use
    is to get, set, and delete issue comment properties as well as obtain the keys
    of all properties on a comment. Comment properties are a type of [entity property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Issue comment properties
- description: This resource represents issue fields, both system and custom fields.
    Use it to get fields, field configurations, and create custom fields.
  name: Issue fields
- description: This resource represents issue field configurations. Use it to get,
    set, and delete field configurations and field configuration schemes.
  name: Issue field configurations
- description: 'This resource represents custom issue field select list options created
    in Jira or using the REST API. See [Issue custom field options (apps)](#api-group-Issue-custom-field-options--apps-)
    to manipulate custom issue field select list options created by a Connect app.


    A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/)
    that enables a user to select an option from a list. Use this resource to add
    and retrieve the options of a select list issue field.'
  name: Issue custom field options
- description: 'This resource represents custom issue field select list options created
    by a Connect app. See [Issue custom field options](#api-group-Issue-custom-field-options)
    to manipulate options created in Jira or using the REST API.


    A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/)
    that enables a user to select an option from a list. Use this resource to add,
    remove, and update the options of a select list issue field.'
  name: Issue custom field options (apps)
- description: 'This resource represents links between issues. Use it to get, create,
    and delete links between issues.


    To use this resource, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
    enabled.'
  name: Issue links
- description: 'This resource represents [issue link](#api-group-Issue-links) types.
    Use it to get, create, update, and delete link issue types as well as get lists
    of all link issue types.


    To use this resource, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM)
    enabled.'
  name: Issue link types
- description: This resource represents issue navigator settings. Use it to get and
    set issue navigator default columns.
  name: Issue navigator settings
- description: This resource represents notification schemes, lists of events and
    the recipients who will receive notifications for those events. Use this resource
    to get details of a notification scheme and a list of notification schemes.
  name: Issue notification schemes
- description: This resource represents issue priorities. Use it to obtain a list
    of issue priorities and details for individual issue priorities.
  name: Issue priorities
- description: This resource represents [issue](#api-group-Issues) properties, which
    provides for storing custom data against an issue. Use it to get, set, and delete
    issue properties as well as obtain details of all properties on an issue. Operations
    to bulk update and delete issue properties are also provided. Issue properties
    are a type of [entity property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Issue properties
- description: This resource represents remote issue links, a way of linking Jira
    to information in other systems. Use this resource to get, create, update, and
    delete remote issue links either by ID or global ID. The global ID provides a
    way of accessing remote issue links using information about the item's remote
    system host and remote system identifier.
  name: Issue remote links
- description: This resource represents issue resolution values. Use it to obtain
    a list of all issue resolution values and the details of individual resolution
    values.
  name: Issue resolutions
- description: This resource represents various ways to search for issues. Use it
    to search for issues with a JQL query and find issues to populate an issue picker.
  name: Issue search
- description: This resource represents issue security levels. Use it to obtain the
    details of any issue security level. For more information about issue security
    levels, see [Configuring issue-level security](https://confluence.atlassian.com/x/J4lKLg).
  name: Issue security level
- description: 'This resource represents issue security schemes. Use it to get an
    issue security scheme or list of issues security schemes.


    Issue security schemes control which users or groups of users can view an issue.
    When an issue security scheme is associated with a project, its security levels
    can be applied to issues in that project. Sub-tasks also inherit the security
    level of their parent issue.'
  name: Issue security schemes
- description: "This resource represents issues types. Use it to:\n\n *  get, create,\
    \ update, and delete issue types.\n *  get all issue types for a user.\n *  get\
    \ alternative issue types.\n *  set an avatar for an issue type."
  name: Issue types
- description: This resource represents [issue type](#api-group-Issue-types) properties,
    which provides for storing custom data against an issue type. Use it to get, create,
    and delete issue type properties as well as obtain the keys of all properties
    on a issues type. Issue type properties are a type of [entity property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Issue type properties
- description: This resource represents votes cast by users on an issue. Use it to
    get details of votes on an issue as well as cast and withdrawal votes.
  name: Issue votes
- description: This resource represents users watching an issue. Use it to get details
    of users watching an issue as well as start and stop a user watching an issue.
  name: Issue watchers
- description: "This resource represents issue worklogs. Use it to:\n\n *  get, create,\
    \ update, and delete worklogs.\n *  obtain lists of updated or deleted worklogs."
  name: Issue worklogs
- description: This resource represents [issue worklog](#api-group-Issue-worklogs)
    properties, which provides for storing custom data against an issue worklog. Use
    it to get, create, and delete issue worklog properties as well as obtain the keys
    of all properties on a issue worklog. Issue worklog properties are a type of [entity
    property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Issue worklog properties
- description: This resource is a collection of operations for [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
  name: Jira expressions
- description: This resource represents various settings in Jira. Use it to get and
    update Jira settings and properties.
  name: Jira settings
- description: This resource represents JQL search auto-complete details. Use it to
    obtain JQL search auto-complete data and suggestions for use in programmatic construction
    of queries or custom query builders. It also provides an operation to convert
    one or more JQL queries with user identifiers (username or user key) to equivalent
    JQL queries with account IDs.
  name: JQL
- description: This resource represents available labels. Use it to get available
    labels for the global label field.
  name: Labels
- description: This resource represents information about the current user, such as
    basic details, group membership, application roles, preferences, and locale. Use
    it to get, create, update, and delete (restore default) values of the user's preferences
    and locale.
  name: Myself
- description: This resource represents permissions. Use it to obtain details of all
    permissions and determine whether the user has certain permissions.
  name: Permissions
- description: This resource represents permission schemes. Use it to get, create,
    update, and delete permission schemes as well as get, create, update, and delete
    details of the permissions granted in those schemes.
  name: Permission schemes
- description: This resource represents projects. Use this resource to get, create,
    update, and delete projects. Also get statuses available to a project, a project's
    notification schemes, and update a project's type.
  name: Projects
- description: This resource represents avatars associated with a project. Use it
    to get, load, set, and remove project avatars.
  name: Project avatars
- description: This resource represents project categories. Use it to create, update,
    and delete project categories as well as obtain a list of all project categories
    and details of individual categories. For more information on managing project
    categories, see [Adding, assigning, and deleting project categories](https://confluence.atlassian.com/x/-A5WMg).
  name: Project categories
- description: This resource represents project components. Uses to get, create, update,
    and delete project components. Also get components for project and get a count
    of issues by component.
  name: Project components
- description: This resource provides validation for project keys and names.
  name: Project key and name validation
- description: "This resource represents permission schemes for a project. Use this\
    \ resource to:\n\n *  get details of a project's issue security levels available\
    \ to the calling user.\n *  get the permission scheme associated with the project\
    \ or assign different permission scheme to the project.\n *  get details of a\
    \ project's issue security scheme.\n\nSee [Managing project permissions](https://confluence.atlassian.com/x/yodKLg)\
    \ for more information about permission schemes."
  name: Project permission schemes
- description: This resource represents [project](#api-group-Projects) properties,
    which provides for storing custom data against a project. Use it to get, create,
    and delete project properties as well as get a list of property keys for a project.
    Project properties are a type of [entity property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Project properties
- description: This resource represents the roles that users can play in projects.
    Use this resource to get, create, update, and delete project roles.
  name: Project roles
- description: This resource represents the users assigned to [project roles](#api-group-Issue-comments).
    Use this resource to get, add, and remove default users from project roles. Also
    use this resource to add and remove users from a project role associated with
    a project.
  name: Project role actors
- description: This resource represents project types. Use it to obtain a list of
    all project types, a list of project types accessible to the calling user, and
    details of a project type.
  name: Project types
- description: This resource represents project versions. Use it to get, get lists
    of, create, update, move, merge, and delete project versions. This resource also
    provides counts of issues by version.
  name: Project versions
- description: "This resource represents the screens used to record issue details.\
    \ Use this resource to:\n\n *  get details of all screens.\n *  get details of\
    \ all the fields available for use on screens.\n *  add a field to the default\
    \ screen.\n *  get, create, update, move, and delete screen tabs.\n *  get, add,\
    \ move, and remove fields from screen tabs.\n *  get details of issue type screen\
    \ scheme mappings."
  name: Screens
- description: This resource provides information about the Jira instance.
  name: Server info
- description: This resource represents a [long-running asynchronous tasks](#async-operations).
    Use it to obtain details about the progress of a long-running task or cancel a
    long-running task.
  name: Tasks
- description: This resource represents time tracking and time tracking providers.
    Use it to get and set the time tracking provider, get and set the time tracking
    options, and disable time tracking.
  name: Time tracking
- description: "This resource represent users. Use this resource to:\n\n *  get, get\
    \ a list of, create, and delete users.\n *  get, set, and reset a user's default\
    \ issue table columns.\n *  get a list of the groups the user belongs to.\n *\
    \  get a list of user account IDs for a list of usernames or user keys."
  name: Users
- description: 'This resource represents [user](#api-group-Users) properties and provides
    for storing custom data against a user. Use it to get, create, and delete user
    properties as well as get a list of property keys for a user. This resourse is
    designed for integrations and apps to store per-user data and settings. This enables
    data used to customized the user experience to be kept in the Jira Cloud instance''s
    database. User properties are a type of [entity property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).


    This resource does not access the [user properties](https://confluence.atlassian.com/x/8YxjL)
    created and maintained in Jira.'
  name: User properties
- description: This resource represents various ways to search for and find users.
    Use it to obtain list of users including users assignable to projects and issues,
    users with permissions, user lists for pickup fields, and user lists generated
    using structured queries. Note that the operations in this resource only return
    users found within the first 1000 users.
  name: User search
- description: This resource represents webhooks. Webhooks are calls sent to a URL
    when an event occurs in Jira for issues specified by a JQL query. Only Connect
    apps can register webhooks. For more information, see [Webhooks](https://developer.atlassian.com/cloud/jira/platform/webhooks/#registering-a-webhook-via-the-jira-rest-api-for-connect-apps).
  name: Webhooks
- description: This resource represents workflows. Use it to get a list of workflows.
  name: Workflows
- description: This resource represents workflow transition rules. Workflow transition
    rules define a Connect app routine, such as a [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
    that is executed in association with the workflow. Use this resource to read and
    modify configuration of workflow transition rules.
  name: Workflow transition rules
- description: 'This resource represents workflow schemes. Use this resource to manage
    workflow schemes and the workflow scheme''s workflows and issue types.


    A workflow scheme maps issue types to workflows. A workflow scheme can be associated
    with one or more projects, which enables the projects to use the workflow-issue
    type mappings.


    Active workflow schemes (workflow schemes that are used by projects) cannot be
    edited. When an active workflow scheme is edited, a draft copy of the scheme is
    created. The draft workflow scheme is then be edited and published (replacing
    the active scheme).


    See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg)
    for more information.'
  name: Workflow schemes
- description: 'This resource represents the associations between workflow schemes
    and projects.


    For more information, see [Managing your workflows](https://confluence.atlassian.com/x/q4hKLg).'
  name: Workflow scheme project associations
- description: 'This resource represents draft workflow schemes. Use this resource
    to manage drafts of workflow schemes.


    A workflow scheme maps issue types to workflows. A workflow scheme can be associated
    with one or more projects, which enables the projects to use the workflow-issue
    type mappings.


    Active workflow schemes (workflow schemes that are used by projects) cannot be
    edited. Edting an active workflow scheme creates a draft copy of the scheme. The
    draft workflow scheme can then be edited and published (replacing the active scheme).


    See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg)
    for more information.'
  name: Workflow scheme drafts
- description: This resource represents issue workflow statuses. Use it to obtain
    a list of all statuses associated with workflows and the details of a status.
  name: Workflow statuses
- description: This resource represents status categories. Use it to obtain a list
    of all status categories and the details of a category. Status categories provided
    a mechanism for categorizing [statuses](#api-group-Workflow-statuses).
  name: Workflow status categories
- description: This resource represents workflow transition properties, which provides
    for storing custom data against a workflow transition. Use it to get, create,
    and delete workflow transition properties as well as get a list of property keys
    for a workflow transition. Workflow transition properties are a type of [entity
    property](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
  name: Workflow transition properties
- description: 'This resource represents app properties. Use it to store arbitrary
    data for your

    [Connect app](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect).'
  name: App properties
- description: 'This resource represents [modules registered dynamically](https://developer.atlassian.com/cloud/jira/platform/dynamic-modules/)

    by [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect).'
  name: Dynamic modules
x-atlassian-narrative:
  documents:
  - anchor: about
    body: "The Jira REST API enables you to interact with Jira programmatically. Use\
      \ this API to \n[build apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/),\
      \ script interactions with \nJira, or develop any other type of integration.\
      \ This page documents the REST resources available in Jira Cloud, including\
      \ \nthe HTTP response codes and example requests and responses.\n\n**NOTE:**\
      \ Personal data that is used to identify users, such as `username` and `userKey`,\
      \ has been \nremoved from the Jira Cloud REST APIs. In addition, other personal\
      \ data (for example, email) is now restricted by a \nuser's profile settings\
      \ (or in the case of managed accounts, the visibility settings decided by the\
      \ site administrator). \nYou must update your apps to accommodate these changes,\
      \ if you have not done so already. This change was previously \nannounced on\
      \ 01 October 2018 and followed by a deprecation period \n(see the [announcement](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/))."
    title: About
  - anchor: version
    body: "This documentation is for **version 3** of the Jira Cloud platform REST\
      \ API, which is the latest version. \n\nThe URIs for resources have the following\
      \ structure:\n\n`https://<site-url>/rest/api/3/<resource-name>`\n\nFor example,\n\
      `https://your-domain.atlassian.net/rest/api/3/issue/DEMO-1`\n\n**Note that version\
      \ 3 of the Jira Cloud platform REST API is in beta**. All the endpoints from\
      \ the \n[version 2](https://developer.atlassian.com/cloud/jira/platform/rest/v2/)\
      \ API are available. However,\nthey are under development and may change. \n\
      \nThe change from version 2 is the introduction of the \n[Atlassian Document\
      \ Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/)\
      \ \nto: \n- `body` in comments, including where comments are used in issue,\
      \ issue link, and transition resources.\n- `comment` in worklogs.\n- `description`\
      \ and `environment` fields in issues.\n- `textarea` type custom fields (multi-line\
      \ text fields) in issues. Single line custom fields \n  (`textfield`) accept\
      \ a string and don't handle Atlassian Document Format content."
    title: Version and URI
  - anchor: authentication
    body: "### Connect apps\n\nFor Connect apps, authentication (JWT-based) is built\
      \ into the Connect libraries. Authorization is implemented using either \nscopes\
      \ (shown as _App scope required_ for operations on this page) or user impersonation.\
      \ See \n[Security for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)\
      \ \nfor details.\n\n### Other integrations\n\nFor integrations that are not\
      \ Connect apps, use OAuth 2.0 authorization code grants (3LO) for security \n\
      (3LO scopes are shown as _OAuth scopes required_ for operations on this page).\
      \ Basic authentication is also available, \nbut you should only use it for tools\
      \ such as personal scripts or bots. See \n[Security for other integrations](https://developer.atlassian.com/cloud/jira/platform/security-for-other-integrations/)\
      \ \nfor details."
    title: Authentication and authorization
  - anchor: permissions
    body: "### Operation permissions\n\nMost operations in this API require permissions.\
      \ The calling user must have the required permissions for an operation to \n\
      use it. Note that for Connect apps, the app user must have the required permissions\
      \ for the operation and the app must \nhave scopes that permit the operation.\n\
      \nA permission can be granted to a group, project role, or issue role that the\
      \ user is a member of, or granted directly to a user. \nSee [Permissions overview](https://confluence.atlassian.com/x/FQiiLQ)\
      \ for details. The most common permissions are:\n\n- **Administer the Cloud\
      \ site**: Users in the _site-admins_ group have this \npermission. See [Manage\
      \ groups](https://confluence.atlassian.com/x/24xjL) for details.\n- **Administer\
      \ Jira**: Granted by the _Jira Administrators_ global permission. Users in the\
      \ _administrators_ group have this \npermission. See [Manage groups](https://confluence.atlassian.com/x/24xjL)\
      \ and \n[Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)\
      \ for details.\n- **Administer a project in Jira**: Granted by the _Administer\
      \ projects_ project permission for a project. This can be \ngranted to a user,\
      \ a group, a project role, and more. \nSee [Managing project permissions](https://confluence.atlassian.com/x/yodKLg)\
      \ for details.\n- **Access a project in Jira**: Granted by the _Browse projects_\
      \ project permission for a project. This can be \ngranted to a user, a group,\
      \ a project role, and more. \nSee [Managing project permissions](https://confluence.atlassian.com/x/yodKLg)\
      \ for details.\n- **Access Jira**: Granted by the _Jira Users_ global permission.\
      \ Users in the _\\[product]-users_ (for example, \n_jira-software-users_) group\
      \ have this permission. \nSee [Manage groups](https://confluence.atlassian.com/x/24xjL)\
      \ and \n[Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)\
      \ for details.\n\n### Anonymous access\n\nSome operations provide support for\
      \ anonymous access. However, anonymous access is only available if \nthe Jira\
      \ permission needed to access the object or records returned by the operation\
      \ is granted to \nthe _Public_ group. See [Allowing anonymous access to your\
      \ project](https://confluence.atlassian.com/x/GDxxLg) \nfor details.\n\nIf an\
      \ operation is called anonymously and anonymous access is not available, the\
      \ operation will return \nan error. Note that not all operations that correspond\
      \ to objects that can be given public access \nprovide for anonymous access."
    title: Permissions
  - anchor: expansion
    body: "### Expansion\n\nThe Jira REST API uses resource expansion, which means\
      \ that some parts of a resource are not returned unless specified \nin the request.\
      \ This simplifies responses and minimizes network traffic.\n\nTo expand part\
      \ of a resource in a request, use the expand query parameter and specify the\
      \ object(s) to be expanded. \nIf you need to expand nested objects, use the\
      \ `.` dot notation. If you need to expand multiple objects, use a \ncomma-separated\
      \ list. \n\nFor example, the following request expands the `names` and `renderedFields`\
      \ properties for the _JRACLOUD-34423_ issue:\n\n`GET issue/JRACLOUD-34423?expand=names,renderedFields`\n\
      \nTo discover which object can be expanded, refer to the `expand` property in\
      \ the object. \nIn the JSON example below, the resource declares `widgets` as\
      \ expandable.\n\n```json\n{\n  \"expand\": \"widgets\", \n  \"self\": \"https://your-domain.atlassian.net/rest/api/3/resource/KEY-1\"\
      , \n  \"widgets\": {\n    \"widgets\": [],\n    \"size\": 5\n   }\n}\n```\n\n\
      ### Pagination\n\nThe Jira REST API uses pagination to improve performance.\
      \ Pagination is enforced for operations that could return a large \ncollection\
      \ of items. When you make a request to a paginated resource, the response wraps\
      \ the returned array of values in \na JSON object with paging metadata. For\
      \ example:\n\n```json\n{\n    \"startAt\" : 0,\n    \"maxResults\" : 10,\n \
      \   \"total\": 200,\n    \"isLast\": false,\n    \"values\": [\n        { /*\
      \ result 0 */ },\n        { /* result 1 */ },\n        { /* result 2 */ }\n\
      \    ]\n}\n```\n\n*   `startAt` is the index of the first item returned in the\
      \ page.\n*   `maxResults` is the maximum number of items that a page can return.\
      \ Each operation can have a different limit for\n    the number of items returned,\
      \ and these limits may change without notice. To find the maximum number of\
      \ items \n    that an operation could return, set `maxResults` to a large number\u2014\
      for example, over 1000\u2014and if the returned value of `maxResults` is less\
      \ than the requested value, the returned value is the maximum.\n*    `total`\
      \ is the total number of items contained in all pages. This number **_may change_**\
      \ as the client \nrequests the subsequent pages, therefore the client should\
      \ always assume that the requested page can be empty. Note \nthat this property\
      \ is not returned for all operations.\n*   `isLast` indicates whether the page\
      \ returned is the last one. Note that this property is not returned for all\
      \ operations.\n\n### Ordering\n\nSome operations support ordering the elements\
      \ of a response by a field. Check the documentation for the operation to \n\
      confirm whether ordering of a response is supported and which fields can be\
      \ used. Responses are listed in ascending order \nby default. You can change\
      \ the order using the `orderby` query parameter with a `-` or `+` symbol. For\
      \ example:\n\n*   `?orderBy=name` to order by `name` field ascending.\n*   `?orderBy=+name`\
      \ to order by `name` field ascending.\n*   `?orderBy=-name` to order by `name`\
      \ field descending.\n\n\n"
    title: Expansion, pagination, and ordering
  - anchor: special-request-headers
    body: "The following request and response headers define important metadata for\
      \ the Jira Cloud REST API resources.\n\n-   `X-Atlassian-Token` (request): Operations\
      \ that accept multipart/form-data must include the `X-Atlassian-Token: no-check`\
      \ \nheader in requests. Otherwise the request will be blocked by cross-site\
      \ request forgery (CSRF/XSRF) protection.\n-   `X-AACCOUNTID` (response): This\
      \ response header contains the Atlassian account ID of the authenticated user."
    title: Special headers
  - anchor: anonymous-operations
    body: " Jira provides for all permissions, except the [global permission](https://confluence.atlassian.com/x/x4dKLg)\
      \ Administer Jira, to be assigned to *Anyone*. Once a permission is assigned\
      \ to *Anyone*, anyone knowing a project's URL is able to use the features in\
      \ Jira enabled by the permission. However, the Jira REST API does not enable\
      \ anonymous access for operations by default. This means that an anonymous user\
      \ who may be able to perform an action through Jira, may not be able to perform\
      \ the same action where it's enabled by the REST API. \n\n The operations that\
      \ provide anonymous access are annotated \"This operation can be accessed anonymously.\""
    title: Anonymous operations
  - anchor: async-operations
    body: "Some Jira REST API operations may trigger long-running or computationally\
      \ expensive tasks. In these cases, the operation \nwill schedule an asynchronous\
      \ task and return a `303 (See Other)` response, indicating the location of the\
      \ queued task \nin the `Location` header. You can query this task to get progress\
      \ updates.\n\nWhen the task finishes, the response object will contain the `result`\
      \ field. The content of the field is specific to the \noperation that created\
      \ the task. Refer to the operation\u2019s documentation for more information.\n\
      \nNote that asynchronous tasks are not guaranteed to be run in order. In other\
      \ words, if you need your tasks to execute \nin a certain order, you should\
      \ start a task only after the prerequisite task(s) have finished."
    title: Asynchronous operations
  - anchor: experimental
    body: "Features and methods marked as experimental may change without notice.\
      \ Feedback on experimental functionality is welcome. \nReport your suggestions\
      \ and bugs in the [ACJIRA project](https://ecosystem.atlassian.net/projects/ACJIRA)\
      \ (preferred) or use the \n**Give docs feedback** link at the top of this page.\
      \ \n"
    title: Experimental features
  - anchor: status-codes
    body: "The Jira Cloud platform REST API uses the [standard HTTP status codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n\
      \nOperations that return an error status code may also return a response body\
      \ containing details of the error or errors. \nThe schema for the response body\
      \ is shown below:\n\n\n```json\n{\n  \"id\": \"https://docs.atlassian.com/jira/REST/schema/error-collection#\"\
      ,\n  \"title\": \"Error Collection\",\n  \"type\": \"object\",\n  \"properties\"\
      : {\n    \"errorMessages\": {\n      \"type\": \"array\",\n      \"items\":\
      \ {\n        \"type\": \"string\"\n      }\n    },\n    \"errors\": {\n    \
      \  \"type\": \"object\",\n      \"patternProperties\": {\n        \".+\": {\n\
      \          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\"\
      : false\n    },\n    \"status\": { \n      \"type\": \"integer\"\n    }\n  },\n\
      \  \"additionalProperties\": false\n}\n```"